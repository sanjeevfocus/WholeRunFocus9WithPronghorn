package com.focus.Pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;

public class BatchNegativeTestingOptionsPage extends BaseEngine
{

	// Financial Menu and Sub Menus
	@FindBy(xpath="//*[@id='60']/div/span")
	private static WebElement  financialsMenu;



	@FindBy(xpath="//*[@id='61']/span")
	private static WebElement  financialsTransactionMenu; 		

	@FindBy(xpath="//*[@id='2001']/span")
	private static WebElement  cashAndBankMenu; 

	@FindBy(xpath="//*[@id='2002']/span")
	private static WebElement  receiptsVoucher;

	@FindBy(xpath="//*[@id='2003']/span")
	private static WebElement  paymentsVoucher;

	@FindBy(xpath="//*[@id='2004']/span")
	private static WebElement  pettyVoucher;

	@FindBy(xpath="//*[@id='2005']/span")
	private static WebElement  postDatedReceiptsVoucher;

	@FindBy(xpath="//*[@id='2006']/span")
	private static WebElement  postDatedPaymentsVoucher;

	@FindBy(xpath="//*[@id='108']/span")
	private static WebElement  defineChequeSeries;

	@FindBy(xpath="//*[@id='109']/span")
	private static WebElement  cancelCheque;


	@FindBy(xpath="//*[@id='2007']/span")
	private static WebElement  financialsTransactionsPurchaseMenu; 

	@FindBy(xpath="//*[@id='2008']/span")
	private static WebElement  purchaseVoucher;

	@FindBy(xpath="//*[@id='2009']/span")
	private static WebElement  purchaseReturnsVoucher;

	@FindBy(xpath="//*[@id='2050']/span")
	private static WebElement  purchaseVoucherN;


	@FindBy(xpath="//*[@id='2014']/span")
	private static WebElement  financialsTransactionsSalesMenu;

	@FindBy(xpath="//*[@id='2015']/span")
	private static WebElement  salesInvoicesVoucher;

	@FindBy(xpath="//*[@id='2016']/span")
	private static WebElement  salesReturnsVoucher;

	@FindBy(xpath="//*[@id='2020']/span")
	private static WebElement  cashSales;

	@FindBy(xpath="//*[@id='2021']/span")
	private static WebElement  hirePurchaseSales;

	@FindBy(xpath="//*[@id='2023']/span")
	private static WebElement  financialsTransactionsJournalsMenu;

	@FindBy(xpath="//*[@id='2032']/span")
	private static WebElement  journalsEntriesVoucher;

	@FindBy(xpath="//*[@id='2025']/span")
	private static WebElement  forexJVVoucher;

	@FindBy(xpath="//*[@id='2029']/span")
	private static WebElement  interdepartmentaljvVoucher;

	@FindBy(xpath="//*[@id='2024']/span")
	private static WebElement  oldJouranlEntriesVoucher;

	@FindBy(xpath="//*[@id='2026']/span")
	private static WebElement  debitNotesVoucher;

	@FindBy(xpath="//*[@id='2030']/span")
	private static WebElement  debitNotesLinewiseVoucher;

	@FindBy(xpath="//*[@id='2027']/span")
	private static WebElement  creditNotesVoucher;

	@FindBy(xpath="//*[@id='2031']/span")
	private static WebElement  creditNotesLinewiseVoucher;

	@FindBy(xpath="//*[@id='2028']/span")
	private static WebElement  openingBalancesVoucher;

	@FindBy(xpath="//*[@id='2046']/span")
	private static WebElement  fixedAssetsDepreciationVoucher;

	@FindBy(xpath="//*[@id='219']/span")
	private static WebElement  financialsTransactionsAutoPostingsMenu;

	@FindBy(xpath="//*[@id='77']/span")
	private static WebElement  recurringJournalVoucher;

	@FindBy(xpath="//*[@id='79']/span")
	private static WebElement  postRecurringJournal;

	@FindBy(xpath="//*[@id='92']/span")
	private static WebElement  recurringJournalTemplate;

	@FindBy(xpath="//*[@id='91']/span")
	private static WebElement  postInterest;

	@FindBy(xpath="//*[@id='90']/span")
	private static WebElement  convertMaturedPDCs;

	@FindBy(xpath="//*[@id='161']/span")
	private static WebElement assignPDCLimit;

	@FindBy(xpath="//*[@id='166']/span")
	private static WebElement  stockReplenishment;

	@FindBy(xpath="//*[@id='62']/span")
	private static WebElement  financialsCreditManagementMenu; 

	@FindBy(xpath="//*[@id='63']/span")
	private static WebElement  paymentTerms;

	@FindBy(xpath="//*[@id='64']/span")
	private static WebElement  financeTerms;

	@FindBy(xpath="//*[@id='65']/span")
	private static WebElement  reminderTerms;		

	@FindBy(xpath="//*[@id='89']/span")
	private static WebElement  sendReminder;

	@FindBy(xpath="//*[@id='217']/span")
	private static WebElement  delinquency;

	@FindBy(xpath="//*[@id='73']/span")
	private static WebElement  questionnarie;

	@FindBy(xpath="//*[@id='218']/span")
	private static WebElement  delinquencyMgmt;

	@FindBy(xpath="//*[@id='35']/span")
	private static WebElement  creidtApproval;


	@FindBy(xpath="//*[@id='id_menu_tree_135']/a/i")
	private static WebElement  inventoryExpandBtn;



	@FindBy(xpath="//*[@id='id_menu_tree_139']/a/i")
	private static WebElement  inventoryPurchasesBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_140']/a/i")
	private static WebElement  inventorySalesBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_2033']/a/i")
	private static WebElement  stocksBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_200']/a/i")
	private static WebElement  inventoryReportsExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_540']/a/i")
	private static WebElement  binsReportBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_621']/a/i")
	private static WebElement  stockAgeingAnalysisBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_550']/a/i")
	private static WebElement  ordermanagementExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_600']/a/i")
	private static WebElement  analysisOfLinkedUnlinkedDocumentsBtn;

	//Fixed Asset************************							

	@FindBy(xpath="//*[@id='id_menu_tree_136']/a/i")
	private static WebElement  fixedAssetExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_138']/a/i")
	private static WebElement  fixedAssetTransactionExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_50010']/a/i")
	private static WebElement  fixedAssetReportsBtn;

	//Production ***********************							

	@FindBy(xpath="//*[@id='id_menu_tree_3000']/a/i")
	private static WebElement  productionExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_3001']/a/i")
	private static WebElement  productionTransactionBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_625']/a/i")
	private static WebElement  productionReportBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_3006']/a/i")
	private static WebElement  mrpSettingsBtn;

	//Point Of Sale ***********************************				

	@FindBy(xpath="//*[@id='id_menu_tree_8000']/a/i")
	private static WebElement  pointofSale_ExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8004']/a/i")
	private static WebElement  mainScreenBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8500']/a/i")
	private static WebElement  posReportsExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8501']/a/i")
	private static WebElement  retailSaleReportBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8507']/a/i")
	private static WebElement  summarysalesReportBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8513']/a/i")
	private static WebElement  preOrderReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8523']/a/i")
	private static WebElement  memberReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8530']/a/i")
	private static WebElement  memberPointsReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8535']/a/i")
	private static WebElement  itemReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8540']/a/i")
	private static WebElement  cashReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8545']/a/i")
	private static WebElement  stockReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8550']/a/i")
	private static WebElement  periodicSalesReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8556']/a/i")
	private static WebElement  lastYearComaprisionReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8562']/a/i")
	private static WebElement  miscellaneousReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8571']/a/i")
	private static WebElement  restaurantReportsBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8900']/a/i")
	private static WebElement  reportsTableManagementBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8003']/a/i")
	private static WebElement  utilitiesExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_8027']/a/i")
	private static WebElement  bbqConversionBtn;


	//Quality Control *****************  	



	@FindBy(xpath="//*[@id='id_menu_tree_150']/a/i")
	private static WebElement  qualityControlExpandBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_151']/a/i")
	private static WebElement  qualityControlTransactionBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_152']/a/i")
	private static WebElement  qualityControlReportsBtn;



	// Views Tab


	@FindBy(xpath="//span[@class='icon-views'")
	private static WebElement  viewsTab;



	// Export Fields 

	@FindBy(xpath="//span[contains(text(),'Export Fields')]")
	private static WebElement exportFieldsTab;

	// Triggers

	@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
	private static WebElement  triggersTab;	

	//  Document Numbering

	@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
	private static WebElement  documentNumberingTab;

	// Hire Purchase	

	@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
	private static WebElement hirePurchasetab;



	// Reports Tab	

	@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
	private static WebElement  reportsTab;	

	// Schemes

	@FindBy(xpath="//span[contains(text(),'Schemes')]")
	private static WebElement schemestab;	




	////////////////////

	@FindBy(xpath="//div[contains(text(),'Inventory')]")
	private static WebElement  inventoryMenu; 

	@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
	private static WebElement  invTransactionsMenu; 

	@FindBy(xpath="//*[@id='139']/span")
	private static WebElement  invTransPurchasesMenu; 

	@FindBy(xpath="//*[@id='2010']/span")
	private static WebElement  requestForQuoteVoucher;

	@FindBy(xpath="//*[@id='2011']/span")
	private static WebElement  purchasesQuotationsVoucher;

	@FindBy(xpath="//*[@id='2012']/span")
	private static WebElement  purchasesOrdersVoucher;

	@FindBy(xpath="//*[@id='2013']/span")
	private static WebElement  materialReceiptNotesVoucher;

	@FindBy(xpath="//*[@id='140']/span")
	private static WebElement  invTransSalesMenu; 

	@FindBy(xpath="//*[@id='2018']/span")
	private static WebElement  salesQuotationsVoucher;

	@FindBy(xpath="//*[@id='2019']/span")
	private static WebElement  deliveryNotesVoucher;

	@FindBy(xpath="//*[@id='2022']/span")
	private static WebElement  posSalesVoucher;

	@FindBy(xpath="//*[@id='2045']/span")
	private static WebElement  productionOrdersVoucher;

	@FindBy(xpath="//*[@id='2017']/span")
	private static WebElement  salesOrdersVoucher;



	@FindBy(xpath="//*[@id='2034']/span")
	private static WebElement  shortagesInStockVoucher;

	@FindBy(xpath="//*[@id='2035']/span")
	private static WebElement  excessesInStocksVoucher;

	@FindBy(xpath="//*[@id='2036']/span")
	private static WebElement  stockTransfersVoucher;

	@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
	private static WebElement  openingStocksVoucher;

	@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
	private static WebElement  openingStocksNEWVoucher;

	@FindBy(xpath="//*[@id='2038']/span")
	private static WebElement  materialRequisitionVoucher;

	@FindBy(xpath="//*[@id='2049']/span")
	private static WebElement  stockAdjustmentVoucher;

	@FindBy(xpath="//*[@id='164']/span")
	private static WebElement  holdAndUnholdStockVoucher;

	@FindBy(xpath="//*[@id='93']/span")
	private static WebElement  stockReconciliation;

	@FindBy(xpath="//*[@id='99']/span")
	private static WebElement  stockAllocation;

	@FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
	private static WebElement  inventoryReportsMenu; 

	@FindBy(xpath="//a[@id='202']//span[contains(text(),'Item Query')]")
	private static WebElement itemQuery;

	@FindBy(xpath="//span[contains(text(),'Stock Ledger')]")
	private static WebElement  stockLedger;

	@FindBy(xpath="//span[contains(text(),'Opening Stocks Register')]")
	private static WebElement  openingStocksRegister;

	@FindBy(xpath="//span[contains(text(),'Stock Statement')]")
	private static WebElement  stockStatement;

	@FindBy(xpath="//a[@id='575']//span[contains(text(),'Stock movement')]")
	private static WebElement  stockMovement;

	@FindBy(xpath="//span[contains(text(),'Multi Level Stock Movement')]")
	private static WebElement  multiLevelStockMovement;

	@FindBy(xpath="//span[contains(text(),'Virtual Stock Analysis')]")
	private static WebElement  virtualStockAnalysis;

	@FindBy(xpath="//a[@id='578']")
	private static WebElement  stockValuation;

	@FindBy(xpath="//a[@id='656']")
	private static WebElement  stockReportByTag;

	@FindBy(xpath="//a[@id='579']//span[contains(text(),'ABC Analysis')]")
	private static WebElement  abcAnalysis;

	@FindBy(xpath="//span[contains(text(),'Stock Analysis by Batch')]")
	private static WebElement  stockAnalysisByBatch;

	@FindBy(xpath="//span[contains(text(),'Stock Analysis by RMA')]")
	private static WebElement  stockAnalysisByRMA;

	@FindBy(xpath="//span[contains(text(),'Bins Report')]")
	private static WebElement  binsReportMenu;

	@FindBy(xpath="//*[@id='587']/span")
	private static WebElement  stockDetailsByBins;

	@FindBy(xpath="//*[@id='588']/span")
	private static WebElement  stockBalancesByBins;

	@FindBy(xpath="//*[@id='589']/span")
	private static WebElement  stockBalancesByItemByBins;

	@FindBy(xpath="//*[@id='590']/span")
	private static WebElement  expiredStockByBins;		

	@FindBy(xpath="//span[contains(text(),'Stock balance by warehouse')]")
	private static WebElement  stockBalanceByWarehouse;

	@FindBy(xpath="//span[contains(text(),'Stock ageing analysis')]")
	private static WebElement  stockAgeingAnalysisMenu;

	@FindBy(xpath="//*[@id='582']/span")
	private static WebElement  ageingAnalysis;

	@FindBy(xpath="//*[@id='622']/span")
	private static WebElement  ageingAnalysisByBatch;

	@FindBy(xpath="//*[@id='623']/span")
	private static WebElement  ageingAnalysisByRMA;		

	@FindBy(xpath="//*[@id='591']/span")
	private static WebElement  ageingStockByBins;

	@FindBy(xpath="//*[@id='646']/span")
	private static WebElement  ageingByItemByBins;		

	@FindBy(xpath="//span[contains(text(),'Reorder Report')]")
	private static WebElement reorderReport;

	@FindBy(xpath="//a[@id='584']//span[contains(text(),'Fast Moving Item')]")
	private static WebElement  fastMovingItem;

	@FindBy(xpath="//a[@id='585']//span[contains(text(),'Slow Moving Item')]")
	private static WebElement  slowMovingItem;

	@FindBy(xpath="//span[contains(text(),'Peak/Low Balances')]")
	private static WebElement  peakORLowBalances;

	@FindBy(xpath="//span[contains(text(),'Best Selling Item')]")
	private static WebElement  bestSellingItem;

	@FindBy(xpath="//span[contains(text(),'Raise Indent Item with Low Stock')]")
	private static WebElement  raiseIndentItemWithLowStock;

	@FindBy(xpath="//span[contains(text(),'Stock transfer report')]")
	private static WebElement  stockTransferReport;

	@FindBy(xpath="//span[contains(text(),'Raise request for quote')]")
	private static WebElement  raiseRequestForQuote;

	@FindBy(xpath="//span[contains(text(),'Stock reservation report')]")
	private static WebElement  stockReservationReport;

	@FindBy(xpath="//span[contains(text(),'Transaction type-wise stock report')]")
	private static WebElement  transactionTypeWiseStockReport;

	@FindBy(xpath="//span[contains(text(),'Order Management')]")
	private static WebElement  orderManagementMenu; 

	@FindBy(xpath="//*[@id='600']/span")
	private static WebElement  analysisOfLinkedORUnlinkedDocumentsMenu;

	@FindBy(xpath="//*[@id='601']/span")
	private static WebElement  listingOfDocuments;

	@FindBy(xpath="//*[@id='602']/span")
	private static WebElement listingOfDocumentsByDueDate;

	@FindBy(xpath="//*[@id='603']/span")
	private static WebElement  ageingOfPendingDocuments;

	@FindBy(xpath="//*[@id='604']/span")
	private static WebElement  ageingofPendingDocumentsByDueDate;

	@FindBy(xpath="//*[@id='624']/span")
	private static WebElement  linkChainAnalysis;

	@FindBy(xpath="//*[@id='657']/span")
	private static WebElement  pendingVoucherReport;

	@FindBy(xpath="//*[@id='201']/span")
	private static WebElement  quotationAnalysis;

	@FindBy(xpath="//*[@id='555']/span")
	private static WebElement  purchasesQuotation;

	@FindBy(xpath="//*[@id='556']/span")
	private static WebElement  salesQuotation;

	@FindBy(xpath="//*[@id='574']/span")
	private static WebElement  lowestQuotation;

	@FindBy(xpath="//*[@id='553']/span")
	private static WebElement  purchasesOrders;		

	@FindBy(xpath="//*[@id='554']/span")
	private static WebElement  salesOrders;

	///////////////////////////////////////////////////////////////////


	// Item Query Elements

	@FindBy(xpath="//input[@id='productQuery']")
	private static WebElement IQ_ItemTxt;

	@FindBy(xpath="//button[contains(text(),'GetStock')]")
	private static WebElement IQ_getStockBtn;

	@FindBy(xpath="//button[contains(text(),'Customize')]")
	private static WebElement IQ_customizeBtn;

	@FindBy(xpath="//span[@id='id_productquery_button_clear']")
	private static WebElement IQ_clearBtn;

	@FindBy(xpath="//span[@id='id_productquery_button_close']")
	private static WebElement IQ_closeBtn;

	@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
	private static WebElement IQ_OpeningStockQtyLable;

	@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
	private static WebElement IQ_PendingPurchaseOrdersLable;

	@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
	private static WebElement IQ_CurrentStockLable;

	@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
	private static WebElement IQ_PendingSalesOrdersLable;

	@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
	private static WebElement IQ_AvgStockRateLable;

	@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
	private static WebElement IQ_QtytobeOrderedLable;

	@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
	private static WebElement IQ_BaseUnitLable;

	@FindBy(xpath="//label[contains(text(),'Value :')]")
	private static WebElement IQ_ValueLable;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
	private static WebElement IQ_PurDate;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
	private static WebElement IQ_PurVoucherNo;

	@FindBy(xpath="//th[contains(text(),'Vendor')]")
	private static WebElement IQ_PurVendor;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
	private static WebElement IQ_PurQty;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
	private static WebElement IQ_PurRate;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
	private static WebElement IQ_PurCurrency;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
	private static WebElement IQ_SaleDate;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
	private static WebElement IQ_SaleVoucherNo;

	@FindBy(xpath="//th[contains(text(),'Customer')]")
	private static WebElement IQ_SaleCustomer;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
	private static WebElement IQ_SaleQty;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
	private static WebElement IQ_SaleRate;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
	private static WebElement IQ_SaleCurrency;

	@FindBy(xpath="//span[@id='openingStock']")
	private static WebElement IQ_OpeningStockQuantity;

	@FindBy(xpath="//span[@id='currentStock']")
	private static WebElement IQ_CurrentStock;

	@FindBy(xpath="//span[@id='avgStockRate']")
	private static WebElement IQ_AvgStockRate;

	@FindBy(xpath="//span[@id='value']")
	private static WebElement IQ_Value;

	@FindBy(xpath="//span[@id='iBaseUnit']")
	private static WebElement IQ_BaseUnit;

	@FindBy(xpath="//span[@id='purchaseOrdered']")
	private static WebElement IQ_PendingPurchaseOrders;

	@FindBy(xpath="//span[@id='salesOrdered']")
	private static WebElement IQ_PendingSalesOrders;

	@FindBy(xpath="//span[@id='quantityToBeOrdered']")
	private static WebElement IQ_QtyToBeOrdered;


	// Purchase Table

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
	private static WebElement Pur1strow_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
	private static WebElement Pur1strow_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
	private static WebElement Pur1strow_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
	private static WebElement Pur1strow_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
	private static WebElement Pur1strow_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
	private static WebElement Pur1strow_6thColumn;



	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
	private static WebElement Pur2ndrow_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
	private static WebElement Pur2ndrow_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
	private static WebElement Pur2ndrow_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
	private static WebElement Pur2ndrow_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
	private static WebElement Pur2ndrow_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
	private static WebElement Pur2ndrow_6thColumn;



	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
	private static WebElement Pur3rdrow_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
	private static WebElement Pur3rdrow_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
	private static WebElement Pur3rdrow_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
	private static WebElement Pur3rdrow_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
	private static WebElement Pur3rdrow_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
	private static WebElement Pur3rdrow_6thColumn;



	@FindBy(xpath="//td[contains(text(),'Quantity Purchased Till Date:')]")
	private static WebElement QtyPurchasedTillDate;

	@FindBy(xpath="//div[@class='form-group col-xs-12']//tr[4]//td[2]")
	private static WebElement PurTotal;




	@FindBy(xpath="//div[@id='PrdtDetails']//div[1]//div[1]//span[1]")
	private static WebElement BalancebyWareHouseExpandBtn;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[2]")
	private static WebElement IQ_WH1stRow1stCol;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[3]")
	private static WebElement IQ_WH1stRow2ndCol;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[4]")
	private static WebElement IQ_WH1stRow3rdCol;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[5]")
	private static WebElement IQ_WH1stRow4thCol;



	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[2]")
	private static WebElement IQ_WH2ndRow1stCol;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[3]")
	private static WebElement IQ_WH2ndRow2ndCol;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[4]")
	private static WebElement IQ_WH2ndRow3rdCol;

	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[5]")
	private static WebElement IQ_WH2ndRow4thCol;




	/*@FindBy(xpath="//*[@id='1']/td[2]")
			private static WebElement WH1strow_2ndColumn;

			@FindBy(xpath="//*[@id='1']/td[3]")
			private static WebElement WH1strow_3rdColumn;

			@FindBy(xpath="//*[@id='1']/td[4]")
			private static WebElement WH1strow_4thColumn;

			@FindBy(xpath="//*[@id='1']/td[5]")
			private static WebElement WH1strow_5thColumn;

			@FindBy(xpath="//*[@id='1']/td[6]")
			private static WebElement WH1strow_6thColumn;*/



	/*@FindBy(xpath="//*[@id='2']/td[2]")
			private static WebElement WH2ndrow_2ndColumn;

			@FindBy(xpath="//*[@id='2']/td[3]")
			private static WebElement WH2ndrow_3rdColumn;

			@FindBy(xpath="//*[@id='2']/td[4]")
			private static WebElement WH2ndrow_4thColumn;

			@FindBy(xpath="//*[@id='2']/td[5]")
			private static WebElement WH2ndrow_5thColumn;

			@FindBy(xpath="//*[@id='2']/td[6]")
			private static WebElement WH2ndrow_6thColumn;




			@FindBy(xpath="//*[@id='7']/td[2]")
			private static WebElement WH3rdrow_2ndColumn;

			@FindBy(xpath="//*[@id='7']/td[3]")
			private static WebElement WH3rdrow_3rdColumn;

			@FindBy(xpath="//*[@id='7']/td[4]")
			private static WebElement WH3rdrow_4thColumn;

			@FindBy(xpath="//*[@id='7']/td[5]")
			private static WebElement WH3rdrow_5thColumn;

			@FindBy(xpath="//*[@id='7']/td[6]")
			private static WebElement WH3rdrow_6thColumn;*/



	@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[4]/td[2]")
	private static WebElement WHStockTotal;

	@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[4]/td[4]")
	private static WebElement WHValueTotal;

	// Balance by bins

	@FindBy (xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
	private static WebElement BalancebyBinsExpandBtn;



	///////////////////////////////////////



	// Stock Ledger Elements 

	@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
	private static WebElement sl_Dropdown1;

	@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
	private static WebElement sl_Dropdown2;

	@FindBy(xpath="//label[@id='oncheckaccorderan']")
	private static WebElement sl_oncheckBtn;

	@FindBy(xpath="//input[@id='txtsrch-term']")
	private static WebElement sl_SearchItemTxt;

	@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
	private static WebElement sl_SearchBtn;

	@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
	private static WebElement sl_MasterTypeTxt;

	@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
	private static WebElement sl_AutoAdjustColumnsBtn;

	/*@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
			private static WebElement sl_SearchItemTxt;*/

	@FindBy(xpath="//input[@id='txtsrch-term']")
	private static WebElement sl_SearhItemTxt;

	@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
	private static WebElement sl_ItemGroupsBtn;

	@FindBy(xpath="//input[@id='liSelectAllMasters']")
	private static WebElement sl_HeaderSelectChkBox;

	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
	private static WebElement sl_ScheduleBtn;

	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
	private static WebElement sl_CustomizeBtn;

	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
	private static WebElement sl_FilterBtn;

	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-ok')]")
	private static WebElement sl_OkBtn;

	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
	private static WebElement sl_CloseBtn;

	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement sl_DateOptionDropdown;

	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement sl_StartDateTxt;

	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement sl_StartDateCalanderBtn;

	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement sl_EndDateTxt;

	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement sl_EndDateCalanderBtn;

	@FindBy(xpath="//*[@id='MasterSingle__101']")
	private static WebElement sl_WarehouseTxt;

	@FindBy(xpath="//*[@id='RITCheckbox__6']")
	private static WebElement sl_IgnoreInternalTransferForAgeingChkbox;

	@FindBy(xpath="//*[@id='RITCombobox__2']")
	private static WebElement sl_ReportingLevelDropdown;

	@FindBy(xpath="//*[@id='RITCheckbox__4']")
	private static WebElement sl_DisplayLinearReportChkbox;

	@FindBy(xpath="//*[@id='RITCombobox__1']")
	private static WebElement sl_StockValuationDropdown;

	@FindBy(xpath="//*[@id='RITCombobox__1']")
	private static WebElement sl_StockTypeDropdown;

	@FindBy(xpath="//input[@id='RITCheckbox__3']")
	private static WebElement sl_IncludeServiceTypeItemChkBox;

	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement sl_LayoutDropdown;

	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement sl_OutputDropdown;

	@FindBy(xpath="//input[@id='selectAllMasters_']")
	private static WebElement sl_SelectAllItemsChkBox;

	@FindBy(xpath="//input[@id='MasterSingle__1']")
	private static WebElement sl_FromWarehouseTxt;

	@FindBy(xpath="//input[@id='MasterSingle__2']")
	private static WebElement sl_ToWarehouseTxt;

	@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_FirstBtn;

	@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_PreviousBtn;

	@FindBy(xpath="//input[@id='btn1']")
	private static WebElement sl_PageBtn;

	@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_NextBtn;

	@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_EndBtn;

	@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]//input")
	private static WebElement sl_1stRowChkBox;

	@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]//input")
	private static WebElement sl_2ndRowChkBox;

	@FindBy(xpath="//tr[3]//td[8]//div[1]//label[1]//input")
	private static WebElement sl_3rdRowChkBox;



	////////

	@FindBy(xpath="//span[@id='reportSort']")
	private static WebElement report_sortingBtn;

	@FindBy(xpath="//span[@id='reportRefresh']")
	private static WebElement report_RefreshBtn;

	@FindBy(xpath="//span[@id='print_report_']")
	private static WebElement report_PrintBtn;

	@FindBy(xpath="//span[@class='dropdown']")
	private static WebElement report_ExportBtn;

	@FindBy(xpath="//span[@id='GraphIcon']")
	private static WebElement report_GraphBtn;

	@FindBy(xpath="//span[@id='BackTrackIcon']")
	private static WebElement report_BackTrackBtn;

	@FindBy(xpath="//span[@id='reportCustomize_']")
	private static WebElement report_ReportCustomizeBtn;

	@FindBy(xpath="//div[@id='Deleteayout']")
	private static WebElement report_CustomizationDeleteLayoutBtn;



	@FindBy(xpath="//span[@id='filterIcon_']")
	private static WebElement report_FilterBtn;

	@FindBy(xpath="//div[@id='dvfilter']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_FilterDownBtn;

	@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
	private static WebElement  report_FilterCustomizeBtn;

	@FindBy(xpath="//*[@id='FilterFields_551_0']/li[4]/a")
	private static WebElement reports_Filter_Customize_WarehouseExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_575_0']/li[4]/a")
	private static WebElement sMovement_Filter_Customize_WarehouseExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_576_0']/li[3]/a")
	private static WebElement multiLevel_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_577_0']/li[3]/a")
	private static WebElement virtualStock_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_578_0']/li[3]/a")
	private static WebElement stockValuation_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_656_0']/li[3]/a")
	private static WebElement stockReportByTag_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_579_0']/li[3]/a")
	private static WebElement abcAnalysis_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_580_0']/li[3]/a")
	private static WebElement stockAnalysisByBatch_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_582_0']/li[3]/a")
	private static WebElement stockAgeingAnalysis_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_622_0']/li[3]/a")
	private static WebElement ageingAnalysisByBatch_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_584_0']/li[3]/a")
	private static WebElement fastMovingItems_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_585_0']/li[3]/a")
	private static WebElement slowMovingItems_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_586_0']/li[3]/a")
	private static WebElement peakAndLowBalancesItems_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_631_0']/li[3]/a")
	private static WebElement bestSellingItems_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_649_0']/li[3]/a")
	private static WebElement stockTransferRegister_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_670_0']/li[3]/a")
	private static WebElement transTypeWiseStock_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_680_0']/li[3]/a")
	private static WebElement actualConsumptionReport_Filter_Customize_ItemExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_645_0']/li[4]/a")
	private static WebElement stockBalanceByWarehouse_Filter_Customize_WarehouseExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_552_0']/li[3]/a")
	private static WebElement osr_Filter_Customize_WarehouseExpandBtn;

	@FindBy(xpath="//ul[@id='FilterFields_557_0']/li[4]/a")
	private static WebElement sStatment_Filter_Customize_WarehouseExpandBtn;

	@FindBy(xpath="//*[@id='FilterFields_551_0']/ul[4]/li[1]/div/label/input")
	private static WebElement reports_Filter_Customize_WarehouseNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_645_0']/ul[4]/li[1]/div/label/input")
	private static WebElement stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_576_0']/ul[3]/li[1]/div/label/input")
	private static WebElement multiLevel_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_584_0']/ul[3]/li[1]/div/label/input")
	private static WebElement fastMovingItems_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_585_0']/ul[3]/li[1]/div/label/input")
	private static WebElement slowMovingItems_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_586_0']/ul[3]/li[1]/div/label/input")
	private static WebElement peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_631_0']/ul[3]/li[1]/div/label/input")
	private static WebElement bestSellingItems_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_649_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockTransferRegister_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_670_0']/ul[3]/li[1]/div/label/input")
	private static WebElement transTypeWiseStock_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_680_0']/ul[3]/li[1]/div/label/input")
	private static WebElement actualConsumptionReport_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_622_0']/ul[3]/li[1]/div/label/input")
	private static WebElement ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_577_0']/ul[3]/li[1]/div/label/input")
	private static WebElement virtualStock_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_578_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockValuation_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_656_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockReportByTag_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_579_0']/ul[3]/li[1]/div/label/input")
	private static WebElement abcAnalysis_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_575_0']/ul[4]/li[1]/div/label/input")
	private static WebElement sMovement_Filter_Customize_WarehouseNameChkBox;

	@FindBy(xpath="//div[@id='fullScreen']//input[@id='5021']")
	private static WebElement stockAnalysisByBatch_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_582_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockAgeingAnalysis_Filter_Customize_ItemNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_552_0']/ul[3]/li[1]/div/label/input")
	private static WebElement osr_Filter_Customize_WarehouseNameChkBox;

	@FindBy(xpath="//*[@id='FilterFields_557_0']/ul[4]/li[1]/div/label/input")
	private static WebElement sStatment_Filter_Customize_WarehouseNameChkBox;

	@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
	private static WebElement  reports_Filter_Customize_OkBtn;

	@FindBy(xpath="//input[@id='FOption_551_0_DefaultFilter_0']")
	private static WebElement  reports_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_575_0_DefaultFilter_0']")
	private static WebElement  sMovement_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_622_0_DefaultFilter_0']")
	private static WebElement  ageingAnalysisByBatch_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_576_0_DefaultFilter_0']")
	private static WebElement  multiLevel_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_577_0_DefaultFilter_0']")
	private static WebElement  virtualStock_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_578_0_DefaultFilter_0']")
	private static WebElement  stockValuation_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_656_0_DefaultFilter_0']")
	private static WebElement  stockReportByTag_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_579_0_DefaultFilter_0']")
	private static WebElement  abcAnalysis_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_580_0_DefaultFilter_0']")
	private static WebElement  stockAnalysisByBatch_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_582_0_DefaultFilter_0']")
	private static WebElement  stockAgeingAnalysis_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_552_0_DefaultFilter_0']")
	private static WebElement  osr_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_557_0_DefaultFilter_0']")
	private static WebElement  sStatment_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_584_0_DefaultFilter_0']")
	private static WebElement fastMovingItems_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_585_0_DefaultFilter_0']")
	private static WebElement slowMovingItems_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_586_0_DefaultFilter_0']")
	private static WebElement peakAndLowBalancesItems_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_631_0_DefaultFilter_0']")
	private static WebElement bestSellingItems_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_649_0_DefaultFilter_0']")
	private static WebElement stockTransferRegister_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_645_0_DefaultFilter_0']")
	private static WebElement  stockBalanceByWarehouse_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_670_0_DefaultFilter_0']")
	private static WebElement  transTypeWiseStock_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='FOption_680_0_DefaultFilter_0']")
	private static WebElement actualConsumptionReport_DefaultFilterTxt;

	@FindBy(xpath="//input[@id='chkSaveFilter']")
	private static WebElement  report_FilterSaveFilterPermanentlyChkBox;

	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;

	@FindBy(xpath="//span[@id='filter_Okbtn_']")
	private static WebElement  report_FilterOkBtn;

	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;

	@FindBy(xpath="//span[@id='a']")
	private static WebElement  report_Filter_FilterBtn;

	@FindBy(xpath="//span[@id='analyzeIcon']")
	private static WebElement report_AnalyzeBtn;

	@FindBy(xpath="//span[@id='CrossrefrenceIcon']")
	private static WebElement report_CrossReferenceBtn;

	@FindBy(xpath="//span[contains(text(),'Options')]")
	private static WebElement report_OptionsBtn;

	@FindBy(xpath="//div[@id='dvoptions']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_OptionsDownBtn;

	@FindBy(xpath="//span[@id='reportClose_']")
	private static WebElement report_CloseBtn;

	@FindBy(xpath="//button[@id='frstPage_']")
	private static WebElement report_FirstBtn;

	@FindBy(xpath="//button[@id='prvPage_']")
	private static WebElement report_PreviousBtn;

	@FindBy(xpath="//button[@id='pgnumber_']")
	private static WebElement report_PageNoBtn;

	@FindBy(xpath="//button[@id='nxtPage_']")
	private static WebElement report_NextBtn;

	@FindBy(xpath="//button[@id='lstPage_']")
	private static WebElement report_LastBtn;

	@FindBy(xpath="//input[@id='txtSearchReport']")
	private static WebElement report_SearchTxt;



	@FindBy(xpath="//*[@id='trRender_1']/td[2]")
	private static WebElement sl_1stRow1stCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[3]")
	private static WebElement sl_1stRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[4]")
	private static WebElement sl_1stRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[5]")
	private static WebElement sl_1stRow4thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[6]")
	private static WebElement sl_1stRow5thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[7]")
	private static WebElement sl_1stRow6thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[8]")
	private static WebElement sl_1stRow7thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[9]")
	private static WebElement sl_1stRow8thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[10]")
	private static WebElement sl_1stRow9thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[11]")
	private static WebElement sl_1stRow10thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[12]")
	private static WebElement sl_1stRow11thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[13]")
	private static WebElement sl_1stRow12thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[14]")
	private static WebElement sl_1stRow13thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[15]")
	private static WebElement sl_1stRow14thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[16]")
	private static WebElement sl_1stRow15thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[17]")
	private static WebElement sl_1stRow16thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[18]")
	private static WebElement sl_1stRow17thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[19]")
	private static WebElement sl_1stRow18thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[20]")
	private static WebElement sl_1stRow19thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[21]")
	private static WebElement sl_1stRow20thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[22]")
	private static WebElement sl_1stRow21thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[23]")
	private static WebElement sl_1stRow22thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[24]")
	private static WebElement sl_1stRow23thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[25]")
	private static WebElement sl_1stRow24thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[26]")
	private static WebElement sl_1stRow25thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[27]")
	private static WebElement sl_1stRow26thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[28]")
	private static WebElement sl_1stRow27thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[29]")
	private static WebElement sl_1stRow28thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[30]")
	private static WebElement sl_1stRow29thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[31]")
	private static WebElement sl_1stRow30thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[32]")
	private static WebElement sl_1stRow31thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[33]")
	private static WebElement sl_1stRow32thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[34]")
	private static WebElement sl_1stRow33thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[35]")
	private static WebElement sl_1stRow34thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[36]")
	private static WebElement sl_1stRow35thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[37]")
	private static WebElement sl_1stRow36thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[38]")
	private static WebElement sl_1stRow37thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[39]")
	private static WebElement sl_1stRow38thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[40]")
	private static WebElement sl_1stRow39thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[41]")
	private static WebElement sl_1stRow40thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[42]")
	private static WebElement sl_1stRow41thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[43]")
	private static WebElement sl_1stRow42thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[44]")
	private static WebElement sl_1stRow43thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[45]")
	private static WebElement sl_1stRow44thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[46]")
	private static WebElement sl_1stRow45thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[47]")
	private static WebElement sl_1stRow46thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[48]")
	private static WebElement sl_1stRow47thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[49]")
	private static WebElement sl_1stRow48thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[50]")
	private static WebElement sl_1stRow49thCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[51]")
	private static WebElement sl_1stRow50thCol;


	@FindBy(xpath="//*[@id='trRender_2']/td[2]")
	private static WebElement sl_2ndRow1stCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[3]")
	private static WebElement sl_2ndRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[4]")
	private static WebElement sl_2ndRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[5]")
	private static WebElement sl_2ndRow4thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[6]")
	private static WebElement sl_2ndRow5thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[7]")
	private static WebElement sl_2ndRow6thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[8]")
	private static WebElement sl_2ndRow7thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[9]")
	private static WebElement sl_2ndRow8thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[10]")
	private static WebElement sl_2ndRow9thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[11]")
	private static WebElement sl_2ndRow10thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[12]")
	private static WebElement sl_2ndRow11thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[13]")
	private static WebElement sl_2ndRow12thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[14]")
	private static WebElement sl_2ndRow13thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[15]")
	private static WebElement sl_2ndRow14thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[16]")
	private static WebElement sl_2ndRow15thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[17]")
	private static WebElement sl_2ndRow16thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[18]")
	private static WebElement sl_2ndRow17thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[19]")
	private static WebElement sl_2ndRow18thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[20]")
	private static WebElement sl_2ndRow19thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[21]")
	private static WebElement sl_2ndRow20thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[22]")
	private static WebElement sl_2ndRow21thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[23]")
	private static WebElement sl_2ndRow22thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[24]")
	private static WebElement sl_2ndRow23thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[25]")
	private static WebElement sl_2ndRow24thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[26]")
	private static WebElement sl_2ndRow25thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[27]")
	private static WebElement sl_2ndRow26thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[28]")
	private static WebElement sl_2ndRow27thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[29]")
	private static WebElement sl_2ndRow28thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[30]")
	private static WebElement sl_2ndRow29thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[31]")
	private static WebElement sl_2ndRow30thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[32]")
	private static WebElement sl_2ndRow31thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[33]")
	private static WebElement sl_2ndRow32thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[34]")
	private static WebElement sl_2ndRow33thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[35]")
	private static WebElement sl_2ndRow34thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[36]")
	private static WebElement sl_2ndRow35thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[37]")
	private static WebElement sl_2ndRow36thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[38]")
	private static WebElement sl_2ndRow37thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[39]")
	private static WebElement sl_2ndRow38thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[40]")
	private static WebElement sl_2ndRow39thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[41]")
	private static WebElement sl_2ndRow40thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[42]")
	private static WebElement sl_2ndRow41thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[43]")
	private static WebElement sl_2ndRow42thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[44]")
	private static WebElement sl_2ndRow43thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[45]")
	private static WebElement sl_2ndRow44thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[46]")
	private static WebElement sl_2ndRow45thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[47]")
	private static WebElement sl_2ndRow46thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[48]")
	private static WebElement sl_2ndRow47thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[49]")
	private static WebElement sl_2ndRow48thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[50]")
	private static WebElement sl_2ndRow49thCol;

	@FindBy(xpath="//*[@id='trRender_2']/td[51]")
	private static WebElement sl_2ndRow50thCol;





	@FindBy(xpath="//*[@id='trRender_3']/td[2]")
	private static WebElement sl_3rdRow1stCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[3]")
	private static WebElement sl_3rdRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[4]")
	private static WebElement sl_3rdRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[5]")
	private static WebElement sl_3rdRow4thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[6]")
	private static WebElement sl_3rdRow5thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[7]")
	private static WebElement sl_3rdRow6thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[8]")
	private static WebElement sl_3rdRow7thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[9]")
	private static WebElement sl_3rdRow8thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[10]")
	private static WebElement sl_3rdRow9thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[11]")
	private static WebElement sl_3rdRow10thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[12]")
	private static WebElement sl_3rdRow11thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[13]")
	private static WebElement sl_3rdRow12thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[14]")
	private static WebElement sl_3rdRow13thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[15]")
	private static WebElement sl_3rdRow14thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[16]")
	private static WebElement sl_3rdRow15thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[17]")
	private static WebElement sl_3rdRow16thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[18]")
	private static WebElement sl_3rdRow17thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[19]")
	private static WebElement sl_3rdRow18thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[20]")
	private static WebElement sl_3rdRow19thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[21]")
	private static WebElement sl_3rdRow20thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[22]")
	private static WebElement sl_3rdRow21thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[23]")
	private static WebElement sl_3rdRow22thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[24]")
	private static WebElement sl_3rdRow23thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[25]")
	private static WebElement sl_3rdRow24thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[26]")
	private static WebElement sl_3rdRow25thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[27]")
	private static WebElement sl_3rdRow26thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[28]")
	private static WebElement sl_3rdRow27thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[29]")
	private static WebElement sl_3rdRow28thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[30]")
	private static WebElement sl_3rdRow29thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[31]")
	private static WebElement sl_3rdRow30thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[32]")
	private static WebElement sl_3rdRow31thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[33]")
	private static WebElement sl_3rdRow32thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[34]")
	private static WebElement sl_3rdRow33thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[35]")
	private static WebElement sl_3rdRow34thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[36]")
	private static WebElement sl_3rdRow35thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[37]")
	private static WebElement sl_3rdRow36thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[38]")
	private static WebElement sl_3rdRow37thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[39]")
	private static WebElement sl_3rdRow38thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[40]")
	private static WebElement sl_3rdRow39thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[41]")
	private static WebElement sl_3rdRow40thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[42]")
	private static WebElement sl_3rdRow41thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[43]")
	private static WebElement sl_3rdRow42thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[44]")
	private static WebElement sl_3rdRow43thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[45]")
	private static WebElement sl_3rdRow44thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[46]")
	private static WebElement sl_3rdRow45thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[47]")
	private static WebElement sl_3rdRow46thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[48]")
	private static WebElement sl_3rdRow47thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[49]")
	private static WebElement sl_3rdRow48thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[50]")
	private static WebElement sl_3rdRow49thCol;

	@FindBy(xpath="//*[@id='trRender_3']/td[51]")
	private static WebElement sl_3rdRow50thCol;





	@FindBy(xpath="//*[@id='trRender_4']/td[2]")
	private static WebElement sl_4thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[3]")
	private static WebElement sl_4thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[4]")
	private static WebElement sl_4thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[5]")
	private static WebElement sl_4thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[6]")
	private static WebElement sl_4thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[7]")
	private static WebElement sl_4thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[8]")
	private static WebElement sl_4thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[9]")
	private static WebElement sl_4thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[10]")
	private static WebElement sl_4thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[11]")
	private static WebElement sl_4thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[12]")
	private static WebElement sl_4thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[13]")
	private static WebElement sl_4thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[14]")
	private static WebElement sl_4thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[15]")
	private static WebElement sl_4thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[16]")
	private static WebElement sl_4thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[17]")
	private static WebElement sl_4thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[18]")
	private static WebElement sl_4thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[19]")
	private static WebElement sl_4thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[20]")
	private static WebElement sl_4thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[21]")
	private static WebElement sl_4thRow20thCol;


	@FindBy(xpath="//*[@id='trRender_4']/td[22]")
	private static WebElement sl_4thRow21thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[23]")
	private static WebElement sl_4thRow22thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[24]")
	private static WebElement sl_4thRow23thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[25]")
	private static WebElement sl_4thRow24thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[26]")
	private static WebElement sl_4thRow25thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[27]")
	private static WebElement sl_4thRow26thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[28]")
	private static WebElement sl_4thRow27thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[29]")
	private static WebElement sl_4thRow28thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[30]")
	private static WebElement sl_4thRow29thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[31]")
	private static WebElement sl_4thRow30thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[32]")
	private static WebElement sl_4thRow31thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[33]")
	private static WebElement sl_4thRow32thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[34]")
	private static WebElement sl_4thRow33thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[35]")
	private static WebElement sl_4thRow34thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[36]")
	private static WebElement sl_4thRow35thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[37]")
	private static WebElement sl_4thRow36thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[38]")
	private static WebElement sl_4thRow37thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[39]")
	private static WebElement sl_4thRow38thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[40]")
	private static WebElement sl_4thRow39thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[41]")
	private static WebElement sl_4thRow40thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[42]")
	private static WebElement sl_4thRow41thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[43]")
	private static WebElement sl_4thRow42thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[44]")
	private static WebElement sl_4thRow43thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[45]")
	private static WebElement sl_4thRow44thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[46]")
	private static WebElement sl_4thRow45thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[47]")
	private static WebElement sl_4thRow46thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[48]")
	private static WebElement sl_4thRow47thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[49]")
	private static WebElement sl_4thRow48thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[50]")
	private static WebElement sl_4thRow49thCol;

	@FindBy(xpath="//*[@id='trRender_4']/td[51]")
	private static WebElement sl_4thRow50thCol;








	@FindBy(xpath="//*[@id='trRender_5']/td[2]")
	private static WebElement sl_5thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[3]")
	private static WebElement sl_5thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[4]")
	private static WebElement sl_5thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[5]")
	private static WebElement sl_5thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[6]")
	private static WebElement sl_5thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[7]")
	private static WebElement sl_5thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[8]")
	private static WebElement sl_5thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[9]")
	private static WebElement sl_5thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[10]")
	private static WebElement sl_5thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[11]")
	private static WebElement sl_5thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[12]")
	private static WebElement sl_5thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[13]")
	private static WebElement sl_5thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[14]")
	private static WebElement sl_5thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[15]")
	private static WebElement sl_5thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[16]")
	private static WebElement sl_5thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[17]")
	private static WebElement sl_5thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[18]")
	private static WebElement sl_5thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[19]")
	private static WebElement sl_5thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[20]")
	private static WebElement sl_5thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[21]")
	private static WebElement sl_5thRow20thCol;


	@FindBy(xpath="//*[@id='trRender_5']/td[22]")
	private static WebElement sl_5thRow21thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[23]")
	private static WebElement sl_5thRow22thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[24]")
	private static WebElement sl_5thRow23thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[25]")
	private static WebElement sl_5thRow24thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[26]")
	private static WebElement sl_5thRow25thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[27]")
	private static WebElement sl_5thRow26thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[28]")
	private static WebElement sl_5thRow27thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[29]")
	private static WebElement sl_5thRow28thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[30]")
	private static WebElement sl_5thRow29thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[31]")
	private static WebElement sl_5thRow30thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[32]")
	private static WebElement sl_5thRow31thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[33]")
	private static WebElement sl_5thRow32thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[34]")
	private static WebElement sl_5thRow33thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[35]")
	private static WebElement sl_5thRow34thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[36]")
	private static WebElement sl_5thRow35thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[37]")
	private static WebElement sl_5thRow36thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[38]")
	private static WebElement sl_5thRow37thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[39]")
	private static WebElement sl_5thRow38thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[40]")
	private static WebElement sl_5thRow39thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[41]")
	private static WebElement sl_5thRow40thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[42]")
	private static WebElement sl_5thRow41thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[43]")
	private static WebElement sl_5thRow42thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[44]")
	private static WebElement sl_5thRow43thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[45]")
	private static WebElement sl_5thRow44thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[46]")
	private static WebElement sl_5thRow45thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[47]")
	private static WebElement sl_5thRow46thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[48]")
	private static WebElement sl_5thRow47thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[49]")
	private static WebElement sl_5thRow48thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[50]")
	private static WebElement sl_5thRow49thCol;

	@FindBy(xpath="//*[@id='trRender_5']/td[51]")
	private static WebElement sl_5thRow50thCol;






	@FindBy(xpath="//*[@id='trRender_6']/td[2]")
	private static WebElement sl_6thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[3]")
	private static WebElement sl_6thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[4]")
	private static WebElement sl_6thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[5]")
	private static WebElement sl_6thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[6]")
	private static WebElement sl_6thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[7]")
	private static WebElement sl_6thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[8]")
	private static WebElement sl_6thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[9]")
	private static WebElement sl_6thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[10]")
	private static WebElement sl_6thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[11]")
	private static WebElement sl_6thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[12]")
	private static WebElement sl_6thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[13]")
	private static WebElement sl_6thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[14]")
	private static WebElement sl_6thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[15]")
	private static WebElement sl_6thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[16]")
	private static WebElement sl_6thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[17]")
	private static WebElement sl_6thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[18]")
	private static WebElement sl_6thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[19]")
	private static WebElement sl_6thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[20]")
	private static WebElement sl_6thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[21]")
	private static WebElement sl_6thRow20thCol;


	@FindBy(xpath="//*[@id='trRender_6']/td[22]")
	private static WebElement sl_6thRow21thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[23]")
	private static WebElement sl_6thRow22thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[24]")
	private static WebElement sl_6thRow23thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[25]")
	private static WebElement sl_6thRow24thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[26]")
	private static WebElement sl_6thRow25thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[27]")
	private static WebElement sl_6thRow26thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[28]")
	private static WebElement sl_6thRow27thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[29]")
	private static WebElement sl_6thRow28thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[30]")
	private static WebElement sl_6thRow29thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[31]")
	private static WebElement sl_6thRow30thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[32]")
	private static WebElement sl_6thRow31thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[33]")
	private static WebElement sl_6thRow32thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[34]")
	private static WebElement sl_6thRow33thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[35]")
	private static WebElement sl_6thRow34thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[36]")
	private static WebElement sl_6thRow35thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[37]")
	private static WebElement sl_6thRow36thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[38]")
	private static WebElement sl_6thRow37thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[39]")
	private static WebElement sl_6thRow38thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[40]")
	private static WebElement sl_6thRow39thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[41]")
	private static WebElement sl_6thRow40thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[42]")
	private static WebElement sl_6thRow41thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[43]")
	private static WebElement sl_6thRow42thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[44]")
	private static WebElement sl_6thRow43thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[45]")
	private static WebElement sl_6thRow44thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[46]")
	private static WebElement sl_6thRow45thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[47]")
	private static WebElement sl_6thRow46thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[48]")
	private static WebElement sl_6thRow47thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[49]")
	private static WebElement sl_6thRow48thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[50]")
	private static WebElement sl_6thRow49thCol;

	@FindBy(xpath="//*[@id='trRender_6']/td[51]")
	private static WebElement sl_6thRow50thCol;








	@FindBy(xpath="//*[@id='trRender_7']/td[2]")
	private static WebElement sl_7thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[3]")
	private static WebElement sl_7thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[4]")
	private static WebElement sl_7thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[5]")
	private static WebElement sl_7thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[6]")
	private static WebElement sl_7thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[7]")
	private static WebElement sl_7thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[8]")
	private static WebElement sl_7thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[9]")
	private static WebElement sl_7thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[10]")
	private static WebElement sl_7thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[11]")
	private static WebElement sl_7thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[12]")
	private static WebElement sl_7thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[13]")
	private static WebElement sl_7thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[14]")
	private static WebElement sl_7thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[15]")
	private static WebElement sl_7thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[16]")
	private static WebElement sl_7thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[17]")
	private static WebElement sl_7thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[18]")
	private static WebElement sl_7thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[19]")
	private static WebElement sl_7thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[20]")
	private static WebElement sl_7thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_7']/td[21]")
	private static WebElement sl_7thRow20thCol;





	@FindBy(xpath="//*[@id='trRender_8']/td[2]")
	private static WebElement sl_8thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[3]")
	private static WebElement sl_8thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[4]")
	private static WebElement sl_8thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[5]")
	private static WebElement sl_8thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[6]")
	private static WebElement sl_8thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[7]")
	private static WebElement sl_8thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[8]")
	private static WebElement sl_8thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[9]")
	private static WebElement sl_8thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[10]")
	private static WebElement sl_8thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[11]")
	private static WebElement sl_8thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[12]")
	private static WebElement sl_8thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[13]")
	private static WebElement sl_8thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[14]")
	private static WebElement sl_8thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[15]")
	private static WebElement sl_8thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[16]")
	private static WebElement sl_8thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[17]")
	private static WebElement sl_8thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[18]")
	private static WebElement sl_8thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[19]")
	private static WebElement sl_8thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[20]")
	private static WebElement sl_8thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_8']/td[21]")
	private static WebElement sl_8thRow20thCol;



	@FindBy(xpath="//*[@id='trRender_9']/td[2]")
	private static WebElement sl_9thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[3]")
	private static WebElement sl_9thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[4]")
	private static WebElement sl_9thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[5]")
	private static WebElement sl_9thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[6]")
	private static WebElement sl_9thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[7]")
	private static WebElement sl_9thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[8]")
	private static WebElement sl_9thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[9]")
	private static WebElement sl_9thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[10]")
	private static WebElement sl_9thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[11]")
	private static WebElement sl_9thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[12]")
	private static WebElement sl_9thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[13]")
	private static WebElement sl_9thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[14]")
	private static WebElement sl_9thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[15]")
	private static WebElement sl_9thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[16]")
	private static WebElement sl_9thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[17]")
	private static WebElement sl_9thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[18]")
	private static WebElement sl_9thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[19]")
	private static WebElement sl_9thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[20]")
	private static WebElement sl_9thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_9']/td[21]")
	private static WebElement sl_9thRow20thCol;



	@FindBy(xpath="//*[@id='trRender_10']/td[2]")
	private static WebElement sl_10thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[3]")
	private static WebElement sl_10thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[4]")
	private static WebElement sl_10thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[5]")
	private static WebElement sl_10thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[6]")
	private static WebElement sl_10thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[7]")
	private static WebElement sl_10thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[8]")
	private static WebElement sl_10thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[9]")
	private static WebElement sl_10thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[10]")
	private static WebElement sl_10thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[11]")
	private static WebElement sl_10thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[12]")
	private static WebElement sl_10thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[13]")
	private static WebElement sl_10thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[14]")
	private static WebElement sl_10thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[15]")
	private static WebElement sl_10thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[16]")
	private static WebElement sl_10thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[17]")
	private static WebElement sl_10thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[18]")
	private static WebElement sl_10thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[19]")
	private static WebElement sl_10thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[20]")
	private static WebElement sl_10thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_10']/td[21]")
	private static WebElement sl_10thRow20thCol;


	@FindBy(xpath="//*[@id='trRender_11']/td[2]")
	private static WebElement sl_11thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[3]")
	private static WebElement sl_11thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[4]")
	private static WebElement sl_11thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[5]")
	private static WebElement sl_11thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[6]")
	private static WebElement sl_11thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[7]")
	private static WebElement sl_11thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[8]")
	private static WebElement sl_11thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[9]")
	private static WebElement sl_11thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[10]")
	private static WebElement sl_11thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[11]")
	private static WebElement sl_11thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[12]")
	private static WebElement sl_11thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[13]")
	private static WebElement sl_11thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[14]")
	private static WebElement sl_11thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[15]")
	private static WebElement sl_11thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[16]")
	private static WebElement sl_11thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[17]")
	private static WebElement sl_11thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[18]")
	private static WebElement sl_11thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[19]")
	private static WebElement sl_11thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[20]")
	private static WebElement sl_11thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_11']/td[21]")
	private static WebElement sl_11thRow20thCol;


	@FindBy(xpath="//*[@id='trRender_12']/td[2]")
	private static WebElement sl_12thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[3]")
	private static WebElement sl_12thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[4]")
	private static WebElement sl_12thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[5]")
	private static WebElement sl_12thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[6]")
	private static WebElement sl_12thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[7]")
	private static WebElement sl_12thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[8]")
	private static WebElement sl_12thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[9]")
	private static WebElement sl_12thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[10]")
	private static WebElement sl_12thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[11]")
	private static WebElement sl_12thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[12]")
	private static WebElement sl_12thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[13]")
	private static WebElement sl_12thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[14]")
	private static WebElement sl_12thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[15]")
	private static WebElement sl_12thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[16]")
	private static WebElement sl_12thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[17]")
	private static WebElement sl_12thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[18]")
	private static WebElement sl_12thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[19]")
	private static WebElement sl_12thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[20]")
	private static WebElement sl_12thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_12']/td[21]")
	private static WebElement sl_12thRow20thCol;



	@FindBy(xpath="//*[@id='trRender_13']/td[2]")
	private static WebElement sl_13thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[3]")
	private static WebElement sl_13thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[4]")
	private static WebElement sl_13thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[5]")
	private static WebElement sl_13thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[6]")
	private static WebElement sl_13thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[7]")
	private static WebElement sl_13thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[8]")
	private static WebElement sl_13thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[9]")
	private static WebElement sl_13thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[10]")
	private static WebElement sl_13thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[11]")
	private static WebElement sl_13thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[12]")
	private static WebElement sl_13thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[13]")
	private static WebElement sl_13thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[14]")
	private static WebElement sl_13thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[15]")
	private static WebElement sl_13thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[16]")
	private static WebElement sl_13thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[17]")
	private static WebElement sl_13thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[18]")
	private static WebElement sl_13thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[19]")
	private static WebElement sl_13thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[20]")
	private static WebElement sl_13thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_13']/td[21]")
	private static WebElement sl_13thRow20thCol;



	@FindBy(xpath="//*[@id='trRender_14']/td[2]")
	private static WebElement sl_14thRow1stCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[3]")
	private static WebElement sl_14thRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[4]")
	private static WebElement sl_14thRow3rdCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[5]")
	private static WebElement sl_14thRow4thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[6]")
	private static WebElement sl_14thRow5thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[7]")
	private static WebElement sl_14thRow6thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[8]")
	private static WebElement sl_14thRow7thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[9]")
	private static WebElement sl_14thRow8thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[10]")
	private static WebElement sl_14thRow9thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[11]")
	private static WebElement sl_14thRow10thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[12]")
	private static WebElement sl_14thRow11thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[13]")
	private static WebElement sl_14thRow12thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[14]")
	private static WebElement sl_14thRow13thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[15]")
	private static WebElement sl_14thRow14thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[16]")
	private static WebElement sl_14thRow15thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[17]")
	private static WebElement sl_14thRow16thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[18]")
	private static WebElement sl_14thRow17thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[19]")
	private static WebElement sl_14thRow18thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[20]")
	private static WebElement sl_14thRow19thCol;

	@FindBy(xpath="//*[@id='trRender_14']/td[21]")
	private static WebElement sl_14thRow20thCol;



	/////////////////////////////////

	// Opening Stock Register Elements

	@FindBy (xpath="//li[@id='154']/a[2]")
	private static WebElement osr_ItemsGroupBtn;

	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement osr_dateOptionDropdown;

	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement osr_StartDateTxt;

	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement osr_startdateCalanderBtn;

	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement osr_EndDateTxt;

	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement osr_EndDateCalanderBtn;

	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement osr_layoutDropdown;

	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement osr_outputDropdown;

	@FindBy(xpath="//i[@class='icon-font6 icon-schedule']")
	private static WebElement osr_ScheduleBtn;

	@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
	private static WebElement osr_CustomizeBtn;

	@FindBy(xpath="//i[@class='icon-font6 icon-filter']")
	private static WebElement osr_FilterBtn;

	@FindBy(xpath="//i[@class='icon-font6 icon-ok']")
	private static WebElement osr_OkBtn;

	@FindBy(xpath="//i[@class='icon-font6 icon-close']")
	private static WebElement osr_CloseBtn;

	///////

	@FindBy(xpath="//input[@id='id_body_37']")
	private static WebElement enter_Expirydate;

	@FindBy(xpath="//input[@id='id_body_36']")
	private static WebElement enter_MfgDate;

	@FindBy(xpath="//input[@id='id_body_108']")
	private static WebElement enter_BatchRate;

	@FindBy(xpath="//input[@id='id_body_109']")
	private static WebElement enter_BatchRateValue1;

	@FindBy(xpath="//input[@id='id_body_110']")
	private static WebElement enter_BatchRateValue2;


	////////////////////////

	// Finance Reports Almost Common Some Fields Are Added Below

	@FindBy (xpath="//li[@id='18']/a[1]")
	private static WebElement assetsExpandOrCollepseBtn;

	@FindBy(xpath="//li[@id='18']/a[2]")
	private static WebElement assets;

	@FindBy(xpath="//li[@id='17']/a[2]")
	private static WebElement fixedAssets;

	@FindBy (xpath="//li[@id='23']/a[1]")
	private static WebElement currentAssetsExpandOrCollepseBtn;	

	@FindBy(xpath="//li[@id='23']/a[2]")
	private static WebElement currentAssets;

	@FindBy(xpath="//li[@id='8']/a[2]")
	private static WebElement cashAndBank;

	@FindBy(xpath="//li[@id='13']/a[2]")
	private static WebElement inventories;

	@FindBy(xpath="//li[@id='22']/a[2]")
	private static WebElement accountsReceivable;

	@FindBy (xpath="//li[@id='83']/a[2]")
	private static WebElement customerUpdateGroup;

	@FindBy(xpath="//li[@id='72']/a[2]")
	private static WebElement investments;

	@FindBy (xpath="//li[@id='25']/a[1]")
	private static WebElement expensesExpensionOrCollepseBtn;

	@FindBy(xpath="//li[@id='25']/a[2]")
	private static WebElement expenses;

	@FindBy(xpath="//li[@id='24']/a[2]")
	private static WebElement directExpenses;

	@FindBy (xpath="//li[@id='73']/a[1]")
	private static WebElement indirectExpensesExpandOrCollepseBtn; 

	@FindBy(xpath="//li[@id='73']/a[2]")
	private static WebElement indirectExpenses;

	@FindBy(xpath="//li[@id='54']/a[2]")
	private static WebElement administrativeExpenses;

	@FindBy(xpath="//li[@id='60']/a[2]")
	private static WebElement employeeBenefits;

	@FindBy(xpath="//li[@id='64']/a[2]")
	private static WebElement financialCharges;

	@FindBy(xpath="//li[@id='69']/a[2]")
	private static WebElement gainAndLoss;

	@FindBy(xpath="//li[@id='26']/a[2]")
	private static WebElement controlAccounts;

	@FindBy (xpath="//li[@id='29']/a[1]")
	private static WebElement revenueExpandOrCollepseBtn;

	@FindBy(xpath="//li[@id='29']/a[2]")
	private static WebElement revenue;

	@FindBy (xpath="//li[@id='28']/a[2]")
	private static WebElement sales;

	@FindBy (xpath="//li[@id='33']/a[1]")
	private static WebElement equitiesExpandOrCollepseBtn;

	@FindBy(xpath="//li[@id='33']/a[2]")
	private static WebElement equities;

	@FindBy (xpath="//li[@id='32']/a[2]")
	private static WebElement capital;

	@FindBy (xpath="//li[@id='39']/a[1]")
	private static WebElement liabilitiesExpandOrCollepseBtn;

	@FindBy (xpath="//li[@id='39']/a[2]")
	private static WebElement liabilities;

	@FindBy (xpath="//li[@id='38']/a[1]")
	private static WebElement loansAndBorrowingsExpandOrCollepseBtn;

	@FindBy (xpath="//li[@id='38']/a[2]")
	private static WebElement loansAndBorrowings;

	@FindBy (xpath="//li[@id='37']/a[2]")
	private static WebElement loans;

	@FindBy (xpath="//li[@id='42']/a[2]")
	private static WebElement accruedLiabilities;

	@FindBy (xpath="//li[@id='45']/a[2]")
	private static WebElement tradePayable;

	@FindBy (xpath="//li[@id='48']/a[2]")
	private static WebElement provisions;

	/////////////////////////////////////////////////////////////////////////


	@FindBy (xpath="//input[@id='txtSerialNo']")
	private static WebElement RMAPopupSerialNumberTxtField;

	@FindBy (xpath="//input[@id='txtQuantity']")
	private static WebElement RMAPopupQuantityTxtField;

	@FindBy (xpath="//div[@id='img_add']/span")
	private static WebElement RMAPopupAddBtn;

	@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
	private static WebElement RMAPopupNumberofItemsLabel;

	@FindBy (xpath="//label[@id='lblItems']")
	private static WebElement RMAPopupNumberOfItems;

	@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
	private static WebElement RMAPopupTableHeadingRMA;

	@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
	private static WebElement RMAPopupTableHeadingDocumentNo;

	@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
	private static WebElement RMAPopupTableHeadingDocumentDate;

	@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
	private static WebElement RMAPopupClearBtn;

	@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
	private static WebElement RMAPopupOkBtn;

	@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
	private static WebElement RMAPopupCancelBtn;

	@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
	private static WebElement RMAPopupCloseBtn;

	@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
	private static WebElement RMAPopupTableRow1Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
	private static WebElement RMAPopupTableRow2Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
	private static WebElement RMAPopupTableRow3Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
	private static WebElement RMAPopupTableRow4Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
	private static WebElement RMAPopupTableRow5Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
	private static WebElement RMAPopupTableRow6Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
	private static WebElement RMAPopupTableRow7Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
	private static WebElement RMAPopupTableRow8Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
	private static WebElement RMAPopupTableRow9Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
	private static WebElement RMAPopupTableRow10Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
	private static WebElement RMAPopupTableRow11Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
	private static WebElement RMAPopupTableRow12Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
	private static WebElement RMAPopupTableRow13Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
	private static WebElement RMAPopupTableRow14Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
	private static WebElement RMAPopupTableRow15Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
	private static WebElement RMAPopupTableRow16Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
	private static WebElement RMAPopupTableRow17Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
	private static WebElement RMAPopupTableRow18Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
	private static WebElement RMAPopupTableRow19Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
	private static WebElement RMAPopupTableRow20Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_21-1']")
	private static WebElement RMAPopupTableRow21Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_22-1']")
	private static WebElement RMAPopupTableRow22Column1;

	@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
	private static WebElement RMAPopupTableRow1Column2;

	@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
	private static WebElement RMAPopupTableRow1Column3;

	@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
	private static WebElement RMAPopupExpansionBtn;

	@FindBy (xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
	private static WebElement infoSideBarBtn;

	@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
	private static WebElement savedVoucher1stRowVoucherNumer;

	@FindBy (xpath="//span[@id='reportClose']")
	private static WebElement sl_ReportsCloseBtn;

	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement stockStatmentReportOpeningBalance;

	@FindBy (xpath="//tr[@id='trRender_3']/td[5]")
	private static WebElement stockStatmentReportBalanceQuantity;

	@FindBy (xpath="//tr[@id='trRender_3']/td[6]")
	private static WebElement stockStatmentReportValue;

	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement stockMovementOpeningBalanceQty;

	@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
	private static WebElement stockMovementOpeningBalanceValue;

	@FindBy (xpath="//tr[@id='trRender_2']/td[8]")
	private static WebElement stockMovementBalanceQuantity;

	@FindBy (xpath="//tr[@id='trRender_2']/td[9]")
	private static WebElement stockMovementBalanceStockValue;

	@FindBy (xpath="//tr[@id='trRender_2']/td[10]")
	private static WebElement stockMovementAverageRate;

	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement multiLevelStockMovementOpeningBalanceQty;

	@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
	private static WebElement multiLevelStockMovementOpeningBalanceValue;

	@FindBy (xpath="//tr[@id='trRender_3']/td[8]")
	private static WebElement multiLevelStockMovementBalanceQuantity;

	@FindBy (xpath="//tr[@id='trRender_3']/td[9]")
	private static WebElement multiLevelStockMovementBalanceStockValue;

	@FindBy (xpath="//tr[@id='trRender_3']/td[10]")
	private static WebElement multiLevelStockMovementAverageRate;

	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement virtualStockAnalysisStockBal;

	@FindBy (xpath="//tr[@id='trRender_2']/td[6]")
	private static WebElement virtualStockAnalysisVirtualStock;

	@FindBy (xpath="//span[contains(text(),'Stock valuation of')]")
	private static WebElement stockValidationReportsLabel;

	@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
	private static WebElement stockValidationQuantity;

	@FindBy (xpath="//tr[@id='trRender_2']/td[5]")
	private static WebElement stockValidationStockValue;

	@FindBy (xpath="//tr[@id='trRender_2']/td[6]")
	private static WebElement stockValidationUnitPrice;


	//Stock Analysis by RMA Reports Table
	//RMA Number
	@FindBy (xpath="//tr[@id='trRender_1']/td[1]")
	private static WebElement rmaNumber1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[1]")
	private static WebElement rmaNumber2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[1]")
	private static WebElement rmaNumber3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[1]")
	private static WebElement rmaNumber4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[1]")
	private static WebElement rmaNumber5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[1]")
	private static WebElement rmaNumber6thRow;

	@FindBy (xpath="//tr[@id='trRender_7']/td[1]")
	private static WebElement rmaNumber7thRow;

	@FindBy (xpath="//tr[@id='trRender_8']/td[1]")
	private static WebElement rmaNumber8thRow;

	@FindBy (xpath="//tr[@id='trRender_9']/td[1]")
	private static WebElement rmaNumber9thRow;

	@FindBy (xpath="//tr[@id='trRender_10']/td[1]")
	private static WebElement rmaNumber10thRow;

	@FindBy (xpath="//tr[@id='trRender_11']/td[1]")
	private static WebElement rmaNumber11thRow;

	@FindBy (xpath="//tr[@id='trRender_12']/td[1]")
	private static WebElement rmaNumber12thRow;

	@FindBy (xpath="//tr[@id='trRender_13']/td[1]")
	private static WebElement rmaNumber13thRow;

	@FindBy (xpath="//tr[@id='trRender_14']/td[1]")
	private static WebElement rmaNumber14thRow;

	@FindBy (xpath="//tr[@id='trRender_1']/td[1]")
	private static WebElement rmaNumberPg2_1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[1]")
	private static WebElement rmaNumberPg2_2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[1]")
	private static WebElement rmaNumberPg2_3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[1]")
	private static WebElement rmaNumberPg2_4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[1]")
	private static WebElement rmaNumberPg2_5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[1]")
	private static WebElement rmaNumberPg2_6thRow;


	//Quantity
	@FindBy (xpath="//tr[@id='trRender_1']/td[2]")
	private static WebElement quantity1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement quantity2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement quantity3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[2]")
	private static WebElement quantity4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[2]")
	private static WebElement quantity5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[2]")
	private static WebElement quantity6thRow;

	@FindBy (xpath="//tr[@id='trRender_7']/td[2]")
	private static WebElement quantity7thRow;

	@FindBy (xpath="//tr[@id='trRender_8']/td[2]")
	private static WebElement quantity8thRow;

	@FindBy (xpath="//tr[@id='trRender_9']/td[2]")
	private static WebElement quantity9thRow;

	@FindBy (xpath="//tr[@id='trRender_10']/td[2]")
	private static WebElement quantity10thRow;

	@FindBy (xpath="//tr[@id='trRender_11']/td[2]")
	private static WebElement quantity11thRow;

	@FindBy (xpath="//tr[@id='trRender_12']/td[2]")
	private static WebElement quantity12thRow;

	@FindBy (xpath="//tr[@id='trRender_13']/td[2]")
	private static WebElement quantity13thRow;

	@FindBy (xpath="//tr[@id='trRender_14']/td[2]")
	private static WebElement quantity14thRow;

	@FindBy (xpath="//tr[@id='trRender_1']/td[2]")
	private static WebElement quantityPg2_1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement quantityPg2_2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement quantityPg2_3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[2]")
	private static WebElement quantityPg2_4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[2]")
	private static WebElement quantityPg2_5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[2]")
	private static WebElement quantityPg2_6thRow;

	//Rate
	@FindBy (xpath="//tr[@id='trRender_1']/td[3]")
	private static WebElement rate1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
	private static WebElement rate2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
	private static WebElement rate3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[3]")
	private static WebElement rate4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[3]")
	private static WebElement rate5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[3]")
	private static WebElement rate6thRow;

	@FindBy (xpath="//tr[@id='trRender_7']/td[3]")
	private static WebElement rate7thRow;

	@FindBy (xpath="//tr[@id='trRender_8']/td[3]")
	private static WebElement rate8thRow;

	@FindBy (xpath="//tr[@id='trRender_9']/td[3]")
	private static WebElement rate9thRow;

	@FindBy (xpath="//tr[@id='trRender_10']/td[3]")
	private static WebElement rate10thRow;

	@FindBy (xpath="//tr[@id='trRender_11']/td[3]")
	private static WebElement rate11thRow;

	@FindBy (xpath="//tr[@id='trRender_12']/td[3]")
	private static WebElement rate12thRow;

	@FindBy (xpath="//tr[@id='trRender_13']/td[3]")
	private static WebElement rate13thRow;

	@FindBy (xpath="//tr[@id='trRender_14']/td[3]")
	private static WebElement rate14thRow;

	@FindBy (xpath="//tr[@id='trRender_1']/td[3]")
	private static WebElement ratePg2_1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
	private static WebElement ratePg2_2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
	private static WebElement ratePg2_3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[3]")
	private static WebElement ratePg2_4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[3]")
	private static WebElement ratePg2_5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[3]")
	private static WebElement ratePg2_6thRow;

	//Stock Value
	@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
	private static WebElement stockValue1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
	private static WebElement stockValue2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[4]")
	private static WebElement stockValue3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[4]")
	private static WebElement stockValue4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[4]")
	private static WebElement stockValue5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[4]")
	private static WebElement stockValue6thRow;

	@FindBy (xpath="//tr[@id='trRender_7']/td[4]")
	private static WebElement stockValue7thRow;

	@FindBy (xpath="//tr[@id='trRender_8']/td[4]")
	private static WebElement stockValue8thRow;

	@FindBy (xpath="//tr[@id='trRender_9']/td[4]")
	private static WebElement stockValue9thRow;

	@FindBy (xpath="//tr[@id='trRender_10']/td[4]")
	private static WebElement stockValue10thRow;

	@FindBy (xpath="//tr[@id='trRender_11']/td[4]")
	private static WebElement stockValue11thRow;

	@FindBy (xpath="//tr[@id='trRender_12']/td[4]")
	private static WebElement stockValue12thRow;

	@FindBy (xpath="//tr[@id='trRender_13']/td[4]")
	private static WebElement stockValue13thRow;

	@FindBy (xpath="//tr[@id='trRender_14']/td[4]")
	private static WebElement stockValue14thRow;

	@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
	private static WebElement stockValuePg2_1stRow;

	@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
	private static WebElement stockValuePg2_2ndRow;

	@FindBy (xpath="//tr[@id='trRender_3']/td[4]")
	private static WebElement stockValuePg2_3rdRow;

	@FindBy (xpath="//tr[@id='trRender_4']/td[4]")
	private static WebElement stockValuePg2_4thRow;

	@FindBy (xpath="//tr[@id='trRender_5']/td[4]")
	private static WebElement stockValuePg2_5thRow;

	@FindBy (xpath="//tr[@id='trRender_6']/td[4]")
	private static WebElement stockValuePg2_6thRow;

	@FindBy (xpath="//button[@id='pgnumber_']")
	private static WebElement rmaReportsCurrentPageBtn;

	@FindBy (xpath="//td[@id='RMA_Table_col_8-4']")
	private static WebElement RMAPopupTable8thRowClrBtn;





	@FindBy (xpath="//input[@id='RITNumber__11']")
	private static WebElement slab1;

	@FindBy (xpath="//input[@id='RITNumber__12']")
	private static WebElement slab2;

	@FindBy (xpath="//input[@id='RITNumber__13']")
	private static WebElement slab3;

	@FindBy (xpath="//input[@id='RITNumber__14']")
	private static WebElement slab4;

	@FindBy (xpath="//input[@id='RITNumber__15']")
	private static WebElement slab5;

	@FindBy (xpath="//input[@id='RITNumber__16']")
	private static WebElement slab6;

	@FindBy (xpath="//input[@id='RITNumber__17']")
	private static WebElement slab7;

	@FindBy (xpath="//select[@id='RITCombobox__8']")
	private static WebElement slabUptoDrpdwn;



	/*@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
			private static WebElement cal;


			@FindBy(xpath="//select[@id='id_header_2_month']")
			private static WebElement month;

			@FindBy(xpath="//select[@id='id_header_2_year']")
			private static WebElement year;
	 */



	@FindBy(xpath="//input[contains(@name,'chkRowCheck')]")
	private static WebElement selectGridFirstRow;


	@FindBy(xpath="//*[@id='lblnchecked']/input")
	private static WebElement selectGridSecondRow;


	@FindBy(xpath="//select[@id='iValuationMethod']")
	private static WebElement validationMethodDropdown;

	@FindBy(xpath="//*[@id='btnMasterEdit']")
	private static WebElement itemEditBtn;

	@FindBy(xpath="//*[@id='btnDelete']")
	private static WebElement itemDeleteBtn;

	@FindBy(xpath="//*[@id='btnClose']")
	private static WebElement itemCloseBtn;

	@FindBy(xpath="//*[@id='toggle_ribbon']")
	private static WebElement itemToggleRibbonBtn;


	@FindBy(xpath="//*[@id='btnMasterSaveClick']")
	private static WebElement itemEditSaveBtn;

	@FindBy(xpath="//*[@id='btnMasterCopy']")
	private static WebElement itemEditCpoyBtn;

	@FindBy(xpath="//*[@id='btnMasterClone']")
	private static WebElement itemEditCloneBtn;

	@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[6]")
	private static WebElement itemEditCloseBtn;

	@FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
	private static WebElement ItemEditGeneralBtn;

	@FindBy(xpath="//*[@id='sName']")
	private static WebElement EditGeneralName;

	@FindBy(xpath="//*[@id='sCode']")
	private static WebElement EditGeneralCode;

	@FindBy(xpath="//*[@id='iProductType']")
	private static WebElement EditGeneralItemTypeDropDown;

	@FindBy(xpath="//*[@id='fReorderLevel']")
	private static WebElement EditGeneralReorderLevel;

	@FindBy(xpath="//*[@id='iBinCapacity']")
	private static WebElement EditGeneralBinCapacity;

	@FindBy(xpath="//*[@id='iValuationMethod']")
	private static WebElement EditGeneralValuationMethodDropDown;

	@FindBy(xpath="//*[@id='iCategory']")
	private static WebElement EditGeneralCategoryDropDown;

	@FindBy(xpath="//*[@id='iCategory_input_settings']/span")
	private static WebElement EditGeneralCategorySettingBtn;

	@FindBy(xpath="//*[@id='iProductMake']")
	private static WebElement EditGeneralItemMakeDropDown;

	@FindBy(xpath="//*[@id='Printer']")
	private static WebElement EditGeneralPrint;

	@FindBy(xpath="//*[@id='iAlternateCategory']")
	private static WebElement EditGeneralAlternativeCategoryDropdown;

	@FindBy(xpath="//*[@id='iAlternateCategory_input_settings']/span")
	private static WebElement EditGeneralAlternativeCategoryDropdownSettingBtn;

	@FindBy(xpath="//*[@id='sDescription']")
	private static WebElement EditGeneralDescription;

	@FindBy(xpath="//*[@id='bPerishableItem']")
	private static WebElement EditGeneralPerishableItemCheckBox;

	@FindBy(xpath="//*[@id='iBin']")
	private static WebElement EditGeneralBinDropdown;

	@FindBy(xpath="//*[@id='iBin_input_settings']/span")
	private static WebElement EditGeneralBinDropdownSettingBtn;

	@FindBy(xpath="//*[@id='BrowsepImage']")
	private static WebElement EditGeneralUploadImageOrFileBtn;

	@FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
	private static WebElement EditGeneralSaveBtn;

	@FindBy(xpath="//*[@id='GenerateEditMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	private static WebElement EditGeneralCLoseBtn;




	@FindBy (xpath="//span[@id='sp_search']")
	private static WebElement RMAPopupSerialNoExpansionBtn;

	@FindBy (xpath="//input[@id='Search_txtSearchBox']")
	private static WebElement searchRMASearchTxtField;

	@FindBy (xpath="//input[@id='Search_txtQuantity']")
	private static WebElement searchRMAQuantityTxtField;

	@FindBy (xpath="//label[@id='Search_lblItems']")
	private static WebElement searchRMANoOfItemsTxt;

	@FindBy (xpath="//input[@id='chkSelectALL']")
	private static WebElement searchRMASelectAllChkBox;

	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[4]/td[1]/input")
	private static WebElement searchRMA4ChkBox;

	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[101]/td[1]/input")
	private static WebElement searchRMA101ChkBox;

	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[102]/td[1]/input")
	private static WebElement searchRMA102ChkBox;

	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[103]/td[1]/input")
	private static WebElement searchRMA103ChkBox;

	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[2]/td[1]/input")
	private static WebElement searchRMA2ndRowChkBox;

	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
	private static WebElement searchRMATableHeadingSerialNo;

	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
	private static WebElement searchRMATableHeadingDocNo;

	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
	private static WebElement searchRMATableHeadingDate;

	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
	private static WebElement searchRMAOkBtn;

	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
	private static WebElement searchRMACancelBtn;

	@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
	private static WebElement searchRMACloseBtn;



	@FindBy(xpath="//a[@id='16']")
	private static WebElement  SettingsmenuBtn;

	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	private static WebElement  ConfigureTransactionBtn;

	@FindBy(xpath="//label[contains(text(),'Preferences')]")
	private static WebElement  PreferencesBtn;

	@FindBy(xpath="//div[@id='docCustomization']")
	private static WebElement  DocumentCustomizationBtn;

	@FindBy(xpath="//a[@id='0']")
	private static WebElement  TagsBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='1']")
	private static WebElement  AccountsBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='2']")
	private static WebElement  BudgetBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='3']")
	private static WebElement  ARAPBtn;

	@FindBy(xpath="//a[@id='4']")
	private static WebElement  MiselleanousBtn;

	@FindBy(xpath="//a[@id='5']")
	private static WebElement  PDCBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='6']")
	private static WebElement  InventoryBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='7']")
	private static WebElement  BatchBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='30']")
	private static WebElement  RMABtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='8']")
	private static WebElement  BinsBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='9']")
	private static WebElement  HirePurchaseBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='10']")
	private static WebElement  QuotationAnalysisBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='34']")
	private static WebElement  RFIDBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='29']")
	private static WebElement  AutoIndentBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='14']")
	private static WebElement  ABCAnalysisBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='11']")
	private static WebElement  ReportBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='12']")
	private static WebElement  InternetBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='13']")
	private static WebElement  MailSettingsBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='16']")
	private static WebElement  MastersBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='17']")
	private static WebElement  ExternalModulesBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='18']")
	private static WebElement  InfoBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='19']")
	private static WebElement  ProductionBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='20']")
	private static WebElement  MrpBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='22']")
	private static WebElement  FixedAssetsBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='25']")
	private static WebElement  VatBtn;

	@FindBy(xpath="//a[@id='28']")
	private static WebElement  PosBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='35']")
	private static WebElement  WareHouseManagementBtn;

	@FindBy(xpath="//a[@id='36']")
	private static WebElement  LetterForCreditBtn;

	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='37']")
	private static WebElement  PronghornBnt;

	@FindBy(xpath="//input[@id='txtVoucherWizard']")
	private static WebElement  SearchTxt;

	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  CloseBtn;



	@FindBy(xpath="//input[@id='chkRMASupport']")
	private static WebElement  RmaSupportChkBox;

	@FindBy(xpath="//input[@id='chkRMAbasedalternateQuantity']")
	private static WebElement  RMAbasedalternateQuantityChkBox;

	@FindBy(xpath="//input[@id='chkRMANumberAlwaysnumeric']")
	private static WebElement  RMANumberAlwaysnumericChkBox;

	@FindBy(xpath="//input[@id='chkRMANumberUniqueAcrossAllItems']")
	private static WebElement  RMANumberUniqueAcrossAllItemsChkBox;

	@FindBy(xpath="//input[@id='chkInputRMANo']")
	private static WebElement  InputRMANoChkBox;

	@FindBy(xpath="//input[@id='chkRMANumberCantBeUsed']")
	private static WebElement  RMANumberCantBeUsedChkBox;

	@FindBy(xpath="//input[@id='PrefixVoucherNo']")
	private static WebElement  PrefixVoucherNoChkBox;




	@FindBy(xpath="//*[@id='txtUsername']")
	private static WebElement username;

	@FindBy(id="txtPassword")
	private static WebElement password;

	@FindBy(id="btnSignin")
	private static WebElement signIn;

	@FindBy(id="ddlCompany")
	private static WebElement companyDropDownList;

	@FindBy(xpath="//span[@class='hidden-xs']")
	private static WebElement userNameDisplay;

	@FindBy(xpath="//*[@id='companyLogo']")
	private static WebElement companyLogo;

	@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
	private static WebElement companyName;

	@FindBy(xpath="//span[contains(text(),'Logout')]")
	private static WebElement logoutOption;
	
	@FindBy(xpath="//*[@id='dashName']")
	private static WebElement dashboard;



	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[2]")
	private static WebElement stockTransferRMA1stRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[2]")
	private static WebElement stockTransferRMA2ndRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[3]/td[2]")
	private static WebElement stockTransferRMA3rdRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[4]/td[2]")
	private static WebElement stockTransferRMA4thRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[5]/td[2]")
	private static WebElement stockTransferRMA5thRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[6]/td[2]")
	private static WebElement stockTransferRMA6thRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[7]/td[2]")
	private static WebElement stockTransferRMA7thRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[8]/td[2]")
	private static WebElement stockTransferRMA8thRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[9]/td[2]")
	private static WebElement stockTransferRMA9thRow1stColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[10]/td[2]")
	private static WebElement stockTransferRMA10thRow1stColumn;


	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[3]")
	private static WebElement stockTransferRMA1stRow2ndColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[3]")
	private static WebElement stockTransferRMA2ndRow2ndColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[4]")
	private static WebElement stockTransferRMA1stRow3rdColumn;

	@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[4]")
	private static WebElement stockTransferRMA2ndRow3rdColumn;




	@FindBy(xpath="//input[@id='donotshow']")
	private static WebElement DontShowChkBox;

	@FindBy(xpath="//*[@id='2053']")
	private static WebElement salesInvoiceNvoucher;

	@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
	private static WebElement  inventoryTransactionsMenu; 

	@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
	private static WebElement  inventoryTransactionsStocksMenu; 



	@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
	private static WebElement calDates;


	@FindBy(xpath="//select[@id='id_header_2_month']")
	private static WebElement monthDropDwn;

	@FindBy(xpath="//select[@id='id_header_2_year']")
	private static WebElement yearDropDwn;


	@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
	private static WebElement salesInvoiceCalenderDates;


	@FindBy(xpath="//select[@id='id_header_2_month']")
	private static WebElement salesInvoiceCalenderMonthDropdwn;

	@FindBy(xpath="//select[@id='id_header_2_year']")
	private static WebElement salesInvoiceCalenderYearDropdwn;


	@FindBy(xpath="//input[@id='id_header_6']")
	private static WebElement  voucherHeaderDueDate;

	@FindBy(xpath="//input[@id='id_header_10']")
	private static WebElement  voucherHeaderCurrency;

	@FindBy(xpath="//input[@id='id_header_11']")
	private static WebElement  voucherHeaderExchangeRate;

	@FindBy(xpath="//input[@id='id_header_145']")
	private static WebElement  voucherHeaderLocalExchangeRate;


	// Batch Popup Elements

	@FindBy(xpath="//label[@id='lblitem']")
	private static WebElement batchItemName;

	@FindBy(xpath="//label[@id='lblTotalQty']")
	private static WebElement batchTotalQtyAmt;

	@FindBy(xpath="//label[@id='lblAdjustQty']")
	private static WebElement batchAdjustQtyAmt;


	@FindBy(xpath="//label[@id='lblBalnceQty']")
	private static WebElement batchBalanceAmt;

	@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
	private static WebElement batchExipiringInRadioBtn;

	@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
	private static WebElement batchExipiringAfetrRadioBtn;

	@FindBy(xpath="//input[@id='txtWithin']")
	private static WebElement batchWithInTxt;

	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_control_heading_6']")
	private static WebElement batchTableHeaderRateColumn;


	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
	private static WebElement batchTable1stRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
	private static WebElement batchTable1stRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
	private static WebElement batchTable1stRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-7']")
	private static WebElement batchTable1stRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
	private static WebElement batchTable1stRow5thCol;

	@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
	private static WebElement enter_BatchTableQtyAdjusted;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-14']")
	private static WebElement batchTable1stRow6thCol;



	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_2-1']")
	private static WebElement batchTable2ndRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
	private static WebElement batchTable2ndRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
	private static WebElement batchTable2ndRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
	private static WebElement batchTable2ndRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-8']")
	private static WebElement batchTable2ndRow5thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-14']")
	private static WebElement batchTable2ndRow6thCol;


	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_3-1']")
	private static WebElement batchTable3rdRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
	private static WebElement batchTable3rdRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
	private static WebElement batchTable3rdRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
	private static WebElement batchTable3rdRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-8']")
	private static WebElement batchTable3rdRow5thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-14']")
	private static WebElement batchTable3rdRow6thCol;



	@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_4-1']")
	private static WebElement batchTable4thRow1stCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
	private static WebElement batchTable4thRow2ndCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
	private static WebElement batchTable4thRow3rdCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
	private static WebElement batchTable4thRow4thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-8']")
	private static WebElement batchTable4thRow5thCol;

	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-14']")
	private static WebElement batchTable4thRow6thCol;

	@FindBy(xpath="//*[@id='MRPBatch_AdjBatchQty']")
	private static WebElement batchTableEnterQtyAdjusted;


	/*@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr")
				private static List<WebElement> batchPopupTable;*/

	@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']")
	private static WebElement batchPopupTable;

	@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
	private static WebElement batchRefreshBtn;

	@FindBy(xpath="//input[@id='Batch_Search']")
	private static WebElement batchSearchTxt;

	@FindBy(xpath="//input[@class='Fcheckbox']")
	private static WebElement batchShowAllAvalibleBatches;

	@FindBy(xpath="//label[contains(text(),'Customization')]")
	private static WebElement batchCustomizationIcon;

	/*@FindBy(xpath="//label[contains(text(),'Pick On FIFO')]")
				private static WebElement batchPickOnFIFOIcon;*/

	@FindBy(xpath="//div[@class='btnhighlight theme_button_color P_LeftRight10'][2]")
	private static WebElement batchPickOnFIFOIcon;

	@FindBy(xpath="//label[@id='div_Ok']")
	private static WebElement batchOkIcon;

	@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
	private static WebElement batchTotalAdjustedQty;

	@FindBy(xpath="//*[@id='MBatch_Content']/div[3]/div/div[3]/div[4]/label/i")
	private static WebElement batchCancelIcon;

	@FindBy(xpath="//*[@id='MBatch_Content']/div[1]/div[2]/span/i")
	private static WebElement batchCloseIcon;

	@FindBy(xpath="//*[@id='MBatch_Content']/div[2]/div/div[5]/div/div[3]")
	private static WebElement batchTotalQuantity;



	@FindBy(xpath="//span[@id='btnPick']")
	private static WebElement pickBtn;

	@FindBy(xpath="//input[@id='txtNewReference']")
	private static WebElement newReferenceTxt;

	@FindBy(xpath="//span[@id='btnOk']")
	private static WebElement Bill_OkBtn;


	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
	private static WebElement iq_stockTransaction1stRow1stColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
	private static WebElement iq_stockTransaction1stRow2ndColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
	private static WebElement iq_stockTransaction1stRow3rdColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
	private static WebElement iq_stockTransaction1stRow4thColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
	private static WebElement iq_stockTransaction1stRow5thColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
	private static WebElement iq_stockTransaction1stRow6thColumn;


	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
	private static WebElement iq_stockTransaction2ndRow1stColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
	private static WebElement iq_stockTransaction2ndRow2ndColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
	private static WebElement iq_stockTransaction2ndRow3rdColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
	private static WebElement iq_stockTransaction2ndRow4thColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
	private static WebElement iq_stockTransaction2ndRow5thColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
	private static WebElement iq_stockTransaction2ndRow6thColumn;


	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
	private static WebElement iq_stockTransaction3rdRow1stColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
	private static WebElement iq_stockTransaction3rdRow2ndColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
	private static WebElement iq_stockTransaction3rdRow3rdColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
	private static WebElement iq_stockTransaction3rdRow4thColumn;

	@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
	private static WebElement iq_stockTransaction3rdRow5thColumn;

	@FindBy (xpath="//tr[@id='id_ending_date__day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement sl_EndDateCalender_TodayBtn;



	@FindBy (xpath="//*[@id='id_ending_date__month']")
	private static WebElement endDateCalMonthDrpdwn;

	@FindBy (xpath="//*[@id='id_ending_date__year']")
	private static WebElement endDateCalYearDrpdwn;

	@FindBy (xpath="//*[@id='id_ending_date__day_grid']/td/table/tbody")
	private static WebElement endDateCalDates;


	@FindBy (xpath="//*[@id='id_starting_date__month']")
	private static WebElement startDateCalMonthDrpdwn;

	@FindBy (xpath="//*[@id='id_starting_date__year']")
	private static WebElement startDateCalYearDrpdwn;

	@FindBy (xpath="//*[@id='id_starting_date__day_grid']/td/table/tbody")
	private static WebElement startDateCalDates;



	/*@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr")
				private static List<WebElement> reportsBodyGridRowsCount;*/


	@FindBy (xpath="//*[@id='tblBodyTransRender']/tr[1]/td[12]")
	private static WebElement grid_1stRowSuspendStatus;

	@FindBy (xpath="//*[@id='tblBodyTransRender']/tr[2]/td[12]")
	private static WebElement grid_2ndRowSuspendStatus;


	@FindBy (xpath="//*[@id='id_transaction_entry_detail_table_control_heading_1']/div[1]")
	private static WebElement stockTransferWarehouse2TableHeader;


	@FindBy (xpath="//input[@id='id_header_86']")
	private static WebElement stockTransferWarehouse1;

	/*@FindBy (xpath="//*[@id='tblBodyReportRender']/tr")
				private static List<WebElement> reports_TableBody;*/



	@FindBy(xpath="//input[@id='chkEnableBatchNumbers']")
	private static WebElement  EnableBatchesNoChkBox;

	@FindBy(xpath="//input[@id='chkAllowNegativeQuantity']")
	private static WebElement  AllowNegativeBatchesQtyChkBox;

	@FindBy(xpath="//input[@id='chkDontAcceptDupDoc']")
	private static WebElement  DontAcceptDuplicateBatchesChkBox;

	@FindBy(xpath="//input[@id='chkExpiryDatesBatches']")
	private static WebElement  ExpiryDatesOfBatchesChkBox;

	@FindBy(xpath="//input[@id='chkExpiryDatesOptional']")
	private static WebElement  ExpiryDateOptionalChkBox;

	@FindBy(xpath="//input[@id='chkIgnoreDayInExpiry']")
	private static WebElement  IgnoringDayInExpiryChkBox;

	@FindBy(xpath="//input[@id='chkCalculateExpiryDateFromItem']")
	private static WebElement  CalculateExpiryDateFromItemChkBox;

	@FindBy(xpath="//input[@id='chkCantSellBatchesNxt']")
	private static WebElement  CantSellBatchesNxtChkBox;

	@FindBy(xpath="//input[@id='chkDontClubBatchesMfDt']")
	private static WebElement  DontClubBatchesMfDtChkBox;

	@FindBy(xpath="//input[@id='chkSortBatchesExpDate']")
	private static WebElement  SortBatchesExpDateChkBox;

	@FindBy(xpath="//input[@id='chkInputBatchMrp']")
	private static WebElement  InputBatchMrpChkBox;

	@FindBy(xpath="//input[@id='chkLoadAllDtlsBatch']")
	private static WebElement  LoadAllDtlsBatchChkBox;

	@FindBy(xpath="//input[@id='chkLoadScrnFldDtlsBatch']")
	private static WebElement  LoadScreenDtlsBatchChkBox;

	@FindBy(xpath="//input[@id='chkLoadLayoutFldDtlsBatch']")
	private static WebElement  LoadLayoutDtlsBatchChkBox;

	@FindBy(xpath="//input[@id='chkManufacturingDateByBaches']")
	private static WebElement  ManufacturingDateByBatchesChkBox;

	@FindBy(xpath="//input[@id='chkSuggestNextBatchNoDoc']")
	private static WebElement  SuggestNextBatchNoDocChkBox;

	@FindBy(xpath="//input[@id='chkConsolidateBatchesByBatchNo']")
	private static WebElement  ConsolidateBatchesByBatchNoChkBox;

	@FindBy(xpath="//input[@id='chkHideRatesOption']")
	private static WebElement  HideRatesOptionChkBox;

	@FindBy(xpath="//input[@id='chkDonotshowbatchesconsumedinsuspendedandpendingdocuments']")
	private static WebElement  donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox;

	@FindBy(xpath="//input[@id='chkDonotconverttouppercase']")
	private static WebElement  doNotConvertToUpperCaseChkBox;



	@FindBy (xpath="//input[@id='idEraseTransaction']")
	private static WebElement eraseTranscationsRadio;

	@FindBy (xpath="//span[contains(text(),'Ok')]")
	private static WebElement eraseAllOkBtn;

	@FindBy (xpath="//ul[@class='nav navbar-nav navbar-right']//i[@class='icon-font6 icon-close']")
	private static WebElement eraseAllCancelBtn;



	@FindBy(xpath="//input[@id='txtValue1']")
	private static WebElement  InputBatch_Value1Txt;

	@FindBy(xpath="//input[@id='txtValue2']")
	private static WebElement  InputBatch_Value2Txt;

	@FindBy(xpath="//input[@id='txtNoofbatch']")
	private static WebElement  CantSellBatches_Txt;

	@FindBy(xpath="//select[@id='cmbBatchExpire']")
	private static WebElement  CantSellBatches_Dropdown;


	@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-4']")
	private static WebElement batchTableManufactureDate;


	@FindBy(xpath="//*[@id='iExpiryDays']")
	private static WebElement itemCreationSettingsTabExpiryDaysTxt;


	@FindBy(xpath="//span[contains(text(),'Edit Screen')]")
	private static WebElement  editScreenTab; 

	@FindBy(xpath="//button[@id='btnEditScreenNext']")
	private static WebElement  editScreenTabNextBtn; 

	@FindBy(xpath="//span[contains(text(),'Edit Layout')]")
	private static WebElement editLayoutTab;

	@FindBy(xpath="//ul[@id='editLayout_tabs']/li[2]/a[contains(text(),'Body')]")
	private static WebElement editLayoutBodyTab;



	@FindBy(xpath="//*[@id='cmbBehaviour']")
	private static WebElement editScreenAddFieldsBehaviourDropdown;

	@FindBy(xpath="//input[@id='id_footer_134217750']")
	private static WebElement pvVoucherFooterDiscountTxt;


	@FindBy(xpath="//div[@id='idGlobalError']")
	private static WebElement  globalError; 



	@FindBy (xpath="//input[@id='id_footer_134217749']")
	private static WebElement pvFooterFD;


	//DataManagement menu
	@FindBy (xpath="//*[@id='25']/span")
	private static WebElement dataMangementMenu;

	@FindBy (xpath="//*[@id='26']/span")
	private static WebElement backup;

	@FindBy (xpath="//*[@id='27']/span")
	private static WebElement restore;

	@FindBy (xpath="//*[@id='111']/span")
	private static WebElement reindex;

	@FindBy (xpath="//*[@id='115']/span")
	private static WebElement eraseAll;

	@FindBy (xpath="//*[@id='216']/span")
	private static WebElement lockAndUnlock;



	@FindBy (xpath="//button[@class='btn Fbutton']")
	private static WebElement folderpathExpandBtn;

	@FindBy (xpath="//div[@id='RestoreControls']//div[1]//div[1]")
	private static WebElement restoreCompanyBtn;

	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Yes')]")
	private static WebElement overRideYesBtn;

	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'No')]")
	private static WebElement overRideNoBtn;

	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
	private static WebElement overRideCancelBtn;



	@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
	private static List<WebElement> warehouseHeaderComboList;

	@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
	private static List<WebElement> itemComboList;



	@FindBy(xpath="//tbody[@id='productQuery_table_body']/tr/td[2]")
	private static List<WebElement> iqItemComboList;



	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	private static List<WebElement> customerAccountComboList;

	@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
	private static List<WebElement> currencyComboList;

	@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
	private static List<WebElement> departmentComboList;

	@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
	private static List<WebElement> warehouseBodyComboList;

	@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
	private static List<WebElement> st_warehouse1HeaderComboList;

	@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
	private static List<WebElement> st_warehouse2BodyComboList;



	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_SalesAccount;

	@FindBy(xpath="//tbody[@id='id_body_12_table_body']/tr/td[2]")
	private static List<WebElement>  salesAccountBodyComboList;



	@FindBy(xpath="//input[@id='id_body_16777328']")
	private static WebElement  enter_TaxCode;



	@FindBy(xpath="//input[@id='id_header_268435470']")
	private static WebElement  salesInvoiceVATPlaceOFSupply;


	@FindBy(xpath="//*[@id='id_body_33554511']")
	private static WebElement enter_AQ;

	@FindBy(xpath="//*[@id='id_body_33554512']")
	private static WebElement enter_FQ;

	@FindBy(xpath="//*[@id='id_body_33554513']")
	private static WebElement enter_RD;



	@FindBy(xpath="//a[@id='2060']/span")
	private static WebElement  salesInvoiceVATVoucher;



	@FindBy(xpath="//input[@id='id_body_33554503']")
	private static WebElement enter_Discount;

	@FindBy(xpath="//input[@id='id_body_33554490']")
	private static WebElement enter_PVDiscount;

	@FindBy(xpath="//input[@id='id_body_33554521']")
	private static WebElement enter_VAT;

	@FindBy(xpath="//input[@id='id_body_33554522']")
	private static WebElement enter_Taxable;

	@FindBy(xpath="//input[@id='id_body_33554540']")
	private static WebElement enter_PVLoadScreenIntoIssue;

	@FindBy(xpath="//input[@id='id_body_33554542']")
	private static WebElement enter_PV1LoadScreenIntoIssue;

	@FindBy(xpath="//input[@id='id_body_16777353']")
	private static WebElement enter_PVLoadLayoutIntoIssue;

	@FindBy(xpath="//input[@id='id_body_16777355']")
	private static WebElement enter_PV1LoadLayoutIntoIssue;

	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement enter_WarehouseTxt;

	@FindBy(xpath="//*[@id='id_body_16777296']")
	private static WebElement enter_RemarksTxt;

	@FindBy(xpath="//input[@id='id_body_16777354']")
	private static WebElement enter_SalesInvoiceLoadLayoutIntoIssue;

	@FindBy(xpath="//input[@id='id_body_16777356']")
	private static WebElement enter_SalesInvoice1LoadLayoutIntoIssue;



	@FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
	private static List<WebElement> pvvGridWarehouseList;

	@FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
	private static List<WebElement> pvvGridItemList;



	@FindBy(xpath="//input[@id='id_body_33554486']")
	private static WebElement enter_PvTaxable;

	@FindBy(xpath="//tbody[@id='id_body_16777307_table_body']/tr/td")
	private static List<WebElement> pvvGridTaxCodeList;

	@FindBy(xpath="//input[@id='id_body_16777323']")
	private static WebElement enter_PvTaxCode;


	@FindBy(xpath="//a[@id='2057']//span[contains(text(),'Purchases Voucher VAT')]")
	private static WebElement  purchaseVouchersVat;


	@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
	private static List<WebElement> purchaseAccountComboList;

	@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
	private static List<WebElement> salesAccountHeaderComboList;


	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	private static List<WebElement> vendorAccountComboList;


	@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[2]")
	private static List<WebElement> batchPopupBatchNoList;

	@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[1]")
	private static List<WebElement> batchPopupRowNosList;


	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']/input")
	private static WebElement workFlowChkBox1;

	@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']/input")
	private static WebElement workFlowChkBox2;

	@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
	private static WebElement workFlowExpandBtn;

	@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_control_heading_ctrl_1']")
	private static WebElement  workFlowHeaderChkBoxCL;

	@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td[2]/input")
	private static List<WebElement> workFlowChkBoxList;

	@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td[7]")
	private static List<WebElement> workFlowVoucherNosList;

	@FindBy(xpath="//span[@class='icon-ok icon-font7']")
	private static WebElement  workFlowOkBtnCL;



	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
	private static List<WebElement> grid_CheckBoxList;

	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
	private static List<WebElement> grid_VoucherNoList;

	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
	private static List<WebElement> grid_SuspendStatusList;



	@FindBy(xpath="//div[@id='ShowLoginErrId']/div/div/div[2]")
	private static WebElement loginWarningPopup;

	@FindBy(xpath="//div[@id='ShowLoginErrId']/div/div/div[3]/button")
	private static WebElement loginWarningPopupOkBtn;



	@FindBy (xpath="//table[@id='IPtable']/tbody/tr")
	private static WebElement endIpValueR2C2;


	/*@FindBy (xpath="//table[@id='tagWiseData']/tbody/tr")
				private static List<WebElement> IQ_WHTableRowsCount;*/

	@FindBy (xpath="//*[@id='tagWiseData']/tbody")
	private static WebElement IQ_WHTable;



	@FindBy (xpath="//tr[@id='Id_MRPBatch_Grid_row_heading']/th/div[1]")
	private static List<WebElement> batchPopupHeaderList;

	@FindBy (xpath="//tr[@id='id_transaction_entry_detail_table_row_heading']/th/div[1]")
	private static List<WebElement> voucherEntryHeaderList;




	// Sales Table

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
	private static WebElement sal1strow_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
	private static WebElement sal1strow_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
	private static WebElement sal1strow_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
	private static WebElement sal1strow_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
	private static WebElement sal1strow_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
	private static WebElement sal1strow_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[7]")
	private static WebElement sal1strow_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[8]")
	private static WebElement sal1strow_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[9]")
	private static WebElement sal1strow_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[10]")
	private static WebElement sal1strow_10thColumn;

	// 2nd

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
	private static WebElement sal2ndrow_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
	private static WebElement sal2ndrow_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
	private static WebElement sal2ndrow_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
	private static WebElement sal2ndrow_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
	private static WebElement sal2ndrow_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
	private static WebElement sal2ndrow_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[7]")
	private static WebElement sal2ndrow_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[8]")
	private static WebElement sal2ndrow_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[9]")
	private static WebElement sal2ndrow_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[10]")
	private static WebElement sal2ndrow_10thColumn;

	// 3rd

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
	private static WebElement sal3rdrow_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
	private static WebElement sal3rdrow_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
	private static WebElement sal3rdrow_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
	private static WebElement sal3rdrow_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
	private static WebElement sal3rdrow_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[6]")
	private static WebElement sal3rdrow_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[7]")
	private static WebElement sal3rdrow_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[8]")
	private static WebElement sal3rdrow_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[9]")
	private static WebElement sal3rdrow_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[10]")
	private static WebElement sal3rdrow_10thColumn;

	// 4th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[1]")
	private static WebElement sal4throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[2]")
	private static WebElement sal4throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[3]")
	private static WebElement sal4throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[4]")
	private static WebElement sal4throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[5]")
	private static WebElement sal4throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[6]")
	private static WebElement sal4throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[7]")
	private static WebElement sal4throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[8]")
	private static WebElement sal4throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[9]")
	private static WebElement sal4throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[10]")
	private static WebElement sal4throw_10thColumn;

	//5th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[1]")
	private static WebElement sal5throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[2]")
	private static WebElement sal5throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[3]")
	private static WebElement sal5throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[4]")
	private static WebElement sal5throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[5]")
	private static WebElement sal5throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[6]")
	private static WebElement sal5throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[7]")
	private static WebElement sal5throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[8]")
	private static WebElement sal5throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[9]")
	private static WebElement sal5throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[10]")
	private static WebElement sal5throw_10thColumn;

	//6th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[1]")
	private static WebElement sal6throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[2]")
	private static WebElement sal6throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[3]")
	private static WebElement sal6throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[4]")
	private static WebElement sal6throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[5]")
	private static WebElement sal6throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[6]")
	private static WebElement sal6throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[7]")
	private static WebElement sal6throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[8]")
	private static WebElement sal6throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[9]")
	private static WebElement sal6throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[10]")
	private static WebElement sal6throw_10thColumn;

	// 7th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[1]")
	private static WebElement sal7throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[2]")
	private static WebElement sal7throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[3]")
	private static WebElement sal7throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[4]")
	private static WebElement sal7throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[5]")
	private static WebElement sal7throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[6]")
	private static WebElement sal7throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[7]")
	private static WebElement sal7throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[8]")
	private static WebElement sal7throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[9]")
	private static WebElement sal7throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[10]")
	private static WebElement sal7throw_10thColumn;



	// 8th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[1]")
	private static WebElement sal8throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[2]")
	private static WebElement sal8throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[3]")
	private static WebElement sal8throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[4]")
	private static WebElement sal8throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[5]")
	private static WebElement sal8throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[6]")
	private static WebElement sal8throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[7]")
	private static WebElement sal8throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[8]")
	private static WebElement sal8throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[9]")
	private static WebElement sal8throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[10]")
	private static WebElement sal8throw_10thColumn;



	// 9th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[1]")
	private static WebElement sal9throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[2]")
	private static WebElement sal9throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[3]")
	private static WebElement sal9throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[4]")
	private static WebElement sal9throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[5]")
	private static WebElement sal9throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[6]")
	private static WebElement sal9throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[7]")
	private static WebElement sal9throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[8]")
	private static WebElement sal9throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[9]")
	private static WebElement sal9throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[10]")
	private static WebElement sal9throw_10thColumn;



	// 10th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[1]")
	private static WebElement sal10throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[2]")
	private static WebElement sal10throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[3]")
	private static WebElement sal10throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[4]")
	private static WebElement sal10throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[5]")
	private static WebElement sal10throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[6]")
	private static WebElement sal10throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[7]")
	private static WebElement sal10throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[8]")
	private static WebElement sal10throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[9]")
	private static WebElement sal10throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[10]")
	private static WebElement sal10throw_10thColumn;



	// 11th

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[1]")
	private static WebElement sal11throw_1stColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[2]")
	private static WebElement sal11throw_2ndColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[3]")
	private static WebElement sal11throw_3rdColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[4]")
	private static WebElement sal11throw_4thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[5]")
	private static WebElement sal11throw_5thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[6]")
	private static WebElement sal11throw_6thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[7]")
	private static WebElement sal11throw_7thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[8]")
	private static WebElement sal11throw_8thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[9]")
	private static WebElement sal11throw_9thColumn;

	@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[10]")
	private static WebElement sal11throw_10thColumn;





	// 1st 

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
	private static WebElement sbr1strow_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
	private static WebElement sbr1strow_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
	private static WebElement sbr1strow_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
	private static WebElement sbr1strow_5thColumn;

	// 2nd 

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
	private static WebElement sbr2ndrow_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
	private static WebElement sbr2ndrow_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
	private static WebElement sbr2ndrow_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
	private static WebElement sbr2ndrow_5thColumn;

	//3rd
	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
	private static WebElement sbr3rdrow_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
	private static WebElement sbr3rdrow_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
	private static WebElement sbr3rdrow_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
	private static WebElement sbr3rdrow_5thColumn;

	// 4th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
	private static WebElement sbr4throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
	private static WebElement sbr4throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
	private static WebElement sbr4throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
	private static WebElement sbr4throw_5thColumn;



	// 5th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[2]")
	private static WebElement sbr5throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[3]")
	private static WebElement sbr5throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[4]")
	private static WebElement sbr5throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[5]")
	private static WebElement sbr5throw_5thColumn;


	// 6th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[2]")
	private static WebElement sbr6throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[3]")
	private static WebElement sbr6throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[4]")
	private static WebElement sbr6throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[5]")				
	private static WebElement sbr6throw_5thColumn;



	// 7th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[2]")
	private static WebElement sbr7throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[3]")
	private static WebElement sbr7throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[4]")
	private static WebElement sbr7throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[5]")
	private static WebElement sbr7throw_5thColumn;


	// 8th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[2]")
	private static WebElement sbr8throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[3]")
	private static WebElement sbr8throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[4]")
	private static WebElement sbr8throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[5]")
	private static WebElement sbr8throw_5thColumn;



	// 9th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[2]")
	private static WebElement sbr9throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[3]")
	private static WebElement sbr9throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[4]")
	private static WebElement sbr9throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[5]")
	private static WebElement sbr9throw_5thColumn;


	// 10th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[2]")
	private static WebElement sbr10throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[3]")
	private static WebElement sbr10throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[4]")
	private static WebElement sbr10throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[5]")
	private static WebElement sbr10throw_5thColumn;


	// 11th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[2]")
	private static WebElement sbr11throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[3]")
	private static WebElement sbr11throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[4]")
	private static WebElement sbr11throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[5]")
	private static WebElement sbr11throw_5thColumn;



	// 12th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[2]")
	private static WebElement sbr12throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[3]")
	private static WebElement sbr12throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[4]")
	private static WebElement sbr12throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[5]")
	private static WebElement sbr12throw_5thColumn;



	// 13th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[2]")
	private static WebElement sbr13throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[3]")
	private static WebElement sbr13throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[4]")
	private static WebElement sbr13throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[5]")
	private static WebElement sbr13throw_5thColumn;


	// 14th

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[2]")
	private static WebElement sbr14throw_2ndColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[3]")
	private static WebElement sbr14throw_3rdColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[4]")
	private static WebElement sbr14throw_4thColumn;

	@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[5]")
	private static WebElement sbr14throw_5thColumn;


	// Item Query Elements

	@FindBy(xpath="//input[@id='productQuery']")
	private static WebElement iq_ItemTxt;

	@FindBy(xpath="//button[contains(text(),'GetStock')]")
	private static WebElement iq_getStockBtn;

	@FindBy(xpath="//button[contains(text(),'Customize')]")
	private static WebElement iq_customizeBtn;

	@FindBy(xpath="//span[@id='id_productquery_button_clear']")
	private static WebElement iq_clearBtn;

	@FindBy(xpath="//span[@id='id_productquery_button_close']")
	private static WebElement iq_closeBtn;

	@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
	private static WebElement iq_OpeningStockQtyLable;

	@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
	private static WebElement iq_PendingPurchaseOrdersLable;

	@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
	private static WebElement iq_CurrentStockLable;

	@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
	private static WebElement iq_PendingSalesOrdersLable;

	@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
	private static WebElement iq_AvgStockRateLable;

	@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
	private static WebElement iq_QtytobeOrderedLable;

	@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
	private static WebElement iq_BaseUnitLable;

	@FindBy(xpath="//label[contains(text(),'Value :')]")
	private static WebElement iq_ValueLable;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
	private static WebElement iq_PurDate;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
	private static WebElement iq_PurVoucherNo;

	@FindBy(xpath="//th[contains(text(),'Vendor')]")
	private static WebElement iq_PurVendor;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
	private static WebElement iq_PurQty;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Unit')]")
	private static WebElement iq_PurUnit;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
	private static WebElement iq_PurRate;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
	private static WebElement iq_PurCurrency;

	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity In Base')]")
	private static WebElement iq_PurQtyInBase;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
	private static WebElement iq_SaleDate;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
	private static WebElement iq_SaleVoucherNo;

	@FindBy(xpath="//th[contains(text(),'Customer')]")
	private static WebElement iq_SaleCustomer;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
	private static WebElement iq_SaleQty;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Unit')]")
	private static WebElement iq_SaleUnit;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
	private static WebElement iq_SaleRate;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
	private static WebElement iq_SaleCurrency;

	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity In Base')]")
	private static WebElement iq_SaleQtyInBase;


	@FindBy(xpath="//span[@id='openingStock']")
	private static WebElement iq_OpeningStocks;

	@FindBy(xpath="//span[@id='currentStock']")
	private static WebElement iq_CurrentStock;

	@FindBy(xpath="//span[@id='avgStockRate']")
	private static WebElement iq_AvgStockRate;

	@FindBy(xpath="//span[@id='value']")
	private static WebElement iq_Value;

	@FindBy(xpath="//span[@id='iBaseUnit']")
	private static WebElement iq_BaseUnit;

	@FindBy(xpath="//span[@id='purchaseOrdered']")
	private static WebElement iq_PendingPurchaseOrders;

	@FindBy(xpath="//span[@id='salesOrdered']")
	private static WebElement iq_PendingSalesOrders;

	@FindBy(xpath="//span[@id='quantityToBeOrdered']")
	private static WebElement iq_QtyToBeOrdered;


	// Purchase Table

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
	private static WebElement pur1strow_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
	private static WebElement pur1strow_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
	private static WebElement pur1strow_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
	private static WebElement pur1strow_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
	private static WebElement pur1strow_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
	private static WebElement pur1strow_6thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[7]")
	private static WebElement pur1strow_7thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[8]")
	private static WebElement pur1strow_8thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[9]")
	private static WebElement pur1strow_9thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[10]")
	private static WebElement pur1strow_10thColumn;



	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
	private static WebElement pur2ndrow_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
	private static WebElement pur2ndrow_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
	private static WebElement pur2ndrow_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
	private static WebElement pur2ndrow_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
	private static WebElement pur2ndrow_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
	private static WebElement pur2ndrow_6thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[7]")
	private static WebElement pur2ndrow_7thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[8]")
	private static WebElement pur2ndrow_8thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[9]")
	private static WebElement pur2ndrow_9thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[10]")
	private static WebElement pur2ndrow_10thColumn;



	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
	private static WebElement pur7thRow_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
	private static WebElement pur3rdrow_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
	private static WebElement pur3rdrow_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
	private static WebElement pur3rdrow_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
	private static WebElement pur3rdrow_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
	private static WebElement pur3rdrow_6thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[7]")
	private static WebElement pur3rdrow_7thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[8]")
	private static WebElement pur3rdrow_8thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[9]")
	private static WebElement pur3rdrow_9thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[10]")
	private static WebElement pur3rdrow_10thColumn;


	// 4TH

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[1]")
	private static WebElement pur4throw_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[2]")
	private static WebElement pur4throw_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[3]")
	private static WebElement pur4throw_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[4]")
	private static WebElement pur4throw_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[5]")
	private static WebElement pur4throw_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[6]")
	private static WebElement pur4throw_6thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[7]")
	private static WebElement pur4throw_7thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[8]")
	private static WebElement pur4throw_8thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[9]")
	private static WebElement pur4throw_9thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[10]")
	private static WebElement pur4throw_10thColumn;

	// 5TH

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[1]")
	private static WebElement pur5throw_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[2]")
	private static WebElement pur5throw_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[3]")
	private static WebElement pur5throw_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[4]")
	private static WebElement pur5throw_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[5]")
	private static WebElement pur5throw_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[6]")
	private static WebElement pur5throw_6thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[7]")
	private static WebElement pur5throw_7thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[8]")
	private static WebElement pur5throw_8thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[9]")
	private static WebElement pur5throw_9thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[10]")
	private static WebElement pur5throw_10thColumn;

	// 6TH

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[1]")
	private static WebElement pur6throw_1stColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[2]")
	private static WebElement pur6throw_2ndColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[3]")
	private static WebElement pur6throw_3rdColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[4]")
	private static WebElement pur6throw_4thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[5]")
	private static WebElement pur6throw_5thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[6]")
	private static WebElement pur6throw_6thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[7]")
	private static WebElement pur6throw_7thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[8]")
	private static WebElement pur6throw_8thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[9]")
	private static WebElement pur6throw_9thColumn;

	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[10]")
	private static WebElement pur6throw_10thColumn;



	// Warehouse Table

	@FindBy(xpath="//div[contains(text(),'Warehouse')]")
	private static WebElement BalancebyWareHouselable;

	@FindBy(xpath="//tr[@id='1']/td[2]")
	private static WebElement wh1strow_2ndColumn;

	@FindBy(xpath="//tr[@id='1']/td[3]")
	private static WebElement wh1strow_3rdColumn;

	@FindBy(xpath="//tr[@id='1']/td[4]")
	private static WebElement wh1strow_4thColumn;

	@FindBy(xpath="//tr[@id='1']/td[5]")
	private static WebElement wh1strow_5thColumn;

	@FindBy(xpath="//tr[@id='1']/td[6]")
	private static WebElement wh1strow_6thColumn;



	@FindBy(xpath="//*[@id='3']/td[2]")
	private static WebElement wh2ndrow_2ndColumn;

	@FindBy(xpath="//*[@id='3']/td[3]")
	private static WebElement wh2ndrow_3rdColumn;

	@FindBy(xpath="//*[@id='3']/td[4]")
	private static WebElement wh2ndrow_4thColumn;

	@FindBy(xpath="//*[@id='3']/td[5]")
	private static WebElement wh2ndrow_5thColumn;

	@FindBy(xpath="//*[@id='3']/td[6]")
	private static WebElement wh2ndrow_6thColumn;



	@FindBy(xpath="//*[@id='4']/td[2]")
	private static WebElement wh3rdrow_2ndColumn;

	@FindBy(xpath="//*[@id='4']/td[3]")
	private static WebElement wh3rdrow_3rdColumn;

	@FindBy(xpath="//*[@id='4']/td[4]")
	private static WebElement wh3rdrow_4thColumn;

	@FindBy(xpath="//*[@id='4']/td[5]")
	private static WebElement wh3rdrow_5thColumn;

	@FindBy(xpath="//*[@id='4']/td[6]")
	private static WebElement wh3rdrow_6thColumn;


	@FindBy(xpath="//*[@id='8']/td[2]")
	private static WebElement wh4throw_2ndColumn;

	@FindBy(xpath="//*[@id='8']/td[3]")
	private static WebElement wh4throw_3rdColumn;

	@FindBy(xpath="//*[@id='8']/td[4]")
	private static WebElement wh4throw_4thColumn;

	@FindBy(xpath="//*[@id='8']/td[5]")
	private static WebElement wh4throw_5thColumn;

	@FindBy(xpath="//*[@id='8']/td[6]")
	private static WebElement wh4throw_6thColumn;


	@FindBy(xpath="//*[@id='9']/td[2]")
	private static WebElement wh5throw_2ndColumn;

	@FindBy(xpath="//*[@id='9']/td[3]")
	private static WebElement wh5throw_3rdColumn;

	@FindBy(xpath="//*[@id='9']/td[4]")
	private static WebElement wh5throw_4thColumn;

	@FindBy(xpath="//*[@id='9']/td[5]")
	private static WebElement wh5throw_5thColumn;

	@FindBy(xpath="//*[@id='9']/td[6]")
	private static WebElement wh5throw_6thColumn;


	@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[2]")
	private static WebElement whStockTotal;

	@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[4]")
	private static WebElement whValueTotal;

	@FindBy(xpath="//table[@id='tagWiseData']/tbody")
	private static WebElement itemQueryWHTable;


	@FindBy(xpath="//div[contains(text(),'Selling rates and Buying rates')]")
	private static WebElement sellingAndBuyingRateslable;

	@FindBy(xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
	private static WebElement sellingAndBuyingRatesExpandBtn;





	@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
	private static List<WebElement> stockLedgerHometableRowCount;


	// Reports Table Row List  
	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[1]/td")
	private static List<WebElement> reportsRow1List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[2]/td")
	private static List<WebElement> reportsRow2List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[3]/td")
	private static List<WebElement> reportsRow3List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[4]/td")
	private static List<WebElement> reportsRow4List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[5]/td")
	private static List<WebElement> reportsRow5List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[6]/td")
	private static List<WebElement> reportsRow6List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[7]/td")
	private static List<WebElement> reportsRow7List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[8]/td")
	private static List<WebElement> reportsRow8List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[9]/td")
	private static List<WebElement> reportsRow9List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[10]/td")
	private static List<WebElement> reportsRow10List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[11]/td")
	private static List<WebElement> reportsRow11List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[12]/td")
	private static List<WebElement> reportsRow12List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[13]/td")
	private static List<WebElement> reportsRow13List;

	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[14]/td")
	private static List<WebElement> reportsRow14List;



	@FindBy(xpath="//tbody[@id='tblBodyReportRender']")
	private static WebElement reportsTable;


	@FindBy(xpath="//select[@id='RITCombobox__1']")
	private static WebElement stockMovementDropdown;

	@FindBy(xpath="//input[@id='RITCheckbox__3']")
	private static WebElement includeAllVoucherChkBox;


	@FindBy(xpath="//span[contains(text(),'Actual consumption report')]")
	private static WebElement  actualConsumptionReport;


	// With Customizing Warehouse

	@FindBy(xpath="//*[@id='CustomizeTransTree']/ul/li/span")
	private static WebElement  osr_customizeFieldsTransactionExpansion; 

	@FindBy(xpath="//*[@id='rd_customization_tree2']/span")
	private static WebElement  osr_customizeFieldsTransExtraFieldsExpansion; 

	@FindBy(xpath="//*[@id='rd_customization_tree2_30']/span/span")
	private static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseExpansion; 

	@FindBy(xpath="//*[@id='rd_customization_tree2_30_0']")
	private static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseName; 

	@FindBy(xpath="//li[@id='rd_customization_tree2_15']")
	private static WebElement  osr_customizeFieldsTransExtraFieldsNarration;

	@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
	private static List<WebElement> osr_customizeHeaderList;

	@FindBy(xpath="//table[@id='tblRDRender']/thead/tr/th")
	private static List<WebElement> osr_reportHeaderList;


	@FindBy(xpath="//ul[@id='id_Item_main']/li/span")
	private static WebElement  osr_customizeFieldsItemExpansion; 

	@FindBy(xpath="//li[@id='id_Item_main_0']")
	private static WebElement  osr_customizeFieldsItemName; 


	@FindBy(xpath="//input[@id='HidethisColumn']")
	private static WebElement osr_customizeTabHideThisColumnChkBox;

	@FindBy(xpath="//input[@id='ScrollTexttonextLine']")
	private static WebElement osr_customizeTabScrollTextToNextLineChkBox;

	@FindBy(xpath="//input[@id='Printunderpreviouscolumn']")
	private static WebElement osr_customizeTabPrintUnderPreviousColumnChkBox;

	@FindBy(xpath="//input[@id='Mandatorycolumn']")
	private static WebElement osr_customizeTabMandatoryColumnChkBox;

	@FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
	private static WebElement osr_customizeTabRemoveColumnBtn;

	@FindBy(xpath="//*[@id='Save']/div[1]/span")
	private static WebElement  osr_customizeSaveBtn;

	@FindBy(xpath="//*[@id='Deleteayout']/div[2]")
	private static WebElement  osr_customizeDeleteLayoutBtn;

	@FindBy(xpath="//div[@id='btnCustomizeClose']")
	private static WebElement  osr_customizeCloseBtn;


	@FindBy(xpath="//div[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[2]")
	public static WebElement errorMessage;

	@FindBy(xpath="//div[@id='idGlobalError']/div/table/tbody/tr/td[3]/span")
	public static WebElement errorMessageCloseBtn;

	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement  newBtn;

	@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	private static WebElement  editBtn;


	@FindBy(xpath="//span[@class='icon-print icon-font6']")
	private static WebElement  printBtn;


	@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
	private static WebElement  deleteBtn;


	@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
	private static WebElement  authorizeBtn;


	@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
	private static WebElement  suspendBtn;
	
	@FindBy(xpath="//*[@id='tblBodyTransRender']/tr[1]/td[2]/input")
	private static WebElement  voucherHomepage;


	@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
	private static WebElement  rejectBtn;


	@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
	private static WebElement  chequeReturnBtn;

	@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
	private static WebElement  printBarcodeBtn;

	@FindBy(xpath="//span[@class='icon-convert icon-font6']")
	private static WebElement  convertBtn;

	@FindBy(xpath="//span[@class='icon-export icon-font6']")
	private static WebElement  exportToXMLBtn;  


	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	private static WebElement  settingsBtn;

	@FindBy(xpath="//div[@id='dvHomeTransClose']")  
	private static WebElement  voucherhomeCloseBtn;

	// Header Section Completed


	//Main Section

	@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
	private static WebElement  allVouchersOption;

	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  pendingBillsOption;

	@FindBy(xpath="//input[@id='SelectDefaultView']")
	private static WebElement  selectDefaultViewChkBox;


	@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement  sortingBtn;


	@FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
	private static WebElement  createViewBtn;

	@FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
	private static WebElement  customizeBtn;

	@FindBy(xpath="//span[@class='icon-filter icon-font6']")
	private static WebElement  filterBtn;

	

	@FindBy(xpath="//i[@class='icon-font6 icon-export']")
	private static WebElement  exportBtn;


	///// Options Btn  (Display Option)	
	@FindBy(xpath="//span[@id='transOptions']")
	private static WebElement  optionsBtn;

	@FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
	private static WebElement  autoAdjustWidthBtn;

	@FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
	private static WebElement  fitToScreenBtn;

	@FindBy(xpath="//a[contains(text(),'Normal')]")
	private static WebElement  normalBtn;



	// Grid Elements



	//Grid Header CheckBox
	@FindBy(xpath="//input[@id='HeaderChkBox']")
	private static WebElement  grid_HeaderChkBox;	


	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
	private static WebElement  grid_Header_Date;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
	private static WebElement  grid_Header_VoucherNumber;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
	private static WebElement  grid_Header_CreatedBy;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
	private static WebElement  grid_Header_ModifiedBy;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
	private static WebElement  grid_Header_CreatedDate;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
	private static WebElement  grid_Header_ModifiedDate;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
	private static WebElement  grid_Header_CreatedTime;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
	private static WebElement  grid_Header_ModifiedTime;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
	private static WebElement  grid_Header_Suspended;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
	private static WebElement  grid_Header_Cancelled;

	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
	private static WebElement  grid_Header_AuthorizationStatus;




	//Grid Voucher DetailsBtn
	@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn1;

	@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn2;



	//Grid CheckBox 1 And 2
	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  grid_ChkBox1;

	@FindBy(xpath="//tr[@id='trRender_2']//td//input")
	private static WebElement  grid_ChkBox2;

	////////////////

	// Footer Section

	@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
	private static WebElement  searchField;

	@FindBy(xpath="//button[@id='frstPage']")
	private static WebElement  firstPageBtn;

	@FindBy(xpath="//button[@id='id_previousPage']")
	private static WebElement  previousPageBtn;

	@FindBy(xpath="//button[@id='id_pagenumber']")
	private static WebElement  currentPageNo;

	@FindBy(xpath="//button[@id='id_nextPage']")
	private static WebElement  nextPageBtn;

	@FindBy(xpath="//button[@id='lstPage']")
	private static WebElement  lastPageBtn;


	////////////////

	//New Screen Elements



	// Vouchers_New Header Section

	@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
	private static WebElement  freeFlowBtn;

	@FindBy(xpath="//span[@class='icon-header icon-font6']")
	private static WebElement  jumpToHeaderSectionBtn;

	@FindBy(xpath="//span[@class='icon-panel icon-font6']")
	private static WebElement  jumpToBodySectionBtn;

	@FindBy(xpath="//span[@class='icon-footer icon-font6']")
	private static WebElement  jumpToFooterBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_new']")
	private static WebElement  new_newBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_save']")
	private static WebElement  saveBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_previous']")
	private static WebElement  previousBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_next']")
	private static WebElement  nextBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_print']")
	private static WebElement  new_PrintBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	private static WebElement  new_SuspendBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_close']")
	private static WebElement  new_CloseBtn;

	@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	private static WebElement  new_DeleteBtn;



	@FindBy(xpath="//span[@class='icon-menu icon-font4']")
	private static WebElement  toggleBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
	private static WebElement  copyDocumentOption;

	@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
	private static WebElement  copyToClipBoardOption;

	@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
	private static WebElement  pasteFromClipBoardOption;

	@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
	private static WebElement  raiseCheckReturnOption;

	@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
	private static WebElement  addToStockOption;

	@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
	private static WebElement  markConvertedOption;

	@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
	private static WebElement  bomInputOption;

	@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
	private static WebElement  autoAllocateOption;

	@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
	private static WebElement  reverseEntryOption;

	@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
	private static WebElement  printBarcodeOption;

	@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
	private static WebElement  postingDetailsOption;

	@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
	private static WebElement  exportToXMLOption;

	@FindBy(xpath="//*[@id='id_transactionentry_settings']")
	private static WebElement  settingsOption;


	////// Header Section Completed

	// Main Section
	@FindBy(xpath="//input[@id='id_header_1']")
	private static WebElement  documentNumberTxt;



	@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
	private static WebElement  documentNumberDropdown_ExpansionBtn;

	@FindBy(xpath="//input[@id='id_header_2']")
	private static WebElement  dateTxt;

	@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  dateTxt_CalenderBtn;

	@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement  calender_TodayBtn;


	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  cashBankAccountTxt;

	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  cashBankAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  cashBankAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
	private static WebElement  cashBankAccount_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  cashBankAccount_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  cashBankAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_268435459']")
	private static WebElement  departmentTxt;

	@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
	private static WebElement  department_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
	private static WebElement  department_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
	private static WebElement  department_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
	private static WebElement  department_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
	private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
	private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
	private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
	private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
	private static WebElement  department_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  department_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  department_Settings_CancelBtn;

	@FindBy(xpath="//*[@id='id_header_6']")
	private static WebElement  maturityDateTxt;

	@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
	private static WebElement  maturityDateTxt_CalenderBtn;

	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  purchaseAccountTxt;

	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  purchaseAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  purchaseAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
	private static WebElement  purchaseAccount_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
	private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  purchaseAccount_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  purchaseAccount_Settings_CancelBtn;


	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  vendorAccountTxt;

	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  vendorAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  vendorAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
	private static WebElement  vendorAccount_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn_AlignmentDropdown;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement  vendorAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  vendorAccount_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  vendorAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  salesAccountTxt;

	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  salesAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  salesAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
	private static WebElement  salesAccount_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
	private static WebElement  salesAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  salesAccount_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  salesAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  customerAccountTxt;

	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  customerAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  customerAccount_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
	private static WebElement  customerAccount_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn_FieldDrpdwn;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn_AlignmentDrpdwn;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement  customerAccount_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  customerAccount_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  customerAccount_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_12']")
	private static WebElement  accountTxt;

	@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
	private static WebElement  account_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  account_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
	private static WebElement  account_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
	private static WebElement  account_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
	private static WebElement  account_Settings_StandardFieldsBtn_FieldDrpdwn;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
	private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
	private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdrpdwn;

	@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
	private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;


	@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
	private static WebElement  account_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  account_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  account_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_header_31']")
	private static WebElement  issuesReceiptsTxt;

	@FindBy(xpath="//input[@id='id_header_268435460']")
	private static WebElement  warehouseTxt;

	@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
	private static WebElement  warehouse_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
	private static WebElement  warehouse_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
	private static WebElement  warehouse_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
	private static WebElement  warehouse_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
	private static WebElement  warehouse_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
	private static WebElement  warehouse_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
	private static WebElement  warehouse_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
	private static WebElement  warehouse_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  warehouse_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  warehouse_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
	private static WebElement  warehouse_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  warehouse_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  warehouse_Settings_CancelBtn;

	@FindBy(xpath="//span[contains(text(),'sName')]")
	private static WebElement  customize_sName;

	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
	private static WebElement  customize_sCode;

	@FindBy(xpath="//span[contains(text(),'Alias')]")
	private static WebElement  customize_Alias;

	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
	private static WebElement  customize_bGroup;

	@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
	private static WebElement  customize_Balance;

	@FindBy(xpath="//input[@id='id_header_67108920']")
	private static WebElement  appropriateBasedOnDrpdwn;

	@FindBy(xpath="//input[@id='id_header_67108921']")
	private static WebElement  additionalValueTxt;

	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  raiseReceiptsChkBox;

	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  receipts_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108868']")
	private static WebElement  payments_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108871']")
	private static WebElement  pettyCash_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108874']")
	private static WebElement  postDatedReceipts_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  postDatedPayments_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108924']")
	private static WebElement  purchaseVouchers_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108881']")
	private static WebElement  purchaseReturns_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108884']")
	private static WebElement  salesInvoice_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108885']")
	private static WebElement  salesReturns_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108913']")
	private static WebElement  cashSales_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108914']")
	private static WebElement  hirePurchaseSales_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108890']")
	private static WebElement  journalEntries_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108916']")
	private static WebElement  forexJV_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108910']")
	private static WebElement  interDepartmentalJV_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108888']")
	private static WebElement  nonStandardJournalEntries_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108892']")
	private static WebElement  debitNotes_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108911']")
	private static WebElement  debitNotesLineWise_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108893']")
	private static WebElement  creditNotes_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108912']")
	private static WebElement  creditNotesLineWisePayroll_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108894']")
	private static WebElement  openingBalance_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108891']")
	private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108909']")
	private static WebElement  requestForQuote_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108903']")
	private static WebElement  purchasesQuotations_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  purchasesOrders_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  materialReceiptsNotes_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108904']")
	private static WebElement  salesQuotations_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108887']")
	private static WebElement  deliveryNotes_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108917']")
	private static WebElement  posSales_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108918']")
	private static WebElement  productionOrder_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrders_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108895']")
	private static WebElement  shortageInStock_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108896']")
	private static WebElement  excessesInStock_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108897']")
	private static WebElement  stockTransfers_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108898']")
	private static WebElement  openingStocks_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108923']")
	private static WebElement  openingStocksNEW_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108908']")
	private static WebElement  materialRequisition_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108866']")
	private static WebElement  receipts_ChequeNoTxt;

	@FindBy(xpath="//input[@id='id_header_67108869']")
	private static WebElement  payments_ChequeNoTxt;

	@FindBy(xpath="//input[@id='id_header_67108872']")
	private static WebElement  pettyCash_ChequeNoTxt;

	@FindBy(xpath="//input[@id='id_header_67108875']")
	private static WebElement  postDatedReceipts_ChequeNoTxt;

	@FindBy(xpath="//input[@id='id_header_67108878']")
	private static WebElement  postDatedPayments_ChequeNoTxt;



	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement  pvWarehouseTxt;

	@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
	private static WebElement  pvWarehouse_ExpansionBtn;

	@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement  pvWarehouse_SettingsBtn;

	@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
	private static WebElement  pvWarehouse_Settings_Container;

	@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
	private static WebElement  pvWarehouse_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[@class='panel']//input[3]")
	private static WebElement  pvWarehouse_Settings_OkBtn;

	@FindBy(xpath="//div[@class='panel']//input[4]")
	private static WebElement  pvWarehouse_Settings_CancelBtn;

	// Grid Elements


	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Account;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Item;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_DebitAC;

	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
	private static WebElement  Grid_Header_CreditAC;

	//

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
	private static WebElement  firstRowIndex;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement  secondRowIndex;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
	private static WebElement  thirdRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[1]")
	private static WebElement  fifthRowIndex;

	@FindBy(xpath="//span[@class='icon-delete icon-font8']")
	private static WebElement  deleteRowBtn;

	@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
	private static WebElement  insertRowBtn;

	@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
	private static WebElement  selectRowBtn;

	@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
	private static WebElement  unSelectRowBtn;

	@FindBy(xpath="//span[@class='icon-clone icon-font8']")
	private static WebElement  duplicateRowBtn;

	//

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_14']")
	private static WebElement  pvEntryPageTableHeader14thCol;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_15']")
	private static WebElement  pvEntryPageTableHeader15thCol;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_16']")
	private static WebElement  pvEntryPageTableHeader16thCol;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	private static WebElement  select1stRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	private static WebElement  select1stRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	private static WebElement  select1stRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	private static WebElement  select1stRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	private static WebElement  select1stRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	private static WebElement  select1stRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	private static WebElement  select1stRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	private static WebElement  select1stRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	private static WebElement  select1stRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	private static WebElement  select1stRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	private static WebElement  select1stRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	private static WebElement  select1stRow_12thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	private static WebElement  select1stRow_13thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	private static WebElement  select1stRow_14thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	private static WebElement  select1stRow_15thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	private static WebElement  select1stRow_16thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
	private static WebElement  select1stRow_17thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
	private static WebElement  select1stRow_18thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
	private static WebElement  select1stRow_19thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
	private static WebElement  select1stRow_20thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[22]")
	private static WebElement  select1stRow_21stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[23]")
	private static WebElement  select1stRow_22ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[24]")
	private static WebElement  select1stRow_23rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[25]")
	private static WebElement  select1stRow_24thColumn;


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement selectSerialNo2;

	@FindBy (xpath="//div[contains(text(),'Delete Row')]")
	private static WebElement selectSerialNoDeleteRow; 

	@FindBy (xpath="//div[contains(text(),'Insert Row')]")
	private static WebElement selectSerialNoInsertRow;

	@FindBy (xpath="//div[contains(text(),'Select Row')]")
	private static WebElement selectSerialNoSelectRow;

	@FindBy (xpath="//div[contains(text(),'Duplicate Row')]")
	private static WebElement selectSerialNoDuplicateRow;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	private static WebElement  select2ndRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	private static WebElement  select2ndRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	private static WebElement  select2ndRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
	private static WebElement  select2ndRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
	private static WebElement  select2ndRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
	private static WebElement  select2ndRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
	private static WebElement  select2ndRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
	private static WebElement  select2ndRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
	private static WebElement  select2ndRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
	private static WebElement  select2ndRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
	private static WebElement  select2ndRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
	private static WebElement  select2ndRow_12thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
	private static WebElement  select2ndRow_13thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
	private static WebElement  select2ndRow_14thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
	private static WebElement  select2ndRow_15thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
	private static WebElement  select2ndRow_16thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
	private static WebElement  select2ndRow_17thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
	private static WebElement  select2ndRow_18thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
	private static WebElement  select2ndRow_19thColumn;


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	private static WebElement  select3rdRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement  select3rdRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	private static WebElement  select3rdRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
	private static WebElement  select3rdRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
	private static WebElement  select3rdRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
	private static WebElement  select3rdRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
	private static WebElement  select3rdRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
	private static WebElement  select3rdRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
	private static WebElement  select3rdRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement  select3rdRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
	private static WebElement  select3rdRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
	private static WebElement  select3rdRow_12thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
	private static WebElement  select3rdRow_13thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
	private static WebElement  select3rdRow_14thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
	private static WebElement  select3rdRow_15thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
	private static WebElement  select3rdRow_16thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
	private static WebElement  select3rdRow_17thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
	private static WebElement  select3rdRow_18thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
	private static WebElement  select3rdRow_19thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
	private static WebElement  select3rdRow_20thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
	private static WebElement  select3rdRow_21stColumn;





	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
	private static WebElement  select4thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
	private static WebElement  select4thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
	private static WebElement  select4thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
	private static WebElement  select4thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
	private static WebElement  select4thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
	private static WebElement  select4thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
	private static WebElement  select4thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
	private static WebElement  select4thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
	private static WebElement  select4thRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
	private static WebElement  select4thRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
	private static WebElement  select4thRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
	private static WebElement  select4thRow_12thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
	private static WebElement  select4thRow_13thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
	private static WebElement  select4thRow_14thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
	private static WebElement  select4thRow_15thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
	private static WebElement  select4thRow_16thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
	private static WebElement  select4thRow_17thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
	private static WebElement  select4thRow_18thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
	private static WebElement  select4thRow_19thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
	private static WebElement  select4thRow_20thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[22]")
	private static WebElement  select4thRow_21stColumn;





	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
	private static WebElement  select5thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
	private static WebElement  select5thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
	private static WebElement  select5thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
	private static WebElement  select5thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
	private static WebElement  select5thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
	private static WebElement  select5thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
	private static WebElement  select5thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
	private static WebElement  select5thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
	private static WebElement  select5thRow_9thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
	private static WebElement  select6thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
	private static WebElement  select6thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
	private static WebElement  select6thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
	private static WebElement  select6thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
	private static WebElement  select6thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
	private static WebElement  select6thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
	private static WebElement  select6thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
	private static WebElement  select6thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
	private static WebElement  select6thRow_9thColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
	private static WebElement  select7thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
	private static WebElement  select7thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
	private static WebElement  select7thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
	private static WebElement  select7thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
	private static WebElement  select7thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
	private static WebElement  select7thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
	private static WebElement  select7thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
	private static WebElement  select7thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
	private static WebElement  select7thRow_9thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
	private static WebElement  select8thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
	private static WebElement  select8thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
	private static WebElement  select8thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
	private static WebElement  select8thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
	private static WebElement  select8thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
	private static WebElement  select8thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
	private static WebElement  select8thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
	private static WebElement  select8thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
	private static WebElement  select8thRow_9thColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
	private static WebElement  select9thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
	private static WebElement  select9thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
	private static WebElement  select9thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
	private static WebElement  select9thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
	private static WebElement  select9thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
	private static WebElement  select9thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
	private static WebElement  select9thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
	private static WebElement  select9thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
	private static WebElement  select9thRow_9thColumn;




	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
	private static WebElement  select10thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
	private static WebElement  select10thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
	private static WebElement  select10thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
	private static WebElement  select10thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
	private static WebElement  select10thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
	private static WebElement  select10thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
	private static WebElement  select10thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
	private static WebElement  select10thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
	private static WebElement  select10thRow_9thColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
	private static WebElement  select11thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
	private static WebElement  select11thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
	private static WebElement  select11thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
	private static WebElement  select11thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
	private static WebElement  select11thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
	private static WebElement  select11thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
	private static WebElement  select11thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
	private static WebElement  select11thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
	private static WebElement  select11thRow_9thColumn;





	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
	private static WebElement  select12thRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
	private static WebElement  select12thRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
	private static WebElement  select12thRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
	private static WebElement  select12thRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
	private static WebElement  select12thRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
	private static WebElement  select12thRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
	private static WebElement  select12thRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
	private static WebElement  select12thRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
	private static WebElement  select12thRow_9thColumn;


	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_AccountTxt;

	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_Account_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_Account_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
	private static WebElement  enter_Account_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn_FieldDrpdwn;

	@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn_AlignmentDrpdwn;

	@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
	private static WebElement  enter_Account_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_Account_Settings_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_Account_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_16']")
	private static WebElement  enter_Amount;

	@FindBy(xpath="//textarea[@id='id_body_16777219']")
	private static WebElement  enter_Receipts_Remarks;

	@FindBy(xpath="//textarea[@id='id_body_16777222']")
	private static WebElement  enter_Payments_Remarks;

	@FindBy(xpath="//textarea[@id='id_body_16777225']")
	private static WebElement  enter_PettyCash_Remarks;

	@FindBy(xpath="//textarea[@id='id_body_16777228']")
	private static WebElement  enter_PostDatedReceipts_Remarks;

	@FindBy(xpath="//textarea[@id='id_body_16777231']")
	private static WebElement  enter_PostDatedPaymentss_Remarks;

	@FindBy(xpath="//input[@id='id_body_23']")
	private static WebElement  enter_ItemTxt;

	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_SalesAccountTxt;


	@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
	private static WebElement  item_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
	private static WebElement  item_SettingsBtn;

	@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
	private static WebElement  item_Settings_Container;

	@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
	private static WebElement  item_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
	private static WebElement  item_Settings_StandardFieldsBtn_FieldDrpdwn;

	@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
	private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
	private static WebElement  item_Settings_StandardFieldsBtn_AlignmentDrpdwn;

	@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
	private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
	private static WebElement  item_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  item_Settings_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  item_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_26']")
	private static WebElement  enter_Quantity;

	@FindBy(xpath="//input[@id='id_body_27']")
	private static WebElement  enter_Rate;

	@FindBy(xpath="//input[@id='id_body_28']")
	private static WebElement  enter_Gross;

	@FindBy (xpath="//input[@id='id_body_38']")
	private static WebElement enter_RMA;

	@FindBy(xpath="//input[@id='id_body_13']")
	private static WebElement  enter_Batch;

	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_DebitACTxt;

	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_DebitAC_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_DebitAC_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
	private static WebElement  enter_DebitAC_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_FieldDrpdwn;

	@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_AlignmentDrpdwn;

	@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
	private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_DebitAC_Settings_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_DebitAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_39']")
	private static WebElement  enter_CreditACTxt;

	@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
	private static WebElement  enter_CreditAC_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
	private static WebElement  enter_CreditAC_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
	private static WebElement  enter_CreditAC_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
	private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_CreditAC_Settings_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_CreditAC_Settings_CancelBtn;

	@FindBy(xpath="//input[@id='id_body_18']")
	private static WebElement  enter_DebitTxt;

	@FindBy(xpath="//input[@id='id_body_19']")
	private static WebElement  enter_CreditTxt;

	@FindBy(xpath="//textarea[@id='id_body_16777241']")
	private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;

	@FindBy(xpath="//input[@id='id_body_87']")
	private static WebElement  enter_Warehouse2Txt;

	@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
	private static WebElement  enter_Warehouse2_ExpansionBtn;

	@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
	private static WebElement  enter_Warehouse2_SettingsBtn;

	@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
	private static WebElement  enter_WareHouse2_Settings_Container;

	@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;

	@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;

	@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;

	@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;

	@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;

	@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
	private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
	private static WebElement  enter_WareHouse2_Settings_OkBtn;

	@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
	private static WebElement  enter_WareHouse2_Settings_CancelBtn;




	@FindBy(xpath="//span[contains(@class,'icon-settings icon-font1')]")
	private static WebElement settingsMenu; 

	@FindBy(xpath="//a[@id='74']//span[contains(text(),'Design Workflow')]")
	private static WebElement designWorkflowbtn; 

	@FindBy(xpath="//div[@class='navText']//span[contains(text(),'Design Workflow')]")
	private static WebElement designWorkflowLabel; 

	@FindBy(xpath="//i[@class='icon icon-clear icon-font6']")
	private static WebElement clearBtn; 

	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement closeBtn;

	@FindBy(xpath="//input[@id='optWorkflow']")
	private static WebElement workflowNameTxt; 

	@FindBy(xpath="//*[@id='optWorkflow_input_settings']/span")
	private static WebElement workFlowNameSettingsBtn; 

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_heading']")
	private static WebElement workflowNameCustomizeDisplayColoumnLabel;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_container']")
	private static WebElement workflowNameContainerTxt;

	@FindBy(xpath="///*[@id='optWorkflow_customize_popup_footer']/div/div/input[1]")
	private static WebElement workFlowNameStandardFieldsBtn;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_list']")
	private static WebElement workFlowNameFiledDropdown;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_header']")
	private static WebElement workFlowNameHeaderTxt;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_alignment']")
	private static WebElement workFlowNameAlignmentDropdown;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_standardfields_width']")
	private static WebElement workFlowNameWidthTxt;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[3]")
	private static WebElement workFlowNameStandardFieldsOkBtn;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[4]")
	private static WebElement workFlowNameStandardFieldsCancelBtn;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[2]")
	private static WebElement workFlowNameDeleteColoumnBtn;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[3]")
	private static WebElement workFlowNameOkBtn;

	@FindBy(xpath="//*[@id='optWorkflow_customize_popup_footer']/div/div/input[4]")
	private static WebElement workFlowNameCancelBtn;



	public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{  
		//Thread.sleep(2000);
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage=ExpMessage;

			try
			{

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();

				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);

				return actErrorMessage;
			}
			catch(Exception ee)
			{

				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);

				return actErrorMessage;
			}
		}
		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());

			String Exception=e.getMessage();

			return Exception;
		}
	}



	@FindBy (xpath="//input[@id='txtSearchMenu_MainLayout']")
	private static WebElement getSearch;

	public static boolean checkDeleteCompanyOptionInSearch() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		String actAlertTxt = null;
		String expAlertTxt = "Are you sure you want to Delete the Company";

		String actCompanyDeletedAlertTxt = null;
		String expCompanyDeletedAlertTxt = "Company deleted successfully";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyName));
		String actGetLoginCompanyNameInformation = companyName.getText();

		if (actGetLoginCompanyNameInformation.startsWith("Automation Company") || actGetLoginCompanyNameInformation.startsWith("Automation Options Company ")) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getSearch));
			getSearch.click();

			getSearch.sendKeys("Delete Company");
			Thread.sleep(2000);
			getSearch.sendKeys(Keys.ENTER);
			getWaitForAlert();

			actAlertTxt = getAlert().getText();

			getAlert().accept();

			Thread.sleep(2000);

			getWaitForAlert();

			actCompanyDeletedAlertTxt = getAlert().getText();

			getAlert().accept();

			Thread.sleep(2000);

			System.out.println(actAlertTxt+"  Value Expected  "+expAlertTxt);
			System.out.println(actCompanyDeletedAlertTxt+"  Value Expected  "+expCompanyDeletedAlertTxt);

			getDriver().navigate().refresh();

			Thread.sleep(3000);
		}

		if (actAlertTxt.equalsIgnoreCase(expAlertTxt) && actCompanyDeletedAlertTxt.equalsIgnoreCase(expCompanyDeletedAlertTxt))
		{
			return true;
		}
		else
		{
			return false;
		}
	}



	// Restore

	@FindBy(xpath="//i[@class='icon-restore-1 icon-font4']")
	private static WebElement  loginPageRestoreBtn;

	//User Name and password in Credentials
	@FindBy(xpath="//*[@id='txtAdminUsername']")
	private static WebElement adminName;

	@FindBy(xpath="//*[@id='txtAdminPassword']")
	private static WebElement adminPassword;

	@FindBy(xpath="/html/body/section/div[8]/div/div/div[4]/button[1]")
	private static WebElement loginButton;

	@FindBy(xpath="/html/body/section/div[8]/div/div/div[4]/button[2]")
	private static WebElement cancelButton;

	//Restore Screen Options
	@FindBy(xpath="//div[contains(text(),'Restore Company')]")
	private static WebElement restoreCompanyBtnOfLoginPage;

	@FindBy(xpath="//input[@id='txtRestoreFile']")
	private static WebElement restoreInputTxt;

	@FindBy(xpath="//button[@class='btn Fbutton']")
	private static WebElement restoreBrowseBtn;

	@FindBy(xpath="//i[@title='Refresh']")
	private static WebElement  refreshBtn;

	public static boolean checkRestoreCompanyForBatchNegativeOptions() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginPageRestoreBtn));
		loginPageRestoreBtn.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(adminName));
		adminPassword.sendKeys("focus");

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginButton));
		loginButton.click();

		Thread.sleep(2000);

		boolean actRestoreCompanyBtnOfLoginPage  =restoreCompanyBtnOfLoginPage.isDisplayed();
		boolean actRestoreInputTxt               =restoreInputTxt.isDisplayed();
		boolean actRestoreBrowseBtn              =restoreBrowseBtn.isDisplayed();

		boolean expRestoreCompanyBtnOfLoginPage  =true;
		boolean expRestoreInputTxt               =true;
		boolean expRestoreBrowseBtn              =true;

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreBrowseBtn));
		restoreBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\BatchNegativeOptions.exe");

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtnOfLoginPage));
		restoreCompanyBtnOfLoginPage.click();

		/* try
	     {
	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
	 		 overRideYesBtn.click();
	 		 Thread.sleep(22000);*/

		getWaitForAlert();
		String actAlertTxt = getAlert().getText();
		getAlert().accept();

		System.err.println(actAlertTxt);

		String expAlertTxt = "Restore company code : ";

		Thread.sleep(15000);

		if(actAlertTxt.startsWith(expAlertTxt))
		{
			refreshBtn.click();
			Thread.sleep(2000);
			return true;
		}
		else
		{
			return false;
		}
	}






	// Reindexing popup

	@FindBy (xpath="//div[@id='ReIndexingError_Modal']/div/div")
	private static WebElement reindexingPopup;

	@FindBy (xpath="(//div[@id='ReIndexingError_Modal']//div/button)[1]")
	private static WebElement reindexingPopupCloseBtn;

	@FindBy (xpath="(//div[@id='ReIndexingError_Modal']//div/button)[2]")
	private static WebElement reindexingPopupCancelBtn;

	@FindBy (xpath="//div[@id='ReIndexingError_Modal']//div/input")
	private static WebElement reindexingPopupSaveBtn;



	public static boolean checkLoginAfterRestoringBatchNegativeOptionsBackup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		getDriver().navigate().refresh();
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);
		
		lp.clickOnSignInBtn();

		Thread.sleep(15000);

		try 
		{
			if (reindexingPopup.isDisplayed()) 
			{
				System.out.println("Reindexing Log is Displaying in Restore Company");

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reindexingPopupCancelBtn));
				reindexingPopupCancelBtn.click();

				Thread.sleep(2000);

				lp.clickOnSignInBtn();
			}
			else
			{
				System.out.println("Reindexing Log is Not Displaying in Restore Company");
			}

			Thread.sleep(2000);
			
			String actUserInfo1=userNameDisplay.getText();

			System.out.println("User Info  : "+actUserInfo1);

			System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();

			String getCompanyTxt1=companyName.getText();
			String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
			System.out.println("company name  :  "+ getLoginCompanyName1);
			companyLogo.click();

			String expUserInfo1           ="SU";
			String expLoginCompanyName1   ="Automation Options ";

			System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
			System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

			if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
			{
				qflag=true;
			}
			else
			{
				qflag=false;
			}
		} 
		catch (Exception e) 
		{
			System.err.println(e.getMessage());
			
			Thread.sleep(2000);
			
			String actUserInfo1=userNameDisplay.getText();

			System.out.println("User Info  : "+actUserInfo1);

			System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();

			String getCompanyTxt1=companyName.getText();
			String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
			System.out.println("company name  :  "+ getLoginCompanyName1);
			companyLogo.click();

			String expUserInfo1           ="SU";
			String expLoginCompanyName1   ="Automation Options ";

			System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
			System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);
		
			if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
			{
				qflag=true;
			}
			else
			{
				qflag=false;
			}
		}
		return qflag;
	}


	
	public boolean checkLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		Thread.sleep(2000);

		LoginPage lp=new LoginPage(getDriver()); 
		
	    String unamelt="su";
	  
	    String pawslt="su";
	      
	    lp.enterUserName(unamelt);
	    
	    lp.enterPassword(pawslt);
	    
	    String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);
	    
	    lp.clickOnSignInBtn();
	    
	  
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		String actUserInfo=userNameDisplay.getText();
		
		System.out.println("User Info  : "+actUserInfo);
		
		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();
		
		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName);
		companyLogo.click();
		
		boolean actDashboard = dashboard.isDisplayed();
		
		
		String expUserInfo           ="SU";
		String expLoginCompanyName   ="Automation Options ";
		boolean expDashboard = true;
		
		
		Thread.sleep(2000);
	
		
		if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	public static void PurchaseVoucherVAT(WebElement financialsMenu, WebElement financialsTransactionMenu, WebElement financialsTransactionsPurchaseMenu, 
			WebElement purchaseVouchersVat, WebElement newBtn, WebElement vendorAccountTxt, String vendorTxt, WebElement departmentTxt, String departTxt,
			WebElement select1stRow_1stColumn, WebElement enter_WarehouseTxt, String warehouseTxt, WebElement enter_ItemTxt, String itemTxt,
			WebElement enter_PvTaxCode, WebElement enter_AccountTxt, WebElement select1stRow_9thColumn,
			WebElement enter_Quantity, String quantityTxt, WebElement select1stRow_11thColumn, WebElement enter_Rate, String rateTxt,
			WebElement enter_Gross, WebElement enter_PVDiscount, WebElement select1stRow_16thColumn,
			WebElement enter_Batch, String batchTxt, WebElement enter_Expirydate, String expiryTxt, WebElement saveBtn, WebElement newReferenceTxt,
			WebElement pickBtn, WebElement Bill_OkBtn) throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		click(financialsMenu);
		click(financialsTransactionMenu);
		click(financialsTransactionsPurchaseMenu);
		click(purchaseVouchersVat);
		Thread.sleep(2000);		
		click(newBtn);		
		String ScreenOpenedMessage=checkValidationMessage("Screen opened");		
		enterText(vendorAccountTxt, vendorTxt);		
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		enterText(departmentTxt, departTxt);
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		click(select1stRow_1stColumn);		
		enterText(enter_WarehouseTxt, warehouseTxt);	
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		enterText(enter_ItemTxt, itemTxt);		
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);
		click(select1stRow_9thColumn);		
		enterText(enter_Quantity, quantityTxt);		
		click(select1stRow_11thColumn);		
		enterText(enter_Rate, rateTxt);		
		enter_Rate.sendKeys(Keys.TAB);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);		
		click(select1stRow_16thColumn);
		enterText(enter_Batch, batchTxt);
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		 String actBatchNo=select1stRow_16thColumn.getText();
		 String expBatchNo="Batch#PVAT1";
		
		click(saveBtn);

		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);
		
		click(pickBtn);

		Thread.sleep(2000);
		click(Bill_OkBtn);
		
		
	}
	
	// First Scenario Starts : Changing Inward Voucher Transaction Date to Future Date After Full Consumption of Batch in Outward Voucher

	public boolean checkSavingPurchaseVoucherVATVoucher1WithTodaysDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		/*
		PurchaseVoucherVAT(financialsMenu, financialsTransactionMenu, financialsTransactionsPurchaseMenu, purchaseVouchersVat, 
				newBtn, vendorAccountTxt, "Vendor A", departmentTxt, "DUBAI", select1stRow_1stColumn, enter_WarehouseTxt,
				"HYDERABAD", enter_ItemTxt, "BR COGS ITEM", enter_PvTaxCode, enter_AccountTxt, select1stRow_9thColumn,
				enter_Quantity, "10", select1stRow_11thColumn, enter_Rate, "10",
				enter_Gross, enter_PVDiscount, select1stRow_16thColumn, enter_Batch, "Batch#PVAT1",
				enter_Expirydate, "ExpiryDate", saveBtn, newReferenceTxt, pickBtn, Bill_OkBtn);  
				
				*/		
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if (actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;
		//System.out.println(act1stRowPurchaseDate);
		//System.out.println(exp1stRowPurchaseDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithNextDateByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToSalesInvoiceFullConsumeQty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage="Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	// First Scenario Stop : Changing Inward Voucher Transaction Date to Future Date After Full Consumption of Batch in Outward Voucher













	// Second Scenario Starts : Changing Inward Voucher Transaction Date to Future Date After Suspending Outward Voucher With Full Consumption of batch and Resaving Outward Voucher


	public boolean checkSuspendingSalesInvoiceVATVoucher1FromVoucherHomePage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Voucher Suspended Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToSalesInvoiceAfterSuspendingSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingPurchaseVoucherDateNextToSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Third Scenario Starts : Changing Inward Voucher Transaction Date to Future Date After Suspending Outward Voucher from Entry Page Home With Full Consumption of batch and Resaving Outward Voucher

	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateSameAsSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Days :: " + DocDate);
		dateTxt.click();
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	public boolean checkSuspendingSalesInvoiceVATVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actSuspendMessage.startsWith(expSuspendMessage1)
				&& actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToSalesInvoiceAfterSuspendingSalesInvoiceVoucherInEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1SuspendedFromEntryPageAfterChangingPurchaseVoucherDateNextToSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click(); 
		
		//Thread.sleep(1000);

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Fourth Scenario Starts : Changing outward Transaction Date Prior to Inward Voucher Transaction Date After Full Consumption of Batch

	public boolean checkBatchPopupWithValuesInSalesInvoiceVATVoucher1WithDateSameAsPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String PurchasetDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchasetDate;
		//System.out.println();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithDateSameAsPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String PurchaseDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchaseDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingEmptyWhenTryToSaveSalesInvoiceVATVoucher1WithDatePriorToPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Fifth Scenario Starts : Try to Suspending inward Document After Full Consumption of batch from Home page

	public boolean checkSuspendingPurchaseVoucherVATVoucher1InHomePageAfterConsumingFullyInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}






	// Sixth Scenario Starts : Try to Suspending inward Document After Full Consumption of batch from Entry page

	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryPageAfterConsumingFullyInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage ="Batch has already been used in another voucher";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	// Seventh Scenario Starts : Try to Suspending inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(Keep Inward Suspend)

	public boolean checkSuspendingSalesInvoiceVATVoucher1FromVoucherHomePageForSeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Voucher Suspended Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkSuspendingPurchaseVoucherVATVoucher1InHomePageAfterSuspendingSalesInvoiceVAt() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Voucher Suspended Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSuspendingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Eight Scenario Starts : Try to Suspending inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(Keep Inward Suspend)
	// Suspending from Entry Page

	public boolean checkReSavingPurchaseVoucherVATVoucher1AfterSeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSuspendingSalesInvoiceVATVoucher1FromEntryPageForEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryPageAfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSuspendingPurchaseVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Ninth Scenario Starts : Try to Deleting inward Document After Full Consumption of batch

	public boolean checkReSavingPurchaseVoucherVATVoucher1AfterEigthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkDeletingPurchaseVoucherVATVoucher1InHomePageAfterConsumingFullQuantityInSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage = "VoucherNo - 1: Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}











	public boolean checkDeletingPurchaseVoucherVATVoucher1InEntryPageAfterConsumingFullQuantityInSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage = "Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}












	// Tenth Scenario Starts : Try to Deleting inward Document After Suspending Outward Voucher With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1FromEntryPageForTenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkDeletingPurchaseVoucherVATVoucher1InHomePageAfterSuspendingSalesInvoiceVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage = "VoucherNo - 1: Voucher deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	// Eleventh Scenario Starts : Try to Deleting inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(After Deleting Inward)

	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeletingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkSavingPurchaseVoucherVATVoucher1AgainAfterDeletingPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	@FindBy(xpath="//div[@id='idGlobalError']")
	public static WebElement validationConfirmationMessage;

	public boolean checkReSavingSuspendedSalesInvoiceVATVoucher1AfterSavingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Twelfth Scenario Starts : Try to Suspending and Deleting inward Document After Suspending Outward Voucher With Full Consumption of Batch and Resaving Outward Document(After Deleting Inward)

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwelfthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	public boolean checkSuspendAndDeletingPurchaseVoucherVATVoucher1InHomePageAfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Voucher Suspended Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		Thread.sleep(1500);
		click(voucherHomeRow1ChkBox);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expDeleteMessage = "VoucherNo - 1: Voucher deleted Successfully";
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus) && actDeleteMessage.equalsIgnoreCase(expDeleteMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSuspendingAndDeletingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkSavingPurchaseVoucherVATVoucher1AgainAfterSuspendingAndDeletingPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingSuspendedSalesInvoiceVATVoucher1AfterSavingSuspendedAndDeletedPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}











	// Thirteenth Scenario Starts : Try to Edit Quantity in inward Document Lower Than Consumned Quantity in Outward Voucher

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityBelowConsumedQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_Quantity.sendKeys("5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Fourteenth Scenario Starts : Try to Edit Quantity in inward Document Lower Than Consumned Quantity in Outward Voucher after Suspending and Resaving Outward Voucher

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForFourteenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityBelowConsumedQuantityAfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_Quantity.sendKeys("5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSavingPurchaseVoucherVATWithBelowConsumedQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(1000);
		click(newReferenceTxt);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityEqualToConsumedQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_Quantity.sendKeys("10");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSuspendedSalesInvoiceVATVoucher1AfterSavingPurchaseVoucherVATWithQuantityFrom5To10() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}














	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Secunderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Sixteenth Scenario Starts : Try to Change Warehouse in Inward Document After Suspending and Resaving Outward Voucher With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSixteenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabadAfterSuspendingSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Secunderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingWarehouseToSecunderabadInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBackWarehouseFromSecunderabadToHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingWarehouseToHyderabadInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}
		
		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}













	// Seventeenth Scenario Starts : Try to Change Item in Inward Document After Full Consumption of Batch in Outward Document 

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingItemFromBRCOGSITEMToBATCHBRITEM() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	// Eighteenth Scenario Starts : Try to Change Item in Inward Document After Suspending and Resaving Outward Document With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForEighteenthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingItemFromBRCOGSITEMToBATCHBRITEMAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingItemToBatchBRItemInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage) && actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingItemFromBATCHBRITEMToBRCOGSITEM() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingItemNameToBRCOGSITEMInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	// Nineteenth Scenario Starts : Try to Change BatchNo in Inward Document After Full Consumption of batch in Outward Document

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBatchNoFromBATCHPVAT1ToBATCHPVAT2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT2");
		enter_Batch.sendKeys(Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Twentieth Scenario Starts : Try to Change BatchNo in Inward Document After Suspending and Resaving Outward Document With Full Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBatchNoFromBATCHPVAT1ToBATCHPVAT2AfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT2");
		enter_Batch.sendKeys(Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(1000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingBatchNoInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)/* && actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByChangingBatchNoFromBATCHPVAT2ToBATCHPVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucher1AfterChangingBatchNoToBatchPVAT1InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		pre.add(Calendar.DATE, 2);
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actItemName.equalsIgnoreCase(expItemName) 
				&& actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Twenty First Scenario Starts : Try to Deleting Row in Inward Voucher(With Same Batch) After Full Consumption of batch in Outward Document.

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAddingRow2WithSameQuantityAndBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	@FindBy(xpath="(//span[@class='icon-settings icon-font6'])[1]")
	private static WebElement  purchaseVoucherVatSetting;
	
	@FindBy(xpath="//span[text()='Miscellaneous']")
	private static WebElement  purchaseVoucherVatMiscellaneous;
	
	@FindBy(xpath="//button[contains(text(),'Posting Details')]")
	private static WebElement  postingDetails;
	
	@FindBy(xpath="//*[@id='misc_PostingUpdateFA']")
	private static WebElement  updatedFaIsSelected;
	
	@FindBy(xpath="//*[@id='misc_PostingUpdateFA']//..//span")
	private static WebElement  updatedFa;

	public boolean checkDisableUpdateFATag() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);
		
		click(purchaseVoucherVatSetting);
		Thread.sleep(2500);
		
		click(purchaseVoucherVatMiscellaneous);
		Thread.sleep(2000);
		//ClickUsingJs(postingDetails);
		Thread.sleep(1500);
		if(updatedFaIsSelected.isSelected()==true)
		{
			click(updatedFaIsSelected);
		}
		
		click(updateBtn);

		String expMessage="Data saved successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			return false;
		}
	}





	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow1WhichHasConsumedFullyInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		checkDisableUpdateFATag();
		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		/*click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();*/

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	// Twenty Second Scenario Starts : Try to Deleting Row in Inward Voucher(With Same batch) After suspending and Resaving Outward Document With Full Consumption of batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentySecondScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow1WhichHasConsumedFullyInSalesInvoiceAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		/*click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();*/

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeletingARowInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	public boolean checkEnableUpdateFATag() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);
		
		click(purchaseVoucherVatSetting);
		Thread.sleep(2500);
		
		click(purchaseVoucherVatMiscellaneous);
		Thread.sleep(2000);
		//ClickUsingJs(postingDetails);
		Thread.sleep(1500);
		if(updatedFaIsSelected.isSelected()==false)
		{
			click(updatedFaIsSelected);
		}
		
		click(updateBtn);

		String expMessage="Data saved successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			Thread.sleep(1500);
			click(voucherhomeCloseBtn);
			return false;
		}
	}








	// Twenty Third Scenario Starts : Try to Deleting Row in Inward Voucher After Full Consumption of batch in Outward Document.

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAddingRow2WithSameQuantityAndDifferentBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
	
		checkEnableUpdateFATag();
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT2");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		 String actBatchNo=select2ndRow_16thColumn.getText();
		 String expBatchNo="Batch#PVAT2";
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterAddingRow2WithBatchNoAsBatchPVAT2InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		int batchCount = batchPopupBatchNoList.size();

		for (int i = 0; i < batchCount; i++) 
		{
			String data = batchPopupBatchNoList.get(i).getText();
			System.out.println(i+1+" : "+data);

			if (data.equalsIgnoreCase("BATCH#PVAT2")) 
			{
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		Thread.sleep(2000);
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow2WhichHasConsumedFullyInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Twenty Fourth Scenario Starts : Try to Deleting Row in Inward Voucher After suspending and Resaving Outward Document With Full Consumption of batch


	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentyFourthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeletingRow2WhichHasConsumedFullyInSalesInvoiceAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);
		
	/*	click(select2ndRow_2ndColumn);
		
		if(enter_ItemTxt.getAttribute("data-focustext")=="BR COGS ITEM") {
			click(new_DeleteBtn);
			getWaitForAlert();
			Thread.sleep(2000);
			getAlert().accept();
			
		} */

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(1000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeletingARow2InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Twenty Fifth Scenario Starts : Try to Adding and Deleting Row in inward Document After Consumption of Batch in Outward Document

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAdding2ndRowWithSameQuantityAndDifferentBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT2");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantityAs11AfterAddingRow2WithBatchNoAsBatchPVAT2InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		enter_AQ.click();
		enter_AQ.sendKeys(Keys.END);
		enter_AQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_AQ.sendKeys("65");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		enter_FQ.click();
		enter_FQ.sendKeys(Keys.END);
		enter_FQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_FQ.sendKeys("65");
		enter_FQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		String actRow1Batch = select1stRow_19thColumn.getText();
		String expRow1Batch = "BATCH#PVAT1"; 

		String actRow2Batch = select2ndRow_19thColumn.getText();
		String expRow2Batch = "BATCH#PVAT2";

		System.out.println("1st Row Batch No : "+actRow1Batch+"  Value Expected  "+expRow1Batch);
		System.out.println("2nd Row Batch No : "+actRow2Batch+"  Value Expected  "+expRow2Batch);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		Thread.sleep(2000);
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndRowWhichHasConsumedInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Twenty Sixth Scenario Starts : Try to Adding and Deleting Row in inward Document After Suspending and Resaving Outward Document With Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndWhichHasConsumedInSalesInvoiceAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(1000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterDeleting2ndRowInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	// Twenty Seventh Scenario Starts : Try to Adding and Deleting Row in inward Document(With Same Batch) After Consumption of Batch in Outward Document

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByAddingRow2WithSameQuantityAndBatchNoForTwentySeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select2ndRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(1000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantityAs11AfterAddingRow2WithBatchNoAsBatchPVAT1InPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		enter_AQ.click();
		enter_AQ.sendKeys(Keys.END);
		enter_AQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_AQ.sendKeys("65");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		enter_FQ.click();
		enter_FQ.sendKeys(Keys.END);
		enter_FQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_FQ.sendKeys("65");
		enter_FQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		String actRow1Batch = select1stRow_19thColumn.getText();
		String expRow1Batch = "Batch#PVAT1"; 

		String actRow2Batch = select2ndRow_19thColumn.getText();
		String expRow2Batch = "Batch#PVAT1";

		System.out.println("1st Row Batch No : "+actRow1Batch+"  Value Expected  "+expRow1Batch);
		System.out.println("2nd Row Batch No : "+actRow2Batch+"  Value Expected  "+expRow2Batch);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		Thread.sleep(2000);

		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndRowWhichHasConsumedInSalesInvoice1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));	
   
		
    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		
    
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Twenty Eight Scenario Starts : Try to Adding and Deleting Row in inward Document(With Same batch) After Suspending and Resaving Outward Document With Consumption of Batch

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForTwentyEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	public boolean checkEditingAndSavingPurchaseVoucherVATVoucher1ByDeleting2ndAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	public boolean checkReSavingSalesInvoiceVATVoucherAfterDeleting2ndRowInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	// Twenty Ninth Scenario Starts : Try to Consume Quantity Which are Already Consumed by inserting outward Document Prior to Consumed Document.(inserting Doc Between inward and outward)

	public boolean checkEditingAndSavingPurchaseVoucherVATVoucherWithCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		String DocDate=df.format(cal.getTime());

		System.out.println(" Current Date :: " + DocDate);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(2000);
		
		String actDate=dateTxt.getAttribute("value");
		Thread.sleep(2000);
		String expDate=DocDate;
		
		System.out.println(" Document Date after Editing : "+actDate +" Value  : "+expDate);
	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		Thread.sleep(2000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	public boolean checkDeletingSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage ="Voucher Deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1WithDate2DaysMoreThanPresentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		Thread.sleep(7000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkBatchPopupInSalesInvoiceVATVoucher2WithDateAsPreviousDateToSalesInvoice1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);


		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}











	// Thirtieth Scenario Starts : Try to Resaving Outward Suspended Outward Document after Full Consumption of Batch in Other Outward Document

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForThirtiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public boolean checkSavingSalesInvoiceVATVoucher2WithDate1DaysMoreThanSalesInvoiceVoucher1Date() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo    +"  value expected  "+expBatchNo);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSavingSalesInvoiceVoucher2WithSameValues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Thirty First Scenario Starts : Try to Suspending Stock Transfer Voucher After Full Consumption of Batch

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyFirstScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();
		
		Thread.sleep(1000);

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		String expMessage2 = "VoucherNo - 2: Voucher deleted Successfully";
		String expMessage1 = "VoucherNo - 1: Voucher deleted Successfully";
		String actMessage = checkValidationMessage(expMessage2);

		Thread.sleep(1000);

		if(actMessage.startsWith(expMessage2) && actMessage.endsWith(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkBatchPopupInStockTransferVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferWarehouse1));
		stockTransferWarehouse1.click();
		stockTransferWarehouse1.sendKeys(Keys.SPACE);
		Thread.sleep(1000);
		stockTransferWarehouse1.sendKeys("HYDERABAD");

		int warehouse1Count=st_warehouse1HeaderComboList.size();

		for (int i = 0; i < warehouse1Count; i++) 
		{
			String warehouse=st_warehouse1HeaderComboList.get(i).getText();

			if (warehouse.equalsIgnoreCase("HYDERABAD")) 
			{
				st_warehouse1HeaderComboList.get(i).click();
				stockTransferWarehouse1.sendKeys(Keys.TAB);
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
		enter_Warehouse2Txt.sendKeys("SECUNDERABAD");
		Thread.sleep(2000);
		enter_Warehouse2Txt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("120");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("25");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String PurchasetDate = df.format(pre.getTime());
		
		System.out.println("===============:"+PurchasetDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchasetDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingStockTransferVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String PurchaseDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchaseDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actBatchNo=select1stRow_8thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo    +"  value expected  "+expBatchNo);

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1WithWarehouseAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("SECUNDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSuspendingStockTransferVoucherFromEntryAndHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expEntrySuspendMessage ="Batch has already been used in another voucher";
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expHomeSuspendMessage ="Batch has already been used in another voucher";
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actEntrySuspendMessage.equalsIgnoreCase(expEntrySuspendMessage) && actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Thirty Second Scenario Starts : Try to Delete Stock Transfer Voucher After Full Consumption of Batch  (From Entry and Homepage)

	public boolean checkDeletingStockTransferVoucherFromEntryPageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage ="Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public boolean checkDeletingStockTransferVoucherFromHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage ="VoucherNo - 1: Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	// Thirty Third Scenario Starts : Try to Change Quantity in Stock transfer Voucher After Full Consumption of batch

	public boolean checkBatchPopupInStockTransferVoucherAfterChangingQuantityTo5AndSaving() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		select1stRow_4thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("60");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "60";

		Calendar pre=Calendar.getInstance();
		String PurchasetDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = PurchasetDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "60.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage ="Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				&& actMessage.equalsIgnoreCase(expMessage))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	// Thirty Fourth Scenario Starts : Try to ReSave Suspended Stock Transfer Voucher After Full Consumption of batch

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyThirdScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		String expMessage1 = "VoucherNo - 1: Voucher deleted Successfully";
		String actMessage = checkValidationMessage(expMessage1);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSuspendingStockTransferVoucherFromEntryPageAfterDeletingVoucherInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expEntrySuspendMessage1 = "Voucher saved successfully";
		String expEntrySuspendMessage2 = " : 1";
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkBatchPopupInSalesInvoiceVATVoucher1WithWarehouseAsHyderabadAfterSuspendingStockTransferVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseAsHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkResavingStockTransferVoucherAfterConsumingWithWarehouseAsHyderabadInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage ="Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Thirty Fifth Scenario Starts : Try to Suspend Inward Document After Stock transfer

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyFifthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		String expMessage1 = "VoucherNo - 1: Voucher deleted Successfully";
		String actMessage = checkValidationMessage(expMessage1);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkResavingStockTransferVoucherAfterDeletingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryAndHomePageAfterConsumingFullyInStockTransferfVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage ="Batch has already been used in another voucher";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expHomeSuspendMessage ="Batch has already been used in another voucher";
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Thirty Sixth Scenario Starts : Try to Suspend Inward Document After Suspending Stock Transfer

	public boolean checkBatchPopupInSalesInvoiceVATVoucher1WithWarehouseAsSecunderabadAfterResavingStockTransferVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("SECUNDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}






	public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseAsSecunderabadAfterResavingStockTransferVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkSuspendingStockTransferVoucherFromEntryPageAfterSavingSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage ="Batch has already been used in another voucher";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expHomeSuspendMessage ="Batch has already been used in another voucher";
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSuspendingPurchaseVoucherVATVoucher1InEntryAndHomePageAfterConsumingFullyInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage ="Batch has already been used in another voucher";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expHomeSuspendMessage ="Batch has already been used in another voucher";
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Thirty Seventh Scenario Starts : Try to Deleting Inward Document After Suspending Stock Transfer

	public boolean checkDeletingPurchaseVoucherFromEntryPageAfterConsumingInStockTransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage ="Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public boolean checkDeletingPurchaseVoucherFromHomePageAfterConsumingInStockTransfer() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage ="VoucherNo - 1: Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	// Thirty Eight Scenario Starts : Try to Resave Suspended Purchases Return Voucher After Full Consumption of batch

	public boolean checkDeletingSalesInvoiceVATVouchersForThirtyEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		String expMessage1 = "VoucherNo - 1: Voucher deleted Successfully";
		String actMessage = checkValidationMessage(expMessage1);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkDeletingStockTransferVoucherAfterDeletingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
		stockTransfersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_HeaderChkBox));
		grid_HeaderChkBox.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		Thread.sleep(1000);
		getAlert().accept();

		String expMessage1 = "VoucherNo - 1: Voucher deleted Successfully";
		String actMessage = checkValidationMessage(expMessage1);

		Thread.sleep(1000);

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	@FindBy (xpath="//select[@id='id_transactionentry_workflow_dropdown']")
	private static WebElement workFlowDropdown;


	public boolean checkSavingPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}	








	public boolean checkSuspendingPurchaseReturnsVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);
		
		
		  //getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(
		 // previousBtn)); previousBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		
		 

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expEntrySuspendMessage1 = "Voucher saved successfully";
		String expEntrySuspendMessage2 = " : 1";
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkBatchPopupInSalesInvoiceVATVoucher1AfterSuspendingPurchaseReturnsVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}






	public boolean checkSavingSalesInvoiceVATVoucher1AfterSuspendingPurchaseReturnsVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingPurchaseReturnsVoucher1AfterSavingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Thirty Ninth Scenario Starts : Try to Suspend Sales Return Voucher After Full Consumption of batch

	public boolean checkSavingSalesReturnsVoucher1WithQuantityAs60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT55:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys("60");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1Row2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys(Keys.END);
		pvWarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
		select2ndRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
		select2ndRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		select2ndRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="60.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithRow2AndQuantity60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="60.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "60.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "60.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		Thread.sleep(1000);

		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSuspendingSalesReturnsVoucher1FromEntryAndHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage ="Batch has already been used in another voucher";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expHomeSuspendMessage ="Batch has already been used in another voucher";
		String actHomeSuspendMessage = checkValidationMessage(expHomeSuspendMessage);

		Thread.sleep(2000);

		String actHomeSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expHomeSuspendStatus = "False";

		System.out.println("Suspend Status After Suspending the Voucher From Home Page : "+actHomeSuspendStatus+"  Expected  "+expHomeSuspendStatus);

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)
				&& actHomeSuspendMessage.equalsIgnoreCase(expHomeSuspendMessage) && actHomeSuspendStatus.equalsIgnoreCase(expHomeSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Fortieth Scenario Starts : Try to Delete Sales Return Voucher After Full Consumption of batch

	public boolean checkDeletingSalesReturnsVoucher1FromEntryAndHomePageAfterConsumingInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
		salesReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expDeleteMessage ="Batch has already been used in another voucher";
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		if (grid_ChkBox1.isSelected()==false) 
		{
			grid_ChkBox1.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expHomeDeleteMessage ="VoucherNo - 1: Batch has already been used in another voucher";
		String actHomeDeleteMessage = checkValidationMessage(expHomeDeleteMessage);

		Thread.sleep(2000);

		if(actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && actHomeDeleteMessage.equalsIgnoreCase(expHomeDeleteMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Forty one Scenario Starts : Try to Delete Sales Return Voucher After Full Consumption of batch With Different Transaction Dates

	public boolean checkSavingPurchaseVoucherVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys("BR COGS ACC INV");
		Thread.sleep(2000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT2");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys("Sales - Computers");
		Thread.sleep(2000);
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("120");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher2WithNextDateByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		String actBatchNo=select1stRow_12thColumn.getText();
		String expBatchNo="BATCH#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	@FindBy(xpath="//a[@id='2061']/span")
	private static WebElement salesReturnsVATVoucher;

	@FindBy(xpath="//input[@id='id_body_16777329']")
	private static WebElement  salesReturnsEnter_TaxCode;

	public boolean checkSavingSalesReturnsVoucher2WithDateNextToSalesInvoiceAndQuantityAs60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVATVoucher));
		salesReturnsVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
		warehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		warehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsEnter_TaxCode));
		salesReturnsEnter_TaxCode.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys("Sales - Computers");
		Thread.sleep(2000);
		enter_SalesAccount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("60");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("BATCH#PVAT2");
		enter_Batch.sendKeys(Keys.TAB);

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(exp.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys("Sales - Computers");
		Thread.sleep(2000);
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("60");
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher3WithNextDateByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "60.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "60.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		String actBatchNo=select1stRow_12thColumn.getText();
		String expBatchNo="BATCH#PVAT2";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkDeletingSalesReturnsVoucher2FromEntryAndHomePageAfterConsumingInSalesInvoice3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVATVoucher));
		salesReturnsVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expDeleteMessage ="Batch has already been used in another voucher";
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				if (grid_CheckBoxList.get(i).isSelected()==false) 
				{
					grid_CheckBoxList.get(i).click();
					break;
				}

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expHomeDeleteMessage ="VoucherNo - 1: Batch has already been used in another voucher";
		String actHomeDeleteMessage = checkValidationMessage(expHomeDeleteMessage);

		Thread.sleep(2000);

		if(actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && actHomeDeleteMessage.equalsIgnoreCase(expHomeDeleteMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Forty Second Scenario Starts : Try to Resave Suspended Shortages in Stocks Voucher After Full Consumption of batch

	public boolean checkSavingPurchaseVoucherVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys("BR COGS ACC INV");
		Thread.sleep(2000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT3");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 3";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkBatchPopupInShortageInStocksVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
		shortagesInStockVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("120");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingShortageInStockVoucher1ConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int actBatchCount = batchPopupBatchNoList.size();
		int expBatchCount = 1;

		for (int i = 0; i < actBatchCount; i++) 
		{
			String data = batchPopupBatchNoList.get(i).getText();
			System.out.println(i+1+" : "+data);

			if (data.equalsIgnoreCase("BATCH#PVAT3")) 
			{
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Number of rows Batch Nos: "+actBatchCount             +"  value expected  "+expBatchCount);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actBatchCount==expBatchCount && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSuspendingShortageInStocksVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(
		 * previousBtn)); previousBtn.click();
		 */
		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
		inventoryTransactionsStocksMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
		shortagesInStockVoucher.click();

		Thread.sleep(2000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expEntrySuspendMessage1 = "Voucher saved successfully";
		String expEntrySuspendMessage2 = " : 1";
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		Thread.sleep(2000);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkBatchPopupInShortageInStocksVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("120");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingShortageInStockVoucher2ConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int actBatchCount = batchPopupBatchNoList.size();
		int expBatchCount = 1;

		for (int i = 0; i < actBatchCount; i++) 
		{
			String data = batchPopupBatchNoList.get(i).getText();
			System.out.println(i+1+" : "+data);

			if (data.equalsIgnoreCase("BATCH#PVAT3")) 
			{
				getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BATCH BR ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Number of rows Batch Nos: "+actBatchCount             +"  value expected  "+expBatchCount);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actBatchCount==expBatchCount && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return false;
		}
	}








	public boolean checkResavingSuspendedShortageInStocksVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(2000);
		
		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);
		
		System.out.println("Actula Mesg++++++++++++++++++     :"   + actMessage);
		System.out.println("Exp    Mesg++++++++++++++++++     :"   + expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public static boolean checkEraseAllTransactionsLogoutAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);		
		
		checkLogoutAndLoginWithoutPronghorn();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
		eraseAll.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
		eraseTranscationsRadio.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
		eraseAllOkBtn.click();

		if(getIsAlertPresent())
		{
			getWaitForAlert();

			getAlert().accept();
		}
		
		//Thread.sleep(2000);

		String expValidationMsg="Data deleted successfully.";

		String actValidationMsg=checkValidationMessage(expValidationMsg);

		System.out.println("************************************* checkEraseAllTransactions  *********************************");
		System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(3000);
		
		Thread.sleep(2000);
		prongHornOn();
		Thread.sleep(10000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           ="SU";
		String expLoginCompanyName1   ="Automation Options ";

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if(actValidationMsg.equalsIgnoreCase(expValidationMsg) && actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Scenarios Using "Allow Negative Batch Quantities" Option				
	// Forty Third Scenario Starts : try to Saving Negative batch Quantity Without Enabling Allow Negative batch Quantity Option

	public boolean checkSavingPurchaseVoucherVATVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1WithMoreThanAvailableQuantityInPurchaseVoucherWithoutEnablingAllowNegativeBatchQuantities() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		//hread.sleep(2000);
		//click(pvWarehouseTxt);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("120");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("120");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		batchTable1stRow5thCol.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchTableQtyAdjusted));
		enter_BatchTableQtyAdjusted.sendKeys("240");
		enter_BatchTableQtyAdjusted.sendKeys(Keys.TAB);

		String expMessage = "Quantity entered is greater than available quantity";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		System.out.println("Error Message    : "+actMessage        +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	public static void prongHornExit() throws AWTException, InterruptedException, IOException
	{
	 
		
		
		/* Robot robot = new Robot();
		 robot.keyPress(KeyEvent.VK_WINDOWS);
		 robot.keyPress(KeyEvent.VK_R); 
		 robot.keyRelease(KeyEvent.VK_R);
		 robot.keyRelease(KeyEvent.VK_WINDOWS);*/
		 
		 
	     
	     Thread.sleep(7000);
	     
	    Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\pronghornexit.exe");
	   
	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
	     //Thread.sleep(3000);
	     
	     
		/*
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * 
		 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
		 */
  
  Thread.sleep(4000);

	  
	
	}
	
	public static  void inetRestart() throws AWTException, InterruptedException, IOException
	{
		
		Thread.sleep(2000);
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_WINDOWS); 
		robot.keyPress(KeyEvent.VK_D);
		robot.keyRelease(KeyEvent.VK_D); 
		robot.keyRelease(KeyEvent.VK_WINDOWS);
		
		Thread.sleep(4000);
		
		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\RightClick.exe");
	 
			
			/*
			 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_TAB);
			 * robot.keyRelease(KeyEvent.BUTTON3_DOWN_MASK);
			 * 
			 * 
			 * 
			 * 
			 * robot.keyPress(KeyEvent.VK_WINDOWS); robot.keyPress(KeyEvent.VK_R);
			 * robot.keyRelease(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_WINDOWS);
			 * 
			 * 
			 * 
			 * 
			 * 
			 * Thread.sleep(3000);
			 * 
			 * Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornexit.exe")
			 * ;
			 * 
			 * //Runtime.getRuntime().exec(getBaseDir()+
			 * "\\autoIt\\scripts\\inetmgrRestart.exe"); //Thread.sleep(3000);
			 * 
			 * robot.keyPress(KeyEvent.VK_TAB);
			 * robot.keyRelease(KeyEvent.BUTTON3_DOWN_MASK);
			 * //robot.keyPress(KeyEvent.VK_TAB);
			 * robot.keyRelease(KeyEvent.BUTTON1_DOWN_MASK);
			 * 
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * 
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
			 * 
			 * 
			 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
			 */
				 
			 
		 
  
         Thread.sleep(5000);

	     
	     
	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
	     
	}
	
	
	public static void  prongHornOn() throws AWTException, InterruptedException, IOException
	{
	 
		
		/*
		 * Robot robot = new Robot(); robot.keyPress(KeyEvent.VK_WINDOWS);
		 * robot.keyPress(KeyEvent.VK_R); robot.keyRelease(KeyEvent.VK_R);
		 * robot.keyRelease(KeyEvent.VK_WINDOWS);
		 */
		 
	     
	     Thread.sleep(3000);
	     
	  Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PronghornOn.exe");
	   
	     //Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\inetmgrRestart.exe");
	     //Thread.sleep(3000);
	     
	     
		/*
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * robot.keyPress(KeyEvent.VK_TAB); robot.keyRelease(KeyEvent.VK_TAB);
		 * 
		 * 
		 * robot.keyPress(KeyEvent.VK_ENTER); robot.keyRelease(KeyEvent.VK_ENTER);
		 */
  
	  Thread.sleep(5000);
	  
	  Robot robot = new Robot(); 
	  robot.keyPress(KeyEvent.VK_ALT);
	  robot.keyPress(KeyEvent.VK_TAB);
	  
	  robot.keyRelease(KeyEvent.VK_ALT);
	  robot.keyRelease(KeyEvent.VK_TAB);
	  
	  Thread.sleep(1500);

	     
	     
	   // Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\proghornExit.exe");
	     
	     
	}
	









	// Forth Forth Scenario Starts : try to Saving Negative batch Quantity With Enabling Allow Negative batch Quantity Option and Disable Option After Saving Negative Stock

	public boolean checkEnablingAllowNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
		BatchBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AllowNegativeBatchesQtyChkBox));
		if (AllowNegativeBatchesQtyChkBox.isSelected()==false) 
		{
			AllowNegativeBatchesQtyChkBox.click();
		}

		boolean actAllowNegBatchQty=AllowNegativeBatchesQtyChkBox.isSelected();
		boolean expAllowNegBatchQty=true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		getWaitForAlert();
		String actAlertTxt=getAlert().getText();
		String expAlertTxt="Do you want to save the changes?";
		getAlert().accept();

		String expMessage="Data saved Successfully";
		String actMessage=checkValidationMessage(expMessage);

		Thread.sleep(2000);

		System.out.println("AllowNegativeBatchQuantity isSelected : "+actAllowNegBatchQty   +"  value expected  "+expAllowNegBatchQty);
		System.out.println("Alert Text                            : "+actAlertTxt           +"  value expected  "+expAlertTxt);
		System.out.println("Error Message                         : "+actMessage            +"  value expected  "+expMessage);

		if(actAllowNegBatchQty==expAllowNegBatchQty && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			return false;
		}
	}







	public static boolean checkLogoutAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		Thread.sleep(2000);
		
		
	
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		
		Thread.sleep(2000);
		/*inetRestart();
		Thread.sleep(12000);*/
		prongHornOn();
		Thread.sleep(10000);
		
		
		

		//Thread.sleep(3000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           ="SU";
		String expLoginCompanyName1   ="Automation Options ";

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	
	public static boolean checkLogoutAndLoginWithoutPronghorn() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException 
	{
		Thread.sleep(4000);
		
		
	
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		
		Thread.sleep(2000);
		/*inetRestart();
		Thread.sleep(12000);
		prongHornOn();
		Thread.sleep(10000);*/
		
		
		

		//Thread.sleep(3000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           ="SU";
		String expLoginCompanyName1   ="Automation Options ";

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1AfterEnablingAllowBatchNegativeQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("120");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("120");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1AfterEnablingAllowBatchNegativeQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		batchTable1stRow5thCol.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchTableQtyAdjusted));
		enter_BatchTableQtyAdjusted.sendKeys("240");
		enter_BatchTableQtyAdjusted.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "240.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "240.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		/*Thread.sleep(1000);

		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) 
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public boolean checkValidatingQuantityInEntryPageAndBatchPopupAfterSavingWithQuantityGreaterThanAvailableQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(
		 * previousBtn)); previousBtn.click();
		 */
		
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		String actQuantityInEntryPage = select1stRow_11thColumn.getText();
		String expQuantityInEntryPage = "240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "240";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "240.00";

		System.out.println("Quantity In Entry Page  : "+actQuantityInEntryPage    +"  value expected  "+expQuantityInEntryPage);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		if(actQuantityInEntryPage.equalsIgnoreCase(expQuantityInEntryPage)
				&& actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkDisablingAllowNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
		SettingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
		BatchBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AllowNegativeBatchesQtyChkBox));
		if (AllowNegativeBatchesQtyChkBox.isSelected()==true) 
		{
			AllowNegativeBatchesQtyChkBox.click();
		}

		boolean actAllowNegBatchQty=AllowNegativeBatchesQtyChkBox.isSelected();
		boolean expAllowNegBatchQty=false;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		getWaitForAlert();
		String actAlertTxt=getAlert().getText();
		String expAlertTxt="Do you want to save the changes?";
		getAlert().accept();

		String expMessage="Data saved Successfully";
		String actMessage=checkValidationMessage(expMessage);

		Thread.sleep(2000);

		System.out.println("AllowNegativeBatchQuantity isSelected : "+actAllowNegBatchQty   +"  value expected  "+expAllowNegBatchQty);
		System.out.println("Alert Text                            : "+actAlertTxt           +"  value expected  "+expAlertTxt);
		System.out.println("Error Message                         : "+actMessage            +"  value expected  "+expMessage);

		if(actAllowNegBatchQty==expAllowNegBatchQty && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			return false;
		}
	}







	public boolean checkValidatingQuantityInEntryPageAndBatchPopupInSalesInvoice1AfterDisablingAllowNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		String actQuantityInEntryPage = select1stRow_11thColumn.getText();
		String expQuantityInEntryPage = "240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Quantity In Entry Page  : "+actQuantityInEntryPage    +"  value expected  "+expQuantityInEntryPage);
		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		if(actQuantityInEntryPage.equalsIgnoreCase(expQuantityInEntryPage)
				&& actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Forty Fifth Scenario Starts : try to Change Inward Document Date to Future Date After Consumption of Batch in Outward Document.

	public boolean checkSavingPurchaseVoucherVATVoucher1With2Rows() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		// 1st Row 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNoR1 = select1stRow_16thColumn.getText();
		String expBatchNoR1 = "Batch#PVAT1";



		// 2nd Row 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNoR2 = select2ndRow_16thColumn.getText();
		String expBatchNoR2 = "Batch#PVAT1";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No Row1  : "+actBatchNoR1 +"  value expected  "+expBatchNoR1);
		System.out.println("******** Batch No Row2  : "+actBatchNoR2 +"  value expected  "+expBatchNoR2);

		if(actBatchNoR1.equalsIgnoreCase(expBatchNoR1) && actBatchNoR2.equalsIgnoreCase(expBatchNoR2) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1WithQuantity11() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("66");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("66");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="132.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="132.00";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow1stCol));
		String act2ndRowBatchNo=batchTable2ndRow1stCol.getText();
		String exp2ndRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow2ndCol));
		String act2ndRowBaseQuantity=batchTable2ndRow2ndCol.getText();
		String exp2ndRowBaseQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow3rdCol));
		String act2ndRowExpiryDate = batchTable2ndRow3rdCol.getText();
		String exp2ndRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow4thCol));
		String act2ndRowRate = batchTable2ndRow4thCol.getText();
		String exp2ndRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow5thCol));
		String act2ndRowAdjQty = batchTable1stRow5thCol.getText();
		String exp2ndRowAdjQty = "0";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow6thCol));
		String act2ndRowPurchaseDate = batchTable2ndRow6thCol.getText();
		String exp2ndRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";


		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Batch No                : "+act2ndRowBatchNo          +"  value expected  "+exp2ndRowBatchNo);
		System.out.println("Base Quantity           : "+act2ndRowBaseQuantity     +"  value expected  "+exp2ndRowBaseQuantity);
		System.out.println("Expiry Date             : "+act2ndRowExpiryDate       +"  value expected  "+exp2ndRowExpiryDate);
		System.out.println("Rate                    : "+act2ndRowRate             +"  value expected  "+exp2ndRowRate);
		System.out.println("Adj Qty                 : "+act2ndRowAdjQty           +"  value expected  "+exp2ndRowAdjQty);
		System.out.println("Purchase Date           : "+act2ndRowPurchaseDate     +"  value expected  "+exp2ndRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act2ndRowBaseQuantity.equalsIgnoreCase(exp2ndRowBaseQuantity)
				&& act2ndRowExpiryDate.equalsIgnoreCase(exp2ndRowExpiryDate) && act2ndRowRate.equalsIgnoreCase(exp2ndRowRate)
				&& act2ndRowAdjQty.equalsIgnoreCase(exp2ndRowAdjQty) && act2ndRowPurchaseDate.equalsIgnoreCase(exp2ndRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantity11() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="132.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="132.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 6); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow1stCol));
		String act2ndRowBatchNo=batchTable2ndRow1stCol.getText();
		String exp2ndRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow2ndCol));
		String act2ndRowBaseQuantity=batchTable2ndRow2ndCol.getText();
		String exp2ndRowBaseQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow3rdCol));
		String act2ndRowExpiryDate = batchTable2ndRow3rdCol.getText();
		String exp2ndRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow4thCol));
		String act2ndRowRate = batchTable2ndRow4thCol.getText();
		String exp2ndRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow5thCol));
		String act2ndRowAdjQty = batchTable2ndRow5thCol.getText();
		String exp2ndRowAdjQty = "12.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow6thCol));
		String act2ndRowPurchaseDate = batchTable2ndRow6thCol.getText();
		String exp2ndRowPurchaseDate = presentDate;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "132.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Batch No                : "+act2ndRowBatchNo          +"  value expected  "+exp2ndRowBatchNo);
		System.out.println("Base Quantity           : "+act2ndRowBaseQuantity     +"  value expected  "+exp2ndRowBaseQuantity);
		System.out.println("Expiry Date             : "+act2ndRowExpiryDate       +"  value expected  "+exp2ndRowExpiryDate);
		System.out.println("Rate                    : "+act2ndRowRate             +"  value expected  "+exp2ndRowRate);
		System.out.println("Adj Qty                 : "+act2ndRowAdjQty           +"  value expected  "+exp2ndRowAdjQty);
		System.out.println("Purchase Date           : "+act2ndRowPurchaseDate     +"  value expected  "+exp2ndRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNoR1=select1stRow_19thColumn.getText();
		String expBatchNoR1="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actBatchNoR2=select2ndRow_19thColumn.getText();
		String expBatchNoR2="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNoR1 +"  value expected  "+expBatchNoR1);
		System.out.println("2nd Row Batch No : "+actBatchNoR2 +"  value expected  "+expBatchNoR2);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act2ndRowBaseQuantity.equalsIgnoreCase(exp2ndRowBaseQuantity)
				&& act2ndRowExpiryDate.equalsIgnoreCase(exp2ndRowExpiryDate) && act2ndRowRate.equalsIgnoreCase(exp2ndRowRate)
				&& act2ndRowAdjQty.equalsIgnoreCase(exp2ndRowAdjQty) && act2ndRowPurchaseDate.equalsIgnoreCase(exp2ndRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& actBatchNoR1.equalsIgnoreCase(expBatchNoR1) && actBatchNoR2.equalsIgnoreCase(expBatchNoR2)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage="Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Forty Sixth Scenario Starts : try to Change Inward Document Date to Future Date After Suspending and Resaving Outward Document With Consumption of Batch.

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForFortySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1WithDateNextToCurrentDateAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucherAfterChangingDateNextToCurrentDateInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	// Forty Seventh Scenario Starts : try to Change Warehouse in  Inward Document After Consumption of Batch in Outward Document. 

	public boolean checkReSavingPurchaseVoucherVATVoucher1WithCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Current :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkReSavingSalesInvoiceVATVoucher1AfterResavingPurchaseVoucherVAT1WithCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batch = select1stRow_19thColumn.getText();
		String expRow1Batch = "Batch#PVAT1"; 

		String actRow2Batch = select2ndRow_19thColumn.getText();
		String expRow2Batch = "Batch#PVAT1";

		System.out.println("1st Row Batch No : "+actRow1Batch+"  Value Expected  "+expRow1Batch);
		System.out.println("2nd Row Batch No : "+actRow2Batch+"  Value Expected  "+expRow2Batch);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*
		Thread.sleep(2000);
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actRow1Batch.equalsIgnoreCase(expRow1Batch) && actRow2Batch.equalsIgnoreCase(expRow2Batch)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Secunderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Secunderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Forty Eight Scenario Starts : try to Change Warehouse in  Inward Document After Suspend And Resaving Outward Document With Consumption of Batch 

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForFortyEightScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromHyderabadToSecunderabadAfterSuspendingSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Secunderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Secunderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingSalesInvoiceVATVoucherAfterChangingWarehouseToSecunderabadInPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(1000);
		click(newReferenceTxt);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}














	// Forty Ninth Scenario Starts : try to Change Quantity in First Row Inward Document Lesser Than Consumed Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingWarehouseFromSecunderabadToHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys(Keys.END);
		enter_WarehouseTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkDeletingSalesInvoiceVATVoucher1AfterChangingWarehouseInPurchaseVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage ="Voucher Deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1WithQuantity180() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		//Thread.sleep(3000);		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("90");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("90");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNoR1=select1stRow_19thColumn.getText();
		String expBatchNoR1="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actBatchNoR2=select2ndRow_19thColumn.getText();
		String expBatchNoR2="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actBatchNoR1.equalsIgnoreCase(expBatchNoR1) && actBatchNoR2.equalsIgnoreCase(expBatchNoR2)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingQuantityTo12In1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Fiftieth Scenario Starts : try to Change Quantity in Second Row Inward Document Lesser Than Consumed Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingQuantityTo12In2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		select2ndRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys("1");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Fifty One Scenario Starts : try to Change Item in First Row Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingItemToBATCHBRITEMIn1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		select1stRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	// Fifty Second Scenario Starts : try to Change Item in Second  Row Inward Document After Consumption of Batch in Outward Document. 

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingItemToBATCHBRITEMIn2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_2ndColumn));
		select2ndRow_2ndColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_ItemTxt.sendKeys("BATCH BR ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
		select2ndRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 6); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 6 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Fifty Third Scenario Starts : try to Deleting First Row Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByDeleting1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		checkDisableUpdateFATag();
		Thread.sleep(1500);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstRowIndex));
		firstRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		/*click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();*/

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Fifty Forth Scenario Starts : try to Deleting Second  Row Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByDeleting2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		checkEnableUpdateFATag();
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(secondRowIndex));
		secondRowIndex.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
		getAction().moveToElement(deleteRowBtn).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Fifty Five Scenario Starts : try to Change BatchNo in First Row in Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByBatchNoIn1stRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#1");
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(1000);

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Fifty Sixth Scenario Starts : try to Change BatchNo in Second Row in Inward Document After Consumption of Batch in Outward Document.

	public boolean checkReSavingPurchaseVoucherVATVoucher1ByBatchNoIn2ndRow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
		select2ndRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#1");
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Scenarios Using "Expiry Dates For Batches" Option				
	// Fifty Seventh Scenario Starts : Try to Change Expiry Date in Inward Document After Partial Consumption of Batch in Outward Document

	public boolean checkSavingPurchaseVoucherVATVoucher1WithExpiryDate4DaysMoreThanCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 4); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 4 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByConsumingPartialQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("30");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("30");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 4); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "60.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "60.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingExpiryDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
		select1stRow_18thColumn.click();

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(1000);
		click(newReferenceTxt);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Fifty Eight Scenario Starts : Try to Change Expiry Date in Inward Document After Full Consumption of Batch in Outward Document

	public boolean checkReSavingSalesInvoiceVATVoucher1ByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys(Keys.END);
		enter_AQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(Keys.END);
		enter_FQ.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		getAction().doubleClick(select1stRow_19thColumn).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		/*Thread.sleep(2000);
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkReSavingPurchaseVoucherVATVoucher1ByChangingExpiryDateAfterConsumingFullQuantityInSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
		select1stRow_18thColumn.click();

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 2); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 2 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(1000);
		click(newReferenceTxt);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch has already been used in another voucher";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Fifty Ninth Scenario Starts : Try to Consume Batch Quantity Through Link Which is Already Fully Consumed in Other Outward Document

	public boolean checkSavingPurchaseVoucherVATVoucher1ForFiftyNinthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkBatchPopupIsDisplayingWithValuesInSalesInvoiceVATVoucher1AfterSavingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("60");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("60");
		enter_FQ.sendKeys(Keys.TAB);
		
		//errorMessage.clear();
		try { 
			if(errorMessage.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
		} catch (Exception e) {
			
			System.err.println("errorMessage is NoteDisplyed");
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher1ByConsumingFullQuantityAfterSavingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "120.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "120.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSavingPurchaseReturnsVoucher1AfterConsumingFullQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);
		System.out.println("******** Error Message : "+actMessage     +"  value expected  "+expMessage);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	










	// Sixtieth Scenario Starts : Try to Consume Batch Quantity Through Link Which is Already Fully Consumed in suspended Outward Document

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSixtiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingPurchaseReturnsVoucher1AfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		} 
	}	








	public boolean checkReSavingSalesInvoiceVATVoucherAfterConsumingFullQuantityInPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	// Sixty One Scenario Starts : Try to Consume Batch Quantity Through Link, By Suspending and Resaving linked Document and Loading Link Twice in New link Document

	public boolean checkSuspendingPurchaseReturnsVoucher1ForSixtiethOneScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingPurchaseReturnsVoucher2AfterSuspendingPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return false;
		}
	}	







	public boolean checkReSavingPurchaseReturnsVoucher1AfterConsumingFullQuantityInPurchaseReturnsVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Sixty Two Scenario Starts : Try to Consume Batch Quantity Through Link Which is Already Partially Consumed in Other Outward Document

	public boolean checkDeletingPurchaseReturnsVoucher1And2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("2")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage1 ="Voucher Deleted Successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		Thread.sleep(2000);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		previousBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage2 ="Voucher Deleted Successfully";
		String actMessage2 = checkValidationMessage(expMessage2);

		Thread.sleep(2000);

		if(actMessage1.equalsIgnoreCase(expMessage1) && actMessage2.equalsIgnoreCase(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	public boolean checkDeletingSalesInvoiceVATVoucher1ForSavingWithConsumingPartially() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage ="Voucher Deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByConsumingPartialQuantity60() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("30");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("30");
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("15");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "60.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "60.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkSavingPurchaseReturnsVoucher1AfterPartiallyConsumingQuantityInSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);
		System.out.println("******** Error Message : "+actMessage     +"  value expected  "+expMessage);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	







	@FindBy (xpath="//div[@id='DocumentDiv']/div[10]/ul/li/i[2]")
	private static WebElement designWorkflowSalesInvoiceExpandBtn;

	@FindBy (xpath="//span[@class='DragLi ui-draggable ui-draggable-handle'][contains(text(),'Sales Invoice N')]")
	private static WebElement designWorkflowSalesInvoiceN;

	@FindBy(xpath="//div[contains(text(),'Purchases Voucher VAT')]")
	private static WebElement draggedPurchasesVouchersVAT;

	@FindBy(xpath="//div[contains(text(),'Sales Invoice N')]")
	private static WebElement draggedSalesInvoiceN;

	@FindBy(xpath="/html[1]/body[1]/ul[1]/li[1]")
	private static WebElement draggedlinkBtn; 

	@FindBy(xpath="/html[1]/body[1]/ul[1]/li[2]")
	private static WebElement draggeddeleteBtn; 

	@FindBy(xpath="//*[@id='line5']")
	private static WebElement link5TO6;

	@FindBy(xpath="//select[@id='DDLLinkValue']")
	private static WebElement DefinitionLinkValueDropdown;

	@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/ul/li/label")
	private static List<WebElement> definitionTabChkBoxNameList;

	@FindBy(xpath="//*[@id='WorkflowCheckboxDiv']/div/ul/li/input")
	private static List<WebElement> definitionTabChkBoxList;

	@FindBy(xpath="//div[@class='col-lg-12']//button[@class='Fbutton'][contains(text(),'Ok')]")
	private static WebElement OkBtn; 

	@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
	private static WebElement CancelBtn; 

	@FindBy(xpath="//*[@id='idNode_5']/div[2]/div[1]/div/div/div[2]")
	private static WebElement linkNode5Left;

	@FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
	private static WebElement workFlowSaveBtn; 


	// Sixty Three Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming partial Quantities

	public boolean checkAddingLinkFromPurchaseVoucherVATToSalesInvoiceN() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowSalesInvoiceN));
		designWorkflowSalesInvoiceN.click();

		getAction().dragAndDropBy(designWorkflowSalesInvoiceN, 950, -350).build().perform();

		Thread.sleep(2000);

		getAction().contextClick(draggedPurchasesVouchersVAT).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(draggedlinkBtn));
		draggedlinkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(linkNode5Left));
		linkNode5Left.click();

		Thread.sleep(2000);

		//getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link5TO6));
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link5TO6));
		//link5TO6.click();
		//ClickUsingJs(link5TO6);
		//click(link5TO6);
		moveToElement(link5TO6);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DefinitionLinkValueDropdown));
		Select s=new Select(DefinitionLinkValueDropdown);
		s.selectByVisibleText("Quantity");

		Thread.sleep(1000);

		int definitionTabChkBoxNameListCount = definitionTabChkBoxNameList.size();

		for(int i=0;i<definitionTabChkBoxNameListCount;i++)
		{
			String data = definitionTabChkBoxNameList.get(i).getText();
			if(data.equalsIgnoreCase("Warehouse") && definitionTabChkBoxList.get(i).isSelected()==false)
			{
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		for(int i=0;i<definitionTabChkBoxNameListCount;i++)
		{
			String data = definitionTabChkBoxNameList.get(i).getText();
			if(data.equalsIgnoreCase("Item") && definitionTabChkBoxList.get(i).isSelected()==false)
			{
				definitionTabChkBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowSaveBtn));
		workFlowSaveBtn.click();

		String expMessage="WorkFlow Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		Thread.sleep(2000);
		
		checkLogoutAndLogin();

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			return true;
		}
		else
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			return false;
		}
	}







	public boolean checkDeletingSalesInvoiceVATVoucher1AfterAddingSalesInvoiceNInDesignWorkFlow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage ="Voucher Deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	public boolean checkSavingPurchaseVoucherVATVoucher1AfterAddingLinkFromPurchasesVoucherVATToSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();
		
		getWaitForAlert();
		getAlert().accept();
		
		checkValidationMessage("");
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}





	@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td")
	private static List<WebElement> workflowTableList;

	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingPartialQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys("5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 60.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	







	// Sixty Fourth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming partial Quantities,Suspending and Resaving one Link Document

	public boolean checkDeletingSalesInvoiceNVoucher1ForSixtyFourthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage ="Voucher Deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSuspendingPurchaseReturnsVoucher1AfterDeletingSalesInvoiceNVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}






	@FindBy (xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
	private static WebElement pendingPurchaseVoucherVATLink;

	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowByConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+currentDate+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	










	public boolean checkResavingPurchaseReturnsVoucher1AfterConsumingFullQuantityInSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(1000);
		click(newReferenceTxt);
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Sixty Fifth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming partial Quantities and Suspending and Resaving Other Than Link Document

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSixtyFifthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkBatchPopupValuesInDeliveryNoteVoucher1AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesVoucher));
		deliveryNotesVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		select1stRow_6thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys("60");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingDeliveryNoteVoucher1AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="60.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 5); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "60.00";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "60.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		String actBatchNo=select1stRow_10thColumn.getText();
		String expBatchNo="BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSuspendingDeliveryNotesVoucher1FromEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);
		
		
		
		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(
		 * previousBtn)); previousBtn.click();
		 */
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesVoucher));
		deliveryNotesVoucher.click();

		Thread.sleep(2000);
		
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}
		
		Thread.sleep(1000);
		
		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expEntrySuspendMessage1 = "Voucher saved successfully";
		String expEntrySuspendMessage2 = " : 1";
		String actEntrySuspendMessage = checkValidationMessage(expEntrySuspendMessage2);
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actEntrySuspendStatus = grid_1stRowSuspendStatus.getText();
		String expEntrySuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actEntrySuspendStatus+"  Expected  "+expEntrySuspendStatus);

		Thread.sleep(2000);

		if(actEntrySuspendMessage.startsWith(expEntrySuspendMessage1) && actEntrySuspendMessage.endsWith(expEntrySuspendMessage2) 
				&& actEntrySuspendStatus.equalsIgnoreCase(expEntrySuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingPartialQuantityAfterSuspendingDeliveryNotesVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys("2");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	










	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterSavingPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actQuantity = select1stRow_8thColumn.getText();
		String expQuantity = "8.00"; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Quantity      : "+actQuantity     +"  value expected  "+expQuantity);
		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actQuantity.equalsIgnoreCase(expQuantity) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	







	public boolean checkResavingDeliveryNotesVoucher1AfterConsumingFullQuantityInSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deliveryNotesVoucher));
		deliveryNotesVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}












	// Sixty Sixth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming Full Quantities

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSixtySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingFullQuantityAfterSavingPurchaseVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	








	@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']")
	private static WebElement WorkflowTable;

	public boolean checkLoadingWorkflowInSalesInvoiceNVoucher1AfterFullConsumingInPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		boolean actWorkflowIsEmpty = WorkflowTable.getText().isEmpty();
		boolean expWorkflowIsEmpty = true;

		System.out.println("Workflow Table isEmpty : "+actWorkflowIsEmpty+"  Value Expected  "+expWorkflowIsEmpty);

		if (actWorkflowIsEmpty==false) 
		{
			ArrayList<String> workflowList = new ArrayList<String>();

			int count1 = workflowTableList.size();

			for (int i = 0; i < count1; i++) 
			{
				String data = workflowTableList.get(i).getText();
				if (data.isEmpty()==false) 
				{
					System.err.println(data);
					workflowList.add(data);
				}
			}
			System.err.println(workflowList);
		}

		if(actWorkflowIsEmpty==expWorkflowIsEmpty) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	










	// Sixty Seventh Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents With Consuming Full Quantities and Suspending Resaving One Link Document

	public boolean checkSuspendingPurchaseReturnsVoucher1ForSixtySeventhScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		//Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterSuspendingPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actQuantity = select1stRow_8thColumn.getText();
		String expQuantity = "10.00"; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Quantity      : "+actQuantity     +"  value expected  "+expQuantity);
		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actQuantity.equalsIgnoreCase(expQuantity) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	








	public boolean checkResavingPurchaseReturnsVoucher1AfterConsumingQuantityInSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	@FindBy(xpath="//a[contains(text(),'Properties')]")
	private static WebElement propertiesTab; 

	@FindBy(xpath="//input[@id='chkDoNotClubCommonBase']")
	private static WebElement doNotClubWithCommonBaseChkbox; 

	@FindBy(xpath="//*[@id='line1']")
	private static WebElement link1TO2; 

	@FindBy(xpath="//span[@id='btnClear']//i[@class='icon-save icon-font6']")
	private static WebElement designWorkFlowSaveBtn; 

	// Sixty Eight Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents By Using Do Not Club With Common Base Option, With Consuming partial Quantities

	public boolean checkEnablingDoNotClubWithCommonBaseFromPurchaseVoucherVATToSalesInvoiceN() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsMenu));
		settingsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkflowbtn));
		designWorkflowbtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workflowNameTxt));
		workflowNameTxt.click();
		workflowNameTxt.sendKeys("PurchasesFlow");
		Thread.sleep(2000);
		workflowNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(link1TO2));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(link1TO2));
		getAction().moveToElement(link1TO2).click().build().perform();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(propertiesTab));
		propertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotClubWithCommonBaseChkbox));

		if(doNotClubWithCommonBaseChkbox.isSelected()==false)
		{
			doNotClubWithCommonBaseChkbox.click();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(OkBtn));
		OkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(designWorkFlowSaveBtn));
		designWorkFlowSaveBtn.click();

		String expMessage="WorkFlow Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		Thread.sleep(2000);
		
		checkLogoutAndLogin();

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			return true;
		}
		else
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();*/
			return false;
		}
	}









	public boolean checkSavingPurchaseVoucherVATVoucher1AfterEnablingDoNotClubWithCommonBase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSavingPurchaseReturnsVoucher1ByConsumingPartialQuantityAfterSavingPurchaseVoucherVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpeningMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_7thColumn));
		select1stRow_7thColumn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END);
		enter_Quantity.sendKeys(Keys.SHIFT, Keys.HOME);
		enter_Quantity.sendKeys("5");
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterConsumingPartiallyQuantityInPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		if (validationConfirmationMessage.getText().isEmpty()==false) 
		{
			checkValidationMessage("Debit and Credit accounts cannot be same");
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage="Batch is not available. It may have been consumed elsewhere.";
		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);
		System.out.println("Error Message          : "+actMessage      +"  value expected  "+expMessage);	

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	









	// Sixty Ninth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents By Using Do Not Club With Common Base Option,With Consuming Full Quantities

	public boolean checkDeletingPurchaseReturnsVoucher1ForSixtyNinthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
		new_DeleteBtn.click();

		getWaitForAlert();
		Thread.sleep(2000);
		getAlert().accept();

		String expMessage ="Voucher Deleted Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}






	public boolean checkReSavingPurchaseReturnsVoucher1ByLoadingWorkFlow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		Select workflow = new Select(workFlowDropdown);
		workflow.selectByVisibleText("Purchases Voucher VAT");

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceNVoucher1ByLoadingFromWorkflowAfterConsumingFullQuantityInPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("NDT52:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}


		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, NDT52:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(2000);

		if (validationConfirmationMessage.getText().isEmpty()==false) 
		{
			checkValidationMessage("Debit and Credit accounts cannot be same");
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage="Batch is not available. It may have been consumed elsewhere.";
		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);
		System.out.println("Error Message          : "+actMessage      +"  value expected  "+expMessage);	

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	









	// Seventieth Scenario Starts : Try to Consume Batch Quantity By Loading Link in Two Link Documents By Using Do Not Club With Common Base Option,With Consuming Full Quantities and Suspending Resaving One Link Document

	public boolean checkSuspendingPurchaseReturnsVoucher1ForSeventiethScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		//Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	public boolean checkSavingSalesInvoiceNVoucher1ByConvertingPendingVoucherAfterSuspendingPurchaseReturns() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceNvoucher));
		salesInvoiceNvoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		pendingPurchaseVoucherVATLink.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingPurchaseVoucherVATLink));
		convertBtn.click();

		checkValidationMessage("Link data loaded");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		String actQuantity = select1stRow_8thColumn.getText();
		String expQuantity = "10.00"; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actRow1Batchno = select1stRow_13thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Quantity      : "+actQuantity     +"  value expected  "+expQuantity);
		System.out.println("******** Row1 Batch No : "+actRow1Batchno  +"  value expected  "+expRow1Batchno);

		if(actQuantity.equalsIgnoreCase(expQuantity) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	








	public boolean checkResavingPurchaseReturnsVoucher1AfterConsumingQuantityInSalesInvoiceNWithDoNotConsolidateWithCommonBase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
		purchaseReturnsVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Seventy One Scenario Starts : try to Consume batch Quantity More Than Available Quantity in outward Document through Link Between Sales Order and Sales Invoice

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSeventyOneScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	public boolean checkSavingSalesOrderVoucher1AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("60");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("60");
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		select1stRow_10thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingSalesOrderVoucher2AfterSavingPurchaseVoucherVAT1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("60");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("60");
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		select1stRow_10thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(1000);

		/*checkValidationMessage("This Transaction will make the Stock Negative");*/
		/*
		HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 2");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);

		Thread.sleep(2000);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAfterSavingSalesOrderDoc1AndDoc2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00, 2, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
		select2ndRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		select2ndRow_19thColumn.click();

		Thread.sleep(2000);

		boolean actRow2BatchPopupIsEmpty = batchPopupTable.getText().isEmpty();
		boolean expRow2BatchPopupIsEmpty = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		boolean actRow2Batchno = select2ndRow_19thColumn.getText().isEmpty();
		boolean expRow2Batchno = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage = "Provide data for mandatory fields Batch";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("Row 2 Batch Popup isEmpty : "+actRow2BatchPopupIsEmpty  +"  value expected  "+expRow2BatchPopupIsEmpty);
		System.out.println("******** Row2 Batch No    : "+actRow2Batchno            +"  value expected  "+expRow2Batchno);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actRow2BatchPopupIsEmpty==expRow2BatchPopupIsEmpty
				&& actRow2Batchno==expRow2Batchno && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	








	// Seventy Two Scenario Starts : try to Consume batch Quantity More Than Available Quantity in outward Document through Loading Two Base Vouchers in two Link Vouchers

	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAndSelectingSalesOrderDoc1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00, 2, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("SalOrd:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}	







	public boolean checkBatchPopupInSalesInvoiceVATVoucher2ByLoadingFromWorkflowAndSelectingSalesOrderDoc2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("SalOrd:2")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		boolean actRow2BatchPopupIsEmpty = batchPopupTable.getText().isEmpty();
		boolean expRow2BatchPopupIsEmpty = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		boolean actRow1Batchno = select1stRow_19thColumn.getText().isEmpty();
		boolean expRow1Batchno = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		String expMessage = "Provide data for mandatory fields Batch";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("Row 2 Batch Popup isEmpty : "+actRow2BatchPopupIsEmpty  +"  value expected  "+expRow2BatchPopupIsEmpty);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow2BatchPopupIsEmpty==expRow2BatchPopupIsEmpty
				&& actRow1Batchno==expRow1Batchno && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	










	// Seventy Third Scenario Starts : try to Consume batch Quantity More Than Available Quantity in outward Document By Suspending and Resaving Link Voucher With Same Base Voucher

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSeventyThirdScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		//Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public boolean checkSavingSalesInvoiceVATVoucher2ByLoadingFromWorkflowAndSelectingSalesOrderDoc2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00, 120, 2, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("SalOrd:2")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "BATCH#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 2");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 2");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return false;
		}
	}	







	public boolean checkReSavingSalesInvoiceVATVoucherAfterSalesInvoiceVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}








	// Seventy Forth Scenario Starts : Try to Auto Load batch Details In Outward Document through Links by Enabling Input batch Even If Stock is Not Updated Option in Base Voucher Settings

	public boolean checkSavingPurchaseVoucherVATVoucher1ForSeventyForthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("Batch#PVAT1");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 5); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}







	@FindBy (xpath="//span[contains(text(),'Inventory Options')]")
	private static WebElement SettingsInventoryOptionsTab;


	public boolean checkEnablingInputBatchEvenIfStockIsNotUpdatedInSalesOrderVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException, AWTException
	{
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsInventoryOptionsTab));
		SettingsInventoryOptionsTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputBatchEvenIfStockNoyUpdatedChkbox));

		if (inputBatchEvenIfStockNoyUpdatedChkbox.isSelected()==false) 
		{
			inputBatchEvenIfStockNoyUpdatedChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);
		
		checkLogoutAndLogin();

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			Thread.sleep(1000);
			return true;
		}
		else
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			Thread.sleep(1000);
			return false;
		}
	}








	public boolean checkSavingSalesOrderVoucher1AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("60");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("60");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		try { 
			if(errorMessage.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
		} catch (Exception e) {
			
			System.err.println("errorMessage is NoteDisplyed");
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(4000);

		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			if (res_CloseBtn.isDisplayed()) 
			{
				res_CloseBtn.click();
			}
		} 
		catch (Exception e) 
		{
			System.out.println(e.getMessage());
		}
		
		

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				errorMessageCloseBtn.click();
				}

			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);	
			
		   
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingSalesOrderVoucher2AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys("Customer A");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("60");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("60");
		so_enter_FQTxt.sendKeys(Keys.TAB);
		
		try { 
			if(errorMessage.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
		} catch (Exception e) {
			
			System.err.println("errorMessage is NoteDisplyed");
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		if (res_CloseBtn.isDisplayed()) 
		{
			res_CloseBtn.click();
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		/*Thread.sleep(1000);

		HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 2");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 2");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		Thread.sleep(2000);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}









	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAfterSavingSalesOrderDoc1AndDoc2AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00, 2, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_3rdColumn));
		select2ndRow_3rdColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
		String actRow2Batchno = select2ndRow_19thColumn.getText();
		String expRow2Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("******** Row2 Batch No    : "+actRow2Batchno            +"  value expected  "+expRow2Batchno);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actRow2Batchno.equalsIgnoreCase(expRow2Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	








	// Seventy Fifth Scenario Starts : Try to Auto Load batch Details In Outward Document through Loading Two Base Vouchers in two Link Vouchers

	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAndSelectingSalesOrderDoc1AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00, 2, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("SalOrd:1")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		/*Thread.sleep(1000);

		HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}	







	public boolean checkBatchPopupInSalesInvoiceVATVoucher2ByLoadingFromWorkflowAndSelectingSalesOrderDoc2AfterEnablingInputBatchEvenIfStockIsNotUpdated() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("SalOrd:2")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);
		System.out.println("Error Message             : "+actMessage                +"  value expected  "+expMessage);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}	









	// Seventy Sixth Scenario Starts : Try to Auto Load batch Details In Outward Document through Loading Same Base Vouchers in two Link Vouchers by Suspending and Resaving Link one Voucher

	public boolean checkSuspendingSalesInvoiceVATVoucher1ForSeventySixthScenario() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");
		
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1) && actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public boolean checkSavingSalesInvoiceVATVoucher1ByLoadingFromWorkflowAndSelectingSalesOrderDoc2AfterSuspendingSalesInvoiceVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(3000);

		ArrayList<String> workflowList = new ArrayList<String>();

		int count1 = workflowTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = workflowTableList.get(i).getText();
			if (data.isEmpty()==false) 
			{
				System.err.println(data);
				workflowList.add(data);
			}
		}

		Thread.sleep(1000);

		DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
		Calendar cal=Calendar.getInstance();
		String currentDate=df.format(cal.getTime());

		System.out.println("Current Date : "+currentDate);

		String actWorkflowData = workflowList.toString();
		String expWorkflowData = "[1, SalOrd:1, "+getCurrentDateF3()+", BR COGS ITEM, 120.00, 120, 2, SalOrd:2, "+getCurrentDateF3()+", BR COGS ITEM, 120.00]";

		System.out.println(actWorkflowData);
		System.out.println(expWorkflowData);

		int count = workFlowVoucherNosList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = workFlowVoucherNosList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("SalOrd:2")) 
			{
				workFlowChkBoxList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("Dubai");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		select1stRow_3rdColumn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actRow1Batchno = select1stRow_19thColumn.getText();
		String expRow1Batchno = "Batch#PVAT1";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 2");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 2");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		System.out.println("******** Row1 Batch No    : "+actRow1Batchno            +"  value expected  "+expRow1Batchno);

		if(actWorkflowData.equalsIgnoreCase(expWorkflowData) && actRow1Batchno.equalsIgnoreCase(expRow1Batchno)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			return false;
		}
	}







	public boolean checkReSavingSalesInvoiceVATVoucher1AfterSalesInvoiceVoucher2BySelectingSalesOrderVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage = "Batch is not available. It may have been consumed elsewhere.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}










	// Sudheer

	public boolean checkSavingPurchaseVoucherVATWithCurrentdate() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		String ScreenOpenedMessage=checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("BatchAuthorise");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="BatchAuthorise";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}

	}

	@FindBy(xpath="//*[@id='16']/div/span")
	private static WebElement  settingsmenuBtn;

	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	private static WebElement  configureTransactionBtn;

	@FindBy(xpath="//*[@id='68']/span")
	private static WebElement  transactionAuthorizationBtn;

	@FindBy(xpath="//*[@id='txtDoc']")
	private static WebElement documentNameDropdown; 


	@FindBy(xpath="//*[@id='id_menu_tree_Sales Invoices']/a/i")
	private static WebElement salesInvoicesExpandBtn; 


	@FindBy(xpath="//*[@id='id_menu_tree_Sales invoice VAT']/a/span")
	private static WebElement salesInvoiceVAT; 

	@FindBy(xpath="//*[@id='id_menu_tree_Sales invoice VAT (1)']/a/span")
	private static WebElement salesInvoiceVAT1; 


	@FindBy(xpath="//*[@id='ctrlAuthorizationH']")
	private static WebElement nameTxt; 

	@FindBy(xpath="//*[@id='spnAddLevel']/i")
	private static WebElement addLevelBtn;

	@FindBy(xpath="//*[@id='txtDescription']")
	private static WebElement descriptionTxt; 

	@FindBy(xpath="//*[@id='chkConditionNotRequired']")
	private static WebElement conditionNotRequiredChkBox; 


	@FindBy(xpath="//*[@id='id_report_popup_ok']/i")
	private static WebElement definitionOkBtn;	

	@FindBy(xpath="//input[@id='chkInventory']")
	private static WebElement keepUnpostedInventoryChkBox;
	
	@FindBy(xpath="//input[@id='chkReservation']")
	private static WebElement keepUnpostedResevationChkBox;

	@FindBy(xpath="//*[@id='id_report_popup_body']/div[2]/div/div[1]/ul/li[2]/a/span")
	private static WebElement userSelectionTab;

	@FindBy(xpath="//*[@id='id_tblUserSelection_User']")
	private static WebElement userdropdown; 	

	@FindBy(xpath="//*[@id='id_tblUserSelection_col_1-1']")
	private static WebElement userrow1;

	@FindBy(xpath="//*[@id='id_tblUserSelection_User']")
	private static WebElement userDropdown;

	@FindBy(xpath="//*[@id='btnSaveAuthorization']")
	private static WebElement tranAuthSaveBtn;

	@FindBy(xpath="//*[@id='ulAuthBtns']/li[5]/span/i")
	private static WebElement tranAuthCancelBtn;

	@FindBy(xpath="//div[@id='divLevel1']//i[@class='icon-edit icon-font7']")
	private static WebElement Level1editBtn;

	public boolean checkAuthorisationOFSalesInvoiceDocumentWithoutEnablingInventoryOptionUnderkeepUnposted() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesExpandBtn));
		salesInvoicesExpandBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVAT));
		salesInvoiceVAT.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys("SalesVATAuthorise");

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addLevelBtn));
		addLevelBtn.click();

		Thread.sleep(2000);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys("Level1");
		Thread.sleep(1000);
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		boolean actConditionNotRequiredIsSelected = conditionNotRequiredChkBox.isSelected();
		boolean expConditionNotRequiredIsSelected = true;

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);

		if(keepUnpostedInventoryChkBox.isSelected()==true)
		{
			keepUnpostedInventoryChkBox.click();
		}

		boolean actkeepUnpostedInventoryChkBox = keepUnpostedInventoryChkBox.isSelected();
		boolean expkeepUnpostedInventoryChkBox = false;

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
		userSelectionTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
		userrow1.click();
		Select user = new Select(userDropdown);
		user.selectByVisibleText("UserAllOptions");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = "Authorization Flow saved successfully.";
		String actValidationMsg = checkValidationMessage(expValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected==expConditionNotRequiredIsSelected && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedInventoryChkBox==expkeepUnpostedInventoryChkBox)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return false;
		}


	}



	public boolean checkSalesInvoiceVAT1WithFutureDateAfterSavingAuthorisationOnSales() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		Thread.sleep(2000);
		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("100");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("20");
		enter_FQ.sendKeys(Keys.TAB);
		
		try { 
			if(errorMessage.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
		} catch (Exception e) {
			
			System.err.println("errorMessage is NoteDisplyed");
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="BATCHAUTHORISE";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCHAUTHORISE";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}

	}





	public boolean checkSavingSalesInvoiceVAT1WithCurrentDateAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("100");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("20");
		enter_FQ.sendKeys(Keys.TAB);
		
		try { 
			if(errorMessage.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
		} catch (Exception e) {
			
			System.err.println("errorMessage is NoteDisplyed");
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();
			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
	private static List<WebElement> voucherGridDocNo;

	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
	private static List<WebElement> voucherGridSuspendStatus;

	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[13]")
	private static List<WebElement> voucherGridAuthorizationStatus;

	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[1]/td[13]")
	private static WebElement voucherGridRow1AuthorizationStatus;

	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr[2]/td[13]")
	private static WebElement voucherGridRow2AuthorizationStatus;

	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
	private static List<WebElement> voucherGridCheckBoxList;


	@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[2]/a")
	private static WebElement  pendingAuthorizationPurchases;

	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  voucherHomeRow1ChkBox;

	@FindBy(xpath="//textarea[@id='id_transaction_authorization_remark']")
	private static WebElement  authorizePopupTextArea;

	@FindBy(xpath="//input[@id='id_transaction_authorization_remark_popup_ok']")
	private static WebElement  authorizePopupOkBtn;

	@FindBy(xpath="//div[@id='id_transaction_homeview_authorization_remarkpopup_container']//input[2]")
	private static WebElement  authorizePopupCancelBtn;

	@FindBy(xpath="//*[@id='id_transaction_viewcontainer']/li[1]/a")
	private static WebElement  homePageAllVouchersView;

	public boolean checkLoginToAuthoriseUserForSalesAuthorisation() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="useralloptions";

		String pawslt="12345";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		
		String compname = "Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List<WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :" + cqSize);

		int i;

		for (i = 0; i < elementCount.size(); i++) {

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if (optionName.toUpperCase().startsWith(compname.toUpperCase())) {
				System.out.println("q" + elementCount.get(i).getText());
				elementCount.get(i).click();
			}

		}
		 

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = 1;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherGridRow1AuthorizationStatus));
		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);

		if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return false;
		}
	}

	

	public boolean checkLoginToSuperUserAndSavingSalesInvioceVAT2AfterAuthorisation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		//Reuse

		if (checkSavingSalesInvoiceVAT1WithCurrentDateAfterBatchConsumed()==true)
		{

			System.err.println(" Test Pass: Batch pop displayed Blank");
			return true;
		}
		else
		{

			System.err.println(" Test FAIL: Batch pop displayed Blank");
			return true;
		}
	}

	



	public boolean checkSuspendingVoucherInSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editBtn));
		editBtn.click();

		checkValidationMessage("Voucher Loaded Sucessfully");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
		new_SuspendBtn.click();

		String expSuspendMessage1="Voucher saved successfully";
		String expSuspendMessage2="1";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage1);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actSuspendMessage.startsWith(expSuspendMessage1)
				&& actSuspendMessage.endsWith(expSuspendMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			System.out.println(" Test Pass: Voucher Susupended Succesfully");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			System.out.println(" Test FAIL: Voucher Susupended Succesfully");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}



	
	

	public boolean checkSavingSalesVoucher2AfterSuspending1stVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 1); 
		String DocDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 1 Day :: " + DocDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.HOME);
		dateTxt.sendKeys(DocDate, Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);
		customerAccountTxt.sendKeys("Customer A");
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
		pvWarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
		enter_AQ.sendKeys("100");
		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys("20");
		enter_FQ.sendKeys(Keys.TAB);
		
		try { 
			if(errorMessage.isDisplayed())
			{
				errorMessageCloseBtn.click();
			}
			
		} catch (Exception e) {
			
			System.err.println("errorMessage is NoteDisplyed");
			
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
		String act1stRowBatchNo=batchTable1stRow1stCol.getText();
		String exp1stRowBatchNo="BATCHAUTHORISE";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
		String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
		String exp1stRowBaseQuantity="120.00";

		Calendar exp=Calendar.getInstance();
		exp.add(Calendar.DATE, 3); 
		String expiryDate = df.format(exp.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow3rdCol));
		String act1stRowExpiryDate = batchTable1stRow3rdCol.getText();
		String exp1stRowExpiryDate = expiryDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
		String act1stRowRate = batchTable1stRow4thCol.getText();
		String exp1stRowRate = "0.88";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
		String act1stRowAdjQty = batchTable1stRow5thCol.getText();
		String exp1stRowAdjQty = "0";//0

		Calendar pre=Calendar.getInstance();
		String presentDate = df.format(pre.getTime());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow6thCol));
		String act1stRowPurchaseDate = batchTable1stRow6thCol.getText();
		String exp1stRowPurchaseDate = presentDate;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch No                : "+act1stRowBatchNo          +"  value expected  "+exp1stRowBatchNo);
		System.out.println("Base Quantity           : "+act1stRowBaseQuantity     +"  value expected  "+exp1stRowBaseQuantity);
		System.out.println("Expiry Date             : "+act1stRowExpiryDate       +"  value expected  "+exp1stRowExpiryDate);
		System.out.println("Rate                    : "+act1stRowRate             +"  value expected  "+exp1stRowRate);
		System.out.println("Adj Qty                 : "+act1stRowAdjQty           +"  value expected  "+exp1stRowAdjQty);
		System.out.println("Purchase Date           : "+act1stRowPurchaseDate     +"  value expected  "+exp1stRowPurchaseDate);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCHAUTHORISE";

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity)
				&& act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) && act1stRowRate.equalsIgnoreCase(exp1stRowRate)
				&& act1stRowAdjQty.equalsIgnoreCase(exp1stRowAdjQty) && act1stRowPurchaseDate.equalsIgnoreCase(exp1stRowPurchaseDate)
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}

	}


	public boolean checkResavingSales1stVoucherAfterBatchConsumedIn2ndVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expSuspendMessage ="Batch is not available. It may have been consumed elsewhere.";
		String actSuspendMessage = checkValidationMessage(expSuspendMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();

		if(actSuspendMessage.equalsIgnoreCase(expSuspendMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}




	public boolean checkDeletingPurchaseVoucherVATAfterBatchConsumedInSalesInvoiceVat() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();
		
		Thread.sleep(1000);
		click(voucherHomeRow1ChkBox);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();
		getAlert().accept();

		String expMessage = "VoucherNo - 1: Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}



	@FindBy(xpath="//tbody/tr[@id='trRender_1']/td[2]/input[1]")
	private static WebElement voucherHomwPageRow1ChkBox;



	public boolean checkSuspendingVoucherInPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Batch has already been used in another voucher";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);


		if(actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}



	public boolean checkChangingQuantityInPurchaseVoucherAfterBatchConsumed() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}


		checkValidationMessage("Voucher Loaded Successfully");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("5");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1="Batch has already been used in another voucher";
		String actMessage=checkValidationMessage(expMessage1);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getWaitForAlert();

			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();

			getAlert().accept();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	@FindBy(xpath="//input[@id='HeaderChkBox']")
	private static WebElement voucherHomePAgeHeaderAllChkbox;


	public boolean checkDeletingVoucherInSalesInvoiceVATWhenStatusInPending() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomePAgeHeaderAllChkbox));
		voucherHomePAgeHeaderAllChkbox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();

		getAlert().accept();

		String expDeleteMessage = "VoucherNo - 2: Voucher deleted Successfully";
		String expDeleteMessage1 = "VoucherNo - 1: Voucher deleted Successfully";
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);

		if( actDeleteMessage.startsWith(expDeleteMessage) && 
				actDeleteMessage.endsWith(expDeleteMessage1)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public boolean checkEnablingInventoryoptionUnderkeepUnpostedInTransdactionAuthorisationOfSalesType() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoicesExpandBtn));
		salesInvoicesExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVAT1));
		salesInvoiceVAT1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys("SalesVATAuthorise");

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(5999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
		Level1editBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		boolean actConditionNotRequiredIsSelected = conditionNotRequiredChkBox.isSelected();
		boolean expConditionNotRequiredIsSelected = true;

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);

		if(keepUnpostedInventoryChkBox.isSelected()==false)
		{
			keepUnpostedInventoryChkBox.click();
		}

		boolean actkeepUnpostedInventoryChkBox = keepUnpostedInventoryChkBox.isSelected();
		boolean expkeepUnpostedInventoryChkBox = true;

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = "Authorization Flow saved successfully.";
		String actValidationMsg = checkValidationMessage(expValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected==expConditionNotRequiredIsSelected && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedInventoryChkBox==expkeepUnpostedInventoryChkBox)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return false;
		}
	}


	

	public boolean checkSavingVoucherinSalesInvoiceVATAfterEnablingInventoryOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);

		if (checkSalesInvoiceVAT1WithFutureDateAfterSavingAuthorisationOnSales()==true) 
		{
			System.out.println(" Test PasS: Voucher is saved in Sales With Full Consumption ");
			return true;
		}
		else 
		{
			System.out.println(" Test FAIL: Voucher is saved in Sales With Full Consumption ");
			return false;
		}
	}



	public boolean checkSavingSalesINvoiceVAT2AfterFullBatchConsumedIn1stVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingSalesVoucher2AfterSuspending1stVoucher()==true) 
		{

			System.out.println(" Test PasS: Voucher2 is saved in Sales With Full Consumption  ");
			return true;
		}
		else 
		{
			System.out.println(" Test FAIL: Voucher is saved in Sales With Full Consumption ");
			return false;
		}

	}


	
	
	public boolean checkLoginToUserAllOptionsToAuthoriseSalesVouchers1() throws InterruptedException
	{ 
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="useralloptions";

		String pawslt="12345";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}

		}


		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();


		Thread.sleep(3999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = 3;

		ArrayList<String>voucherGridDocNocount=new ArrayList<>();
		for (int j = 0; j < voucherGridDocNoCount; j++) 
		{
			String data=voucherGridDocNo.get(j).getText();
			if (data.equalsIgnoreCase("1"))
			{
				voucherGridCheckBoxList.get(j).click();
			}
		}

		Thread.sleep(3000);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		String actAuthorizationStatus2 = voucherGridRow2AuthorizationStatus.getText();
		String expAuthorizationStatus2= "Pending";

		Thread.sleep(2999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		Thread.sleep(2999);

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
		System.out.println("AuthorizationStatus2       : "+actAuthorizationStatus2       +" Value Expected : "+expAuthorizationStatus2);

		if( actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) && 
				actAuthorizationStatus2.equalsIgnoreCase(expAuthorizationStatus2))
		{
			System.out.println("Test Pass : Authorized Succesfully");

			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");

			return false;
		}

	}

	public boolean chechAuthoriseVoucher2AfterAuthorisation1stVoucher() throws InterruptedException
	{
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = 1;

		System.out.println("actSavedVouchersCount : "+actSavedVouchersCount +" Value Exp : "+expSavedVouchersCount);

		Thread.sleep(4999);
		System.out.println(" One Voucher is Authorised and Secound to be selected ");

		ArrayList<String>voucherGridDocNocount=new ArrayList<>();
		for (int j = 0; j < voucherGridDocNoCount; j++) 
		{
			String data=voucherGridDocNo.get(j).getText();
			if (data.equalsIgnoreCase("2"))
			{
				voucherGridCheckBoxList.get(j).click();
			}
		}

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		Thread.sleep(2000);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		Thread.sleep(2000);

		int actSavedVouchersCountAfterAuthorisation = voucherGridDocNoCount-1;
		int expSavedVouchersCountAfterAuthorisation = 1;

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);
		System.out.println("AfterAuthorisation        : "+actSavedVouchersCountAfterAuthorisation  +" Value Expected : "+expSavedVouchersCountAfterAuthorisation);

		if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) 
				&& actSavedVouchersCountAfterAuthorisation==expSavedVouchersCountAfterAuthorisation)
		{
			System.out.println("Test Pass : Voucher Can not be Authorise ");

			return true;
		}
		else
		{
			System.out.println("Test Fail : Voucher Can not be Authorise ");

			return false;
		}
	}

	
	
	


	public boolean checkLogintoSuperUseAndSavingSalesInvoice2After1stVoucherAuthorised() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkLoginToSuperUserAndSavingSalesInvioceVAT2AfterAuthorisation()==true) 
		{
			System.err.println(" Test Pass: After Authorisation Batch is not displaying again to consume ");
			return true;
		} 
		else 
		{
			System.err.println(" Test FAIL: After Authorisation Batch is  displaying again to consume ");
			return false;
		}
	}


	
	
	

	public boolean checkDeletingVoucherInSalesInvoiceWithAuthorisationStatusPending() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("2")) 
			{
				voucherGridCheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		getWaitForAlert();

		getAlert().accept();

		String ExpMessage="VoucherNo - 2: Voucher deleted Successfully";
		String actMessage=checkValidationMessage(ExpMessage);

		if(actMessage.equalsIgnoreCase(ExpMessage) ) 
		{
			System.out.println(" Test PASS: Vocuher deleted successfully from home page ");
			return true;
		}
		else
		{
			System.out.println(" Test FAIL: Vocuher deleted successfully from home page ");
			return false;
		}
	}
	
	
	


	public boolean checkSuspendingSalesVoucher1AfterAuthorisation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);

		homePageAllVouchersView.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String ExpMessage="Voucher Suspended Successfully";
		String actMessage=checkValidationMessage(ExpMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if (actMessage.equalsIgnoreCase(ExpMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			System.out.println(" Test Pass : Voucher Suspended ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;

		} 
		else 
		{
			System.out.println(" Test Fail : Voucher Suspended ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	
	
	

	public boolean checkSavingVoucherInSalesInvoice2AfterSusoendingVocher1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingSalesVoucher2AfterSuspending1stVoucher()==true) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}
	
	
	
	
	

	public boolean checkResavingSalesInvoice1VoucherAfterBatchConsumedinVoucher2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
			}
		}

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();
		
		//Thread.sleep(2000);

		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	
	
	
	

	public boolean checkDeletingPurchasVatVoucherAfterBatchConsumedinSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkDeletingPurchaseVoucherVATAfterBatchConsumedInSalesInvoiceVat()==true)
		{
			return true;
		} 
		else
		{
			return false;
		}
	}

	
	
	
	
	
	public boolean checkSuspendingPurchasVatVoucherAfterBatchConsumedinSalesInvoice() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSuspendingVoucherInPurchaseVoucherVAT()==true)
		{
			return true;
		} 
		else
		{
			return false;
		}
	}
	
	
	
	
	


	public boolean checkChangingQunatityInPurchaseVoucherAfterConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkChangingQuantityInPurchaseVoucherAfterBatchConsumed()==true)
		{
			return true;
		} 
		else
		{
			return false;
		}
	}
	
	
	
	


	//Scenarios With Reservations	
	
	@FindBy(xpath = "//*[@id='1']/div/span")
	public static WebElement homeMenu;

	public boolean checkEraseAllDATA() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";
		
		Thread.sleep(3000);
		prongHornExit();
		Thread.sleep(12000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
		dataMangementMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
		eraseAll.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
		eraseTranscationsRadio.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
		eraseAllOkBtn.click();

		if(getIsAlertPresent())
		{
			getWaitForAlert();

			getAlert().accept();
		}

		String expValidationMsg="Data deleted successfully.";

		String actValidationMsg=checkValidationMessage(expValidationMsg);
		
		System.out.println("************************************* checkEraseAllTransactions  *********************************");
		System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		//Thread.sleep(3000);
		
		Thread.sleep(3000);
		prongHornOn();
		Thread.sleep(12000);

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(7000);

		String actUserInfo1=userNameDisplay.getText();

		System.out.println("User Info  : "+actUserInfo1);

		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt1=companyName.getText();
		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
		System.out.println("company name  :  "+ getLoginCompanyName1);
		companyLogo.click();

		String expUserInfo1           ="SU";
		String expLoginCompanyName1   ="Automation Options ";

		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);

		if (actValidationMsg.equalsIgnoreCase(expValidationMsg)&& actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
		{
			return true;
		}
		else 
		{
			return false;
		}
	}

	
	
	

	public boolean checkSavingPurchaseVoucherVATForReservation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingPurchaseVoucherVATWithCurrentdate()==true) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	



	@FindBy(xpath="//*[@id='140']/span")
	private static WebElement  inventoryTransactionsSalesMenu; 

	@FindBy(xpath="//span[contains(text(),'Inventory Options')]")
	private static WebElement  inventoryTab;

	@FindBy(xpath="//select[@id='inventoryOpt_ReservationType']")
	private static WebElement  inventoryTabReservationTypeDrpddwn;

	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtn;

	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  settings_closeBtn;




	public boolean checkSalesOrderInReservationTypeIsManualAndinputBatchEvenIfStockNoyUpdatedChkbox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTab));
		inventoryTab.click();

		Thread.sleep(3000);

		Select s1=new Select(inventoryTabReservationTypeDrpddwn);
		s1.selectByVisibleText("Manual reservation");

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputBatchEvenIfStockNoyUpdatedChkbox));

		if (inputBatchEvenIfStockNoyUpdatedChkbox.isSelected()==true) 
		{
			inputBatchEvenIfStockNoyUpdatedChkbox.click();
		}

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		String expMessage1="Data saved successfully";
		String actMessage=checkValidationMessage(expMessage1);
		
		checkLogoutAndLogin();

		if (actMessage.equalsIgnoreCase(expMessage1)) 
		{
			System.out.println(" Test Pass: Setting Updated ");
			Thread.sleep(1999);
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Setting Updated ");
			Thread.sleep(1999);
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			return false;
		}
	}



	
	


	public boolean checkSalesOrderInReservationTypeIsManual() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTab));
		inventoryTab.click();

		Thread.sleep(3000);

		Select s1=new Select(inventoryTabReservationTypeDrpddwn);
		s1.selectByVisibleText("Manual reservation");

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		String expMessage1="Data saved successfully";
		String actMessage=checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage1)) 
		{
			System.out.println(" Test Pass: Setting Updated ");
			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Setting Updated ");
			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();
			return false;
		}
	}





	public boolean checkVoucherSavingMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage="Voucher saved successfully";
			String expErrorMessage1=": "+docno;

			System.out.println("SavingMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage+" "+expErrorMessage1);

			if(actErrorMessage.startsWith(expErrorMessage) && actErrorMessage.endsWith(expErrorMessage1))
			{
				try
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
					errorMessageCloseBtn.click();

					return  true;
				}
				catch(Exception ee)
				{
					return true;
				}	
			}
			else
			{
				return false;
			}	
		}
		catch(Exception e)
		{
			System.err.println("UNABLE TO COMPARE");
			return false;
		}
	}

	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td")
	private static List<WebElement> customerAccountListCount; 

	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement  pvWareHouseTxt;

	@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td")
	private static List<WebElement> pvwareHouseListCount;

	@FindBy(xpath="//input[@id='id_body_33554460']")
	private static WebElement so_enter_AQTxt;

	@FindBy(xpath="//input[@id='id_body_33554461']")
	private static WebElement so_enter_FQTxt;

	@FindBy(xpath="//li[@id='btnPickQuantity']")
	private static WebElement res_PickBtn;

	@FindBy(xpath="//div[contains(text(),'Discard')]")
	private static WebElement res_DiscardBtn;

	@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-ok icon-font6']")
	private static WebElement res_OkBtn;

	@FindBy(xpath="//div[@class='col-sm-12 footer_button_image']//span[@class='icon-close icon-font6']")
	private static WebElement res_CloseBtn;

	@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td")
	private  static List<WebElement> binReservationPopGridBody;

	@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td[5]")
	private  static List<WebElement> binReservationPopGridBin;

	@FindBy(xpath="//*[@id='Id_BinReservation_FGrid_body']/tr/td[3]")
	private  static List<WebElement> binReservationPopGridQtyToRelease;

	@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
	private static List<WebElement> itemListCount;

	@FindBy(xpath="//input[@id='id_body_24']")
	private static WebElement  enter_UnitTxt;



	public boolean checkSavingSalesOrderVoucher1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		System.out.println("*****************checkSavingSalesOrderVoucher1******************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher = enter_Quantity.getAttribute("value");

		String expQtyInVoucher = "120";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);

		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="120.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="120.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));

		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	="Reserved";

		System.out.println("ReserveColumn  : "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);


		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 3; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		
		expMessage.add("Saving in background.");
		expMessage.add("Voucher saved successfully : "+docno);
		expMessage.add("This Transaction will make the Stock Negative");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1) && 
				actReserveColumn.equalsIgnoreCase(expReserveColumn) && 
				actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))

		{
			return true;
		}
		else
		{
			return false;
		}
	}

	//Row1
	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-1']")
	private static WebElement res_LeftPanelWareHouseRow1; 

	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-2']")
	private static WebElement res_LeftPanelItemCodeRow1; 

	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-3']")
	private static WebElement res_LeftPanelItemNameRow1; 

	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-4']")
	private static WebElement res_LeftPanelItemQtyRow1; 

	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-5']")
	private static WebElement res_LeftPanelDueDateRow1; 

	@FindBy(xpath="//td[@id='Id_Reservation_FGrid_col_1-6']")
	private static WebElement res_LeftPanelBaseUnitRow1; 


	@FindBy(xpath="//label[@class='modal-title theme_background-color theme_color font-4']")
	private static WebElement stockReservationLabel;

	@FindBy(xpath="//button[@class='close icon-close icon-font6 theme_icon-color']")
	private static WebElement stockReservationHeaderCloseBtn; 

	// Left Panel Header


	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_1']")
	private static WebElement res_LeftPanelWareHouse; 

	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_2']")
	private static WebElement res_LeftPanelItemCode; 

	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_3']")
	private static WebElement res_LeftPanelItemName; 

	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_4']")
	private static WebElement res_LeftPanelItemQty; 

	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_5']")
	private static WebElement res_LeftPanelDueDate; 

	@FindBy(xpath="//th[@id='Id_Reservation_FGrid_control_heading_6']")
	private static WebElement res_LeftPanelBaseUnit; 


	// Batch Reservation Body Header

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_2']")
	private static WebElement batchRes_BodyQtyToReserve; 

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_3']")
	private static WebElement batchRes_BodyBatchNo;

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_4']")
	private static WebElement batchRes_BodyWareHouse; 

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_5']")
	private static WebElement batchRes_BodyAvailableQty;

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_6']")
	private static WebElement batchRes_BodyRelesaseQty;

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_7']")
	private static WebElement batchRes_BodyCurOrdResQty;

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_8']")
	private static WebElement batchRes_BodyMfgDate;

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_9']")
	private static WebElement batchRes_BodyExpDate;

	@FindBy(xpath="//th[@id='Id_BatchReservation_FGrid_control_heading_10']")
	private static WebElement batchRes_BodyBatchQty;

	// Body Grid
	// Row1

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-1']")
	private static WebElement batchRes_Row1Index; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-1']")  //td[@id='Id_BatchReservation_FGrid_col_1-2']
	private static WebElement batchRes_QtyToReserveRow1; 
	
	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-2']")  
	private static WebElement batchRes_QtyToReserveTxt; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-3']")
	private static WebElement batchRes_BatchNoRow1;

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-4']")
	private static WebElement batchRes_WareHouseRow1; 

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-5']")
	private static WebElement batchRes_AvailableQtyRow1;

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-6']")
	private static WebElement batchRes_RelesaseQtyRow1;

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-7']")
	private static WebElement batchRes_CurOrdResQtyRow1;

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-8']")
	private static WebElement batchRes_MfgDateRow1;

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-9']")
	private static WebElement batchRes_ExpDateRow1;

	@FindBy(xpath="//td[@id='Id_BatchReservation_FGrid_col_1-10']")
	private static WebElement batchRes_BatchQtyRow1;

	@FindBy(xpath="//input[@id='id_body_22']")
	private static WebElement enter_Reserve;


	public boolean checkResavingSalesOrderWithGraeterQtyThanInward() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(1999);

		/*
		 * getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(
		 * previousBtn)); previousBtn.click();
		 */
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);
		
		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Sucessfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys("120");
		so_enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);
		
		Thread.sleep(1000);

		//enter_Reserve.click();
		//enter_Reserve.sendKeys(Keys.SPACE);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));

		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	="Reserved";

		System.out.println("ReserveColumn  				: "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			System.out.println(" Test Pass: Sales Order Saved with larger qty ");
			return true;
		} 
		else 
		{
			System.out.println(" Test Fail: Sales Order Saved with larger qty ");
			return false;
		}
	}


	
	
	public boolean checkDeletingVoucherInsalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomePAgeHeaderAllChkbox));
		voucherHomePAgeHeaderAllChkbox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		Thread.sleep(2000);
		
		getWaitForAlert();

		getAlert().accept();

		String expDeleteMessage = "VoucherNo - 1: Voucher deleted Successfully";
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);

		if( actDeleteMessage.equalsIgnoreCase(expDeleteMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}



	public boolean checkSavingSalesOrderWithFullConsumptionInward() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingSalesOrderVoucher1()==true)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		} 
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}
	
	
	

	public boolean checkReservedPopAfterBatchFullConsumedinSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");

		String expQtyInVoucher="120";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		boolean actbatchRes_BodyQtyToReserve		=batchRes_QtyToReserveRow1.getText().isEmpty();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean expbatchRes_BodyQtyToReserve		=true;

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);

		if (actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve)
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			return true;
		} 
		else
		{
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
			res_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			return false;

		}
	}



	public boolean checkSuspendingVoucherInsalesOrder1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();


		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
		suspendBtn.click();

		String expMessage = "Voucher Suspended Successfully";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(2000);

		String actSuspendStatus = grid_1stRowSuspendStatus.getText();
		String expSuspendStatus = "True";

		System.out.println("Suspend Status After Suspending the Voucher From Entry Page : "+actSuspendStatus+"  Expected  "+expSuspendStatus);

		if(actMessage.equalsIgnoreCase(expMessage) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			
			return false;
		}
	}
	
	
	


	public boolean checkSavingSalesOrder2AfterSuspendingVoucher1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		
		System.out.println("*****************checkSavingSalesOrderVoucher2******************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher = enter_Quantity.getAttribute("value");

		String expQtyInVoucher = "120";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);

		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="120.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="120.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));

		String actReserveColumn	=select1stRow_8thColumn.getText();
		String expReserveColumn	="Reserved";

		System.out.println("ReserveColumn  : "+actReserveColumn	+" 	Value Expected : "+expReserveColumn);


		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();
		
		Thread.sleep(2000);

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 3; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		
		expMessage.add("Saving in background.");
		expMessage.add("Voucher saved successfully : "+docno);
		expMessage.add("This Transaction will make the Stock Negative");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1) && 
				actReserveColumn.equalsIgnoreCase(expReserveColumn) && 
				actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))

		{
			return true;
		}
		else
		{
			return false;
		}

		/*
		 * if (checkSavingSalesOrderVoucher1()==true) { return true; } else {
		 * errorMessageCloseBtn.click(); return false; }
		 */
	}

	
	
	
	public boolean checkResavingSalesOrder1AfterSavingVoucher2WithFullBatchConsumption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		
		
		  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt)); 
		  documentNumberTxt.click();
		  documentNumberTxt.sendKeys(Keys.CONTROL, "a");
		  Thread.sleep(1000);
		  documentNumberTxt.sendKeys(Keys.BACK_SPACE); 
		  Thread.sleep(1000);
		  enterText(documentNumberTxt, "1"); 
		  Thread.sleep(2000);
		  tab(documentNumberTxt);
		 
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		//previousBtn.click();

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(4000);

		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*boolean transactionNegativeMessage = true;

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			System.err.println(errorMessage.getText());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
			
			transactionNegativeMessage = false;
		}

		Thread.sleep(1000);*/
		
		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 1");
		
		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			return true;

		} 
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			Thread.sleep(2000);
			
			checkSuspendingVoucherInsalesOrder1();

			return false;
		}
	}




	public boolean checkLinksInSalesInvoiceAfterSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		//Thread.sleep(2000);
		
		//getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		Thread.sleep(2000);

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);
		
		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		System.err.println(" NUmber Of Rows Displayed  : "+workFlowVoucherNoListCount);
		
        ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
        
        for (int i = 0; i < workFlowVoucherNoListCount; i++) 
        {
            String data=workFlowVoucherNoList.get(i).getText();
            workFlowVoucherNoListarray.add(data);
        }
        
        String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
        String expworkFlowVoucherNoList="[SalOrd:1, SalOrd:2]";
        
        System.out.println("actworkFlowVoucherNoList   :"+actworkFlowVoucherNoList);
        System.out.println("expworkFlowVoucherNoList   :"+expworkFlowVoucherNoList);
        
        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
        
        if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList)) 
        {
        	return true;
		} 
        else 
        {
        	return false;
		}
	}

	
	
	
	

	public boolean checkSavingPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		Thread.sleep(2000);

		checkEraseAllDATA();

		Thread.sleep(2000);

		if (checkSavingPurchaseVoucherVATWithCurrentdate()==true) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	

	@FindBy(xpath="//input[@id='inventoryOpt_chkInputBatchEvenIfStockIsNotUpdated']")
	private static WebElement inputBatchEvenIfStockNoyUpdatedChkbox;

	public boolean checkEnableInputBatchEvenStockIsNotUpdatedOptionInSalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{
		Thread.sleep(2000);
		prongHornExit();
		Thread.sleep(10000);
		checkLogoutAndLoginWithoutPronghorn();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
		settingsBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTab));
		inventoryTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTabReservationTypeDrpddwn));
		Select s1=new Select(inventoryTabReservationTypeDrpddwn);
		s1.selectByVisibleText("Manual reservation");

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inputBatchEvenIfStockNoyUpdatedChkbox));
		if (inputBatchEvenIfStockNoyUpdatedChkbox.isSelected()==false)
		{
			inputBatchEvenIfStockNoyUpdatedChkbox.click();	
		}

		Thread.sleep(2000);

		boolean actOptionIsSelected = inputBatchEvenIfStockNoyUpdatedChkbox.isSelected();
		boolean expOptionIsSelected = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();

		System.out.println("inputBatchEvenIfStockNoyUpdatedChkbox  "+actOptionIsSelected+"  "+expOptionIsSelected);

		String expMessage1="Data saved successfully";
		String actMessage=checkValidationMessage(expMessage1);
		
		checkLogoutAndLogin();

		if (actMessage.equalsIgnoreCase(expMessage1)) 
		{
			System.out.println(" Test Pass: Setting Updated ");
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Setting Updated ");
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settings_closeBtn));
			settings_closeBtn.click();*/
			return false;
		}
	}

	@FindBy(xpath = "//*[@id='idGlobalError']/div/div[2]")
	public static List<WebElement> errorMessageList;
	
	@FindBy(xpath = "//*[@id='idGlobalError']/div/div/button")
	public static List<WebElement> errorMessageCloseBtnList;
	
	public static boolean checkBackgroundSavingNegativeMessage(String docno) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(1500);
		
		try
		{
			int count =errorMessageList.size();
			
			HashSet<String> actMessage = new HashSet<String>();

			for (int i = 0; i < count; i++) 
			{

				System.err.println(" Mesage Count in loop  : "+count);
				String data = errorMessageList.get(i).getText();
				actMessage.add(data);

				errorMessageCloseBtnList.get(i).click();
			}


			HashSet<String> expMessage = new HashSet<String>();

			expMessage.add("Voucher saved successfully : "+docno);
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);

			if(actMessage.equals(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());
			return false;

		} 
	}	

	public boolean checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher="120";

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = false; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);
		//click(newReferenceTxt); 
		//Thread.sleep(2000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="120.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="120.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		/*
		 * if (errorMessage.getText().
		 * equalsIgnoreCase("This Transaction will make the Stock Negative")) {
		 * errorMessageCloseBtn.click(); }
		 */
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}
	
	

	
	
	
	
	public boolean checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		System.out.println("*****************checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1******************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher="120";
		System.err.println("actQtyInVoucher :  "+actQtyInVoucher +" Value Exp : "+expQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = true; 

		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
		batchCancelIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveRow1.getText().isEmpty();

		// Expected

		boolean  expbatchRes_QtyToReserveRow1			=true;

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_CloseBtn));
		res_CloseBtn.click();

		Thread.sleep(3000);

		if(actbatchRes_QtyToReserveRow1==expbatchRes_QtyToReserveRow1 && 
				actBatchPopupTable==expBatchPopupTable)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	
	
	

	public boolean checkSuspendingSalesVou1AfterEnablingOptions() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		
		if (checkSuspendingVoucherInsalesOrder1()==true)
		{
			System.err.println(" Test Pass: Voucher Suspended Successfully  ");
			return true;
		}
		else 
		{
			System.err.println(" Test Fail: Voucher Suspended Successfully  ");
			return false;
		}
	}

	
	
	
	public boolean checkSavingSalesVou2AfterSuspendingVou1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher="120";

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = false; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="120.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="120.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 2");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 2");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		/*
		 * if (errorMessage.getText().
		 * equalsIgnoreCase("This Transaction will make the Stock Negative")) {
		 * errorMessageCloseBtn.click(); }
		 */
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}
	
	
	
	
	

	public boolean checkResavingSalesOrderVou1AfterVou2Saved() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();

				break;
			}
		}

		Thread.sleep(2999);

		checkValidationMessage("Voucher loaded successfully");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*
		 * HashSet<String> actMessage = new HashSet<String>(); HashSet<String>
		 * expMessage = new HashSet<String>();
		 * 
		 * if (errorMessage.getText().
		 * equalsIgnoreCase("This Transaction will make the Stock Negative")) { for (int
		 * i = 0; i < 4; i++) { String data = checkValidationMessage("");
		 * actMessage.add(data); }
		 * 
		 * expMessage.add("This Transaction will make the Stock Negative");
		 * expMessage.add("Saving in background.");
		 * expMessage.add("This Transaction will make the Stock Negative");
		 * expMessage.add("Voucher saved successfully : 1"); } else { for (int i = 0; i
		 * < 2; i++) { String data = checkValidationMessage(""); actMessage.add(data); }
		 * 
		 * expMessage.add("Voucher saved successfully : 1");
		 * expMessage.add("Saving in background."); }
		 * 
		 * System.out.println("Actual Message    : "+actMessage);
		 * System.out.println("Expected Message  : "+expMessage);
		 * 
		 * 
		 */
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			return true;
		} 
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			Thread.sleep(2000);
			
			checkSuspendingVoucherInsalesOrder1();

			return false;
		}
	}

	
	
	

	public boolean checkSavingSalesInvoiceVoucherWithLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
		workFlowHeaderChkBoxCL.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
		workFlowOkBtnCL.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
		Thread.sleep(3000);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		Thread.sleep(2000);
		pvWarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
		enter_SalesAccount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();

		enter_AQ.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
		enter_FQ.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();

		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
		enter_Discount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		select1stRow_19thColumn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		String actBatchNo=select1stRow_19thColumn.getText();
		String expBatchNo="BATCHAUTHORISE";

		Thread.sleep(1999);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1999);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 2; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : 1");
		expMessage.add("Saving in background.");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actBatchNo.equalsIgnoreCase(expBatchNo)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			errorMessageCloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	
	

	public boolean checkSavingPurchaseVoucherVATWithQty20() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		boolean actdata=checkEraseAllDATA();
		boolean expdata=true;

		System.err.println(" Erase All data : "+actdata +" Value Expected : "+expdata);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(2000);
		vendorAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys("BR COGS ITEM");
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys("20");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys("BatchAuthorise");
		enter_Batch.sendKeys(Keys.TAB);

		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal=Calendar.getInstance();
		cal.add(Calendar.DATE, 3); 
		String ExpiryDate=df.format(cal.getTime());

		System.out.println("--------- Date After Adding 3 Days :: " + ExpiryDate);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.HOME);
		enter_Expirydate.sendKeys(ExpiryDate,Keys.TAB);

		String actBatchNo=select1stRow_16thColumn.getText();
		String expBatchNo="BatchAuthorise";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 2; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : 1");
		expMessage.add("Saving in background.");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);

		if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actdata==expdata) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	
	
	
	public boolean checkSavingSalesOrderWithConsumingHalfQtyFromPurVouVat() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher="120.00";
		System.err.println("actQtyInVoucher :  "+actQtyInVoucher +" Value Exp : "+expQtyInVoucher);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = false; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "240.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="240.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="240.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 2; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : "+docno);
		expMessage.add("Saving in background.");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)

				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 

				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted))
		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	
	
	
	
	
	
	public boolean checkChangingQtyInPurVouVATAfterSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{ 
		Thread.sleep(2000);

		if (checkChangingQuantityInPurchaseVoucherAfterBatchConsumed()==true)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	
	
	
	
	public boolean checkSuspendingVoucherInSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSuspendingVoucherInsalesOrder1()==true)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	

	public boolean checkChangingQtyinPurVoucherAfterSalesOrderVouSuspended() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkChangingQuantityInPurchaseVoucherAfterBatchConsumed()==true)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}

	
	
	
	public boolean checkReSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);


		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();

				break;
			}
		}

		Thread.sleep(1999);

		checkValidationMessage("Voucher loaded successfully");

		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();

		for (int i = 0; i < 2; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		HashSet<String> expMessage = new HashSet<String>();

		expMessage.add("Voucher saved successfully : 1");
		expMessage.add("Saving in background.");

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		{
			System.err.println(" Test Pass: Voucher  saved ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		} 
		else
		{
			System.err.println(" Test Fail: Voucher  Not saved ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	
	
	
	

	public boolean checkSavingPurchaseVoucherVATWithChangingItemAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("STD");
		Thread.sleep(2999);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END,Keys.SHIFT);
		enter_Quantity.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		enter_Quantity.sendKeys("5");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.END,Keys.SHIFT);
		enter_Rate.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		enter_Rate.sendKeys("5");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		
		click(newReferenceTxt);
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1="Batch has already been used in another voucher";
		String actMessage=checkValidationMessage(expMessage1);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}



	
	
	
	public boolean checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}


		checkValidationMessage("Voucher Loaded Successfully");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.click();
		enter_Batch.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		enter_Batch.sendKeys("BatchUpdate");
		Thread.sleep(2000);
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		 Thread.sleep(2000);
			
			click(newReferenceTxt);
			Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1="Batch has already been used in another voucher";
		String actMessage=checkValidationMessage(expMessage1);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	
	
	
	public boolean checkSuspendingVoucherInSalesOrderAndChangingBatchNameInPurchaseVouVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		boolean actSuspend=checkSuspendingVoucherInsalesOrder1();
		boolean expSuspend=true;

		System.err.println(" Suspended Sales Order Doc  :"+actSuspend +" Value Exp : "+expSuspend);

		boolean actBatch=checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed();
		boolean expbatch=true;

		System.err.println(" Changing Batch Name in PV:"+actSuspend +" Value Exp : "+expSuspend);

		if (actBatch==expbatch && actSuspend==expSuspend) 
		{
			System.out.println(" Test Pass: Batch Name is not changed even after Consumed Sales Order Suspended ");
			return true;
		} 
		else 
		{
			System.out.println(" Test Fail: Batch Name is not changed even after Consumed Sales Order Suspended ");
			return true;
		}
	}
	
	
	


	public boolean checkSavingPVWithChangingWareHouseAfterVoucherConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{

				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.click();
		enter_WarehouseTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		enter_WarehouseTxt.sendKeys("SECUNDERABAD");
		Thread.sleep(2000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		enter_Quantity.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
		select1stRow_16thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
		enter_Batch.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
		enter_Expirydate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1="Batch has already been used in another voucher";
		String actMessage=checkValidationMessage(expMessage1);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}

	}


	public boolean checkEraseAllAndSavingPVVATWithBatchT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		Thread.sleep(2000);

		boolean erase=checkEraseAllDATA();
		boolean expErase=true;
		System.err.println(" Earse All : "+erase +" Value Expectred  : "+expErase);

		Thread.sleep(2000);

		boolean SavingPurchaseVoucher=checkSavingPurchaseVoucherVATWithCurrentdate();
		boolean expSavingPurchaseVoucher=true;
		System.err.println(" SavingPurchaseVoucher : "+SavingPurchaseVoucher +" Value Expectred  : "+expSavingPurchaseVoucher);

		if (SavingPurchaseVoucher==expSavingPurchaseVoucher && erase==expErase)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	@FindBy(xpath="//*[@id='id_menu_tree_Sales Orders']/a/span")
	private static WebElement salesOrderBtn;

	@FindBy(xpath="//*[@id='id_menu_tree_Sales Orders (1)']/a/span")
	private static WebElement salesOrderBtn1;




	public boolean checkDefineAuthorizationWithoutKeepunpostingOptionOnInventoryDocumentInSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrderBtn));
		salesOrderBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys("SalesOrder");

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addLevelBtn));
		addLevelBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys("Level1");
		Thread.sleep(1000);
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		boolean actConditionNotRequiredIsSelected = conditionNotRequiredChkBox.isSelected();
		boolean expConditionNotRequiredIsSelected = true;

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);

		if(keepUnpostedInventoryChkBox.isSelected()==true)
		{
			keepUnpostedInventoryChkBox.click();
		}

		boolean actkeepUnpostedInventoryChkBox = keepUnpostedInventoryChkBox.isSelected();
		boolean expkeepUnpostedInventoryChkBox = false;

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userSelectionTab));
		userSelectionTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userrow1));
		userrow1.click();
		Select user = new Select(userDropdown);
		user.selectByVisibleText("UserAllOptions");

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = "Authorization Flow saved successfully.";
		String actValidationMsg = checkValidationMessage(expValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected==expConditionNotRequiredIsSelected && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedInventoryChkBox==expkeepUnpostedInventoryChkBox)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return false;
		}
	}
	
	
	

	public boolean checkSavingSalOrdVou1AfterAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		Thread.sleep(2000);

		boolean delete=checkEraseAllDATA();
		boolean expdelete=true;

		System.err.println(" DELETE  "+delete +" Value   :"+expdelete);

		Thread.sleep(2000);

		boolean savingPurchase=checkSavingPurchaseVoucherVATWithCurrentdate();
		boolean expsavingPurchase=true;

		System.err.println(" savingPurchase  "+savingPurchase +" Value   :"+expsavingPurchase);

		Thread.sleep(2000);

		/*boolean manual=checkSalesOrderInReservationTypeIsManual();
		boolean expManual=true;

		System.err.println(" manual  "+manual +" Value   :"+expManual);

		Thread.sleep(2000);*/

		boolean saving=checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox();
		boolean expSaving=true;

		System.err.println(" saving  "+saving +" Value   :"+expSaving);

		Thread.sleep(2000);

		if (saving==expSaving && delete==expdelete && 
				savingPurchase==expsavingPurchase /*&& manual==expManual*/)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	

	public boolean checkSavingVoucherInsalesOrderafterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		boolean saving=checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1();
		boolean expSaving=true;

		System.err.println(" saving  "+saving +" Value   :"+expSaving);

		if (saving==expSaving) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	

	public boolean checkSavingSalesInvoiceWithLoadingLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingSalesInvoiceVoucherWithLinks()==true)
		{
			return true;
		} 
		else
		{
			return false;
		}
	}
	
	
	
	


	public boolean checkEditingQtyInPVVATAfterSavingSalesInvoiceVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);

		if (checkEditingAndSavingPurchaseVoucherVATVoucher1WithQuantityBelowConsumedQuantityInSalesInvoiceVoucher1()==true) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}
	
	
	
	

	public boolean checkChangingItemInPvVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();
				break;
			}
		}

		checkValidationMessage("Voucher Loaded Successfully");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		enter_ItemTxt.sendKeys("STD");
		Thread.sleep(2999);
		enter_ItemTxt.sendKeys(Keys.TAB);	

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
		enter_PvTaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.sendKeys(Keys.END,Keys.SHIFT);
		enter_Quantity.sendKeys(Keys.HOME);
		enter_Quantity.sendKeys("10");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys(Keys.END,Keys.SHIFT);
		enter_Rate.sendKeys(Keys.HOME);
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
		enter_PVDiscount.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		Thread.sleep(2000);
		
		click(newReferenceTxt);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1="Batch has already been used in another voucher";
		String actMessage=checkValidationMessage(expMessage1);

		System.out.println("******** Error Message : "+actMessage );

		if(actMessage.equalsIgnoreCase(expMessage1)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			getAlert().accept();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}

	
	
	
	

	public boolean checkChangingBatchNameInPVVATAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed()==true)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	


	public boolean checkChangingWarehouseInPVVATAfterAfterBatchConsumed() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed()==true)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	


	public boolean checkDeletingVoucherInSIAndSuspendingVoucherInSO() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomePAgeHeaderAllChkbox));
		voucherHomePAgeHeaderAllChkbox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
		deleteBtn.click();

		Thread.sleep(2000);;
		getWaitForAlert();

		getAlert().accept();

		String expDeleteMessage = "VoucherNo - 1: Voucher deleted Successfully";
		String actDeleteMessage = checkValidationMessage(expDeleteMessage);

		if( actDeleteMessage.equalsIgnoreCase(expDeleteMessage) ) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}




	


	public boolean checkSavingVoucherInSO2AfterSuspendingVoucherSO1() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		boolean suspended=checkSuspendingVoucherInsalesOrder1();
		boolean expsuspend=true;

		System.out.println("suspended  "+suspended +" Value  "+expsuspend);

		Thread.sleep(2000);


		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}
		
		Thread.sleep(1000);

		enter_ItemTxt.sendKeys(Keys.TAB);	
		
		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher="120";

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = false; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="120.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="120.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 2");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 2");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);	
		
	   
	   
	   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted) && 
				suspended==expsuspend

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
			
	}







	public boolean checkResavingSalesOrd1AfterSavingSalesOrd2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		int count = grid_VoucherNoList.size();

		for (int i = 0; i < count; i++) 
		{
			String VoucherNo = grid_VoucherNoList.get(i).getText();

			if (VoucherNo.equalsIgnoreCase("1")) 
			{
				grid_CheckBoxList.get(i).click();
				getAction().doubleClick(grid_CheckBoxList.get(i)).click().build().perform();

				break;
			}
		}

		Thread.sleep(2999);

		checkValidationMessage("Voucher loaded successfully");


		String docno=documentNumberTxt.getAttribute("value");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*HashSet<String> actMessage = new HashSet<String>();
		HashSet<String> expMessage = new HashSet<String>();

		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			for (int i = 0; i < 4; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Saving in background.");
			expMessage.add("This Transaction will make the Stock Negative");
			expMessage.add("Voucher saved successfully : 1");
		}
		else
		{
			for (int i = 0; i < 2; i++) 
			{
				String data = checkValidationMessage("");
				actMessage.add(data);
			}

			expMessage.add("Voucher saved successfully : 1");
			expMessage.add("Saving in background.");
		}

		System.out.println("Actual Message    : "+actMessage);
		System.out.println("Expected Message  : "+expMessage);*/
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 1";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

		if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			System.err.println(" Test Pass: Voucher  saved ");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		} 
		else
		{
			System.err.println(" Test Fail: Voucher  Not saved ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return false;
		}

	}


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_workflow_body']/tr/td[7]")
	private static List<WebElement> workFlowVoucherNoList;


	public boolean checkSavingSIWithLoadingLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();


		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
		for (int i = 0; i < workFlowVoucherNoListCount; i++) 
		{
			String data=workFlowVoucherNoList.get(i).getText();
			workFlowVoucherNoListarray.add(data);

		}

		String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
		String expworkFlowVoucherNoList="[SalOrd:1, SalOrd:2]";

		System.out.println(" workFlowVoucherNoList : "+actworkFlowVoucherNoList +" Value Exp : "+expworkFlowVoucherNoList);

		if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList))
		{
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.sendKeys("DUBAI");
			Thread.sleep(2000);
			departmentTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			Thread.sleep(3000);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();



			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();

			Thread.sleep(2000);


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();

			Thread.sleep(2000);


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCHAUTHORISE";

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();

			Thread.sleep(2000);
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();

			/*
			 * HashSet<String> actMessage = new HashSet<String>();
			 * 
			 * for (int i = 0; i < 2; i++) { String data = checkValidationMessage("");
			 * actMessage.add(data); }
			 * 
			 * HashSet<String> expMessage = new HashSet<String>();
			 * 
			 * expMessage.add("Voucher saved successfully : 1");
			 * expMessage.add("Saving in background.");
			 * 
			 * System.out.println("Actual Message    : "+actMessage);
			 * System.out.println("Expected Message  : "+expMessage);
			 */
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);	
			
		   
		   
		   System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

			System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}
		}

		else
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}


	
	
	
	
	public boolean checkDefineAuthorizationOnSalesOrderDocumentWithKeepUnpostingReservationsOption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));

		boolean erase=checkEraseAllDATA();
		boolean experase=true;

		System.err.println(" ERASE : "+erase +" VALUE  : "+experase);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationBtn));
		transactionAuthorizationBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNameDropdown));
		documentNameDropdown.sendKeys(" ");
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrderBtn1));
		salesOrderBtn1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		nameTxt.sendKeys("SalesOrder");

		Thread.sleep(3000);

		nameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Level1editBtn));
		Level1editBtn.click();

		Thread.sleep(2000);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(descriptionTxt));
		descriptionTxt.click();
		descriptionTxt.sendKeys("Level1");
		Thread.sleep(1000);
		descriptionTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		if(conditionNotRequiredChkBox.isSelected()==false)
		{
			conditionNotRequiredChkBox.click();
		}

		boolean actConditionNotRequiredIsSelected = conditionNotRequiredChkBox.isSelected();
		boolean expConditionNotRequiredIsSelected = true;

		System.out.println("Condition Not Required IsSelected  : "+actConditionNotRequiredIsSelected+" Value Expected "+expConditionNotRequiredIsSelected);


		Thread.sleep(2000);
		
		if(keepUnpostedResevationChkBox.isSelected()==false)
		{
			keepUnpostedResevationChkBox.click();
		}

		boolean actkeepUnpostedResevationChkBox = keepUnpostedResevationChkBox.isSelected();
		boolean expkeepUnpostedResevationChkBox = true;

		System.out.println("keepUnpostedResevationChkBox  : "+actkeepUnpostedResevationChkBox+" Value Expected "+expkeepUnpostedResevationChkBox);


		/*if(keepUnpostedInventoryChkBox.isSelected()==false)
		{
			keepUnpostedInventoryChkBox.click();
		}

		boolean actkeepUnpostedInventoryChkBox = keepUnpostedInventoryChkBox.isSelected();
		boolean expkeepUnpostedInventoryChkBox = true;

		System.out.println("keepUnpostedInventoryChkBox  : "+actkeepUnpostedInventoryChkBox+" Value Expected "+expkeepUnpostedInventoryChkBox);*/


		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(definitionOkBtn));
		definitionOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthSaveBtn));
		tranAuthSaveBtn.click();

		String expValidationMsg = "Authorization Flow saved successfully.";
		String actValidationMsg = checkValidationMessage(expValidationMsg);

		System.out.println("Validation Message : "+actValidationMsg+"  Value Expected : "+"True");

		if(actConditionNotRequiredIsSelected==expConditionNotRequiredIsSelected && actValidationMsg.equalsIgnoreCase(expValidationMsg) &&
				actkeepUnpostedResevationChkBox==expkeepUnpostedResevationChkBox)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tranAuthCancelBtn));
			tranAuthCancelBtn.click();
			return false;
		}
	}



	public boolean checkSavingPVVATAndSOVoucherAfterAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		boolean savingPV=checkSavingPurchaseVoucherVATWithCurrentdate();
		boolean expSaving=true;

		System.out.println(" saving : "+savingPV +" VALUE  : "+expSaving);
		Thread.sleep(2000);

		/*boolean settingOption=checkEnableInputBatchEvenStockIsNotUpdatedOptionInSalesOrder();
		boolean expSettingOption=true;


		System.out.println(" Setting Option  : "+settingOption +" Value  : "+expSettingOption);

		Thread.sleep(2000);*/
		/*boolean savingsalesOrder=checkEnableInputBatchEvenStockIsNotUpdatedOptionInSalesOrder();
		boolean expSalesOrder=true;

		System.out.println(" Saving Sales Order  : "+savingsalesOrder +" Value  : "+expSalesOrder);*/

		if ( savingPV==expSaving /*&& settingOption==expSettingOption*/ /*&& savingsalesOrder==expSalesOrder*/)
		{
			System.out.println(" Test Pass : Data Erased and saved ");
			return true;
		}
		else
		{
			System.out.println(" Test FAIL : Data Erased and saved ");
			return false;
		}
	}
	
	
	
	
	public boolean checkSavingSO1AfterChangingInAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox()==true) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	
	

	public boolean checkSavingSO2AfterChangingInAuthorisation() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		documentNumberTxt.click();

		documentNumberTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
		dateTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.click();
		customerAccountTxt.sendKeys(Keys.SPACE);

		int customercount=customerAccountListCount.size();

		System.err.println(customercount);

		for(int i=0 ; i < customercount ;i++)
		{
			String data=customerAccountListCount.get(i).getText();

			if(data.equalsIgnoreCase("Customer A"))
			{
				customerAccountListCount.get(i).click();

				break;
			}
		}

		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.click();
		pvWareHouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=pvwareHouseListCount.size();

		System.err.println(warehousecount);

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=pvwareHouseListCount.get(i).getText();

			if(data.equalsIgnoreCase("HYDERABAD"))
			{
				pvwareHouseListCount.get(i).click();
				break;
			}
		}

		pvWareHouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys(Keys.END);
		enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
		enter_ItemTxt.sendKeys(Keys.SPACE);

		int itemcount1=itemListCount.size();

		System.err.println(itemcount1);

		for(int i=0 ; i < itemcount1 ;i++)
		{
			String data=itemListCount.get(i).getText();

			if(data.equalsIgnoreCase("BR COGS ITEM"))
			{
				itemListCount.get(i).click();

				break;
			}
		}

		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
		enter_UnitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
		so_enter_AQTxt.sendKeys("120");
		so_enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
		so_enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		String actQtyInVoucher	=enter_Quantity.getAttribute("value");
		String expQtyInVoucher="120";

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
		String actItemName = batchItemName.getText();
		String expItemName = "BR COGS ITEM";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
		String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
		String expTotalQuantityInHeader="120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
		String actAdjustQuantity=batchAdjustQtyAmt.getText();
		String expAdjustQuantity="0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
		String actBalance=batchBalanceAmt.getText();
		String expBalance="120.00";

		boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
		boolean expBatchPopupTable = false; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
		String actTotalQuantity = batchTotalQuantity.getText();
		String expTotalQuantity = "120.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
		String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
		String expTotalQuantityAdjusted = "0.00";

		System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
		System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
		System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
		System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
		System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
		System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
		System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
		Thread.sleep(2000);
		batchPickOnFIFOIcon.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
		batchOkIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

		// Actual

		boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
		boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
		boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
		boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


		boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
		boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
		boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
		boolean actres_PickBtn						=res_PickBtn.isDisplayed();
		boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
		boolean actres_OkBtn						=res_OkBtn.isDisplayed();
		boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

		boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
		boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
		boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
		boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
		boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

		JavascriptExecutor jss = (JavascriptExecutor) getDriver();
		jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

		boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
		boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
		boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
		boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

		String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
		String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
		String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
		String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
		String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

		String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
		String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
		String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
		String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
		String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
		String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
		String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

		// Expected

		boolean expstockReservationLabel			=true;
		boolean expres_LeftPanelWareHouse			=true;
		boolean expres_LeftPanelItemCode			=true;
		boolean expres_LeftPanelItemName			=true;
		boolean expres_LeftPanelItemQty				=true;
		boolean expres_LeftPanelDueDate				=true;
		boolean expres_LeftPanelBaseUnit			=true;
		boolean expres_PickBtn						=true;
		boolean expres_DiscardBtn					=true;
		boolean expres_OkBtn						=true;
		boolean expres_CloseBtn						=true;

		boolean expbatchRes_BodyQtyToReserve		=true;
		boolean expbatchRes_BodyBatchNo				=true;
		boolean expbatchRes_BodyWareHouse			=true;
		boolean	expbatchRes_BodyAvailableQty		=true;
		boolean expbatchRes_BodyRelesaseQty			=true;
		boolean expbatchRes_BodyCurOrdResQty		=true;
		boolean expbatchRes_BodyMfgDate				=true;
		boolean expbatchRes_BodyExpDate				=true;
		boolean expbatchRes_BodyBatchQty			=true;


		String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
		String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
		String expTextres_LeftPanelItemQtyRow1		="120";
		String expTextres_LeftPanelBaseUnitRow1		="Pcs";


		String expbatchRes_QtyToReserveRow1			="0.00";
		String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
		String expbatchRes_WareHouseRow1			="HYDERABAD";
		String expbatchRes_AvailableQtyRow1			="120.00";
		String expbatchRes_RelesaseQtyRow1			="0.00";
		String expbatchRes_CurOrdResQtyRow1			="0.00";
		String expbatchRes_BatchQtyRow1				="120.00";

		System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
		System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
		System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
		System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
		System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
		System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
		System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
		System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
		System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
		System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
		System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

		System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
		System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
		System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
		System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
		System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
		System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
		System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
		System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
		System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

		System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
		System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
		System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
		System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
		System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

		System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
		System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
		System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
		System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
		System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
		System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
		System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
		batchRes_QtyToReserveRow1.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
		res_PickBtn.click();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
		res_OkBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String docno=documentNumberTxt.getAttribute("value");
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
		saveBtn.click();

		/*
		 * HashSet<String> actMessage = new HashSet<String>(); HashSet<String>
		 * expMessage = new HashSet<String>();
		 * 
		 * 
		 * 
		 * if (errorMessage.getText().
		 * equalsIgnoreCase("This Transaction will make the Stock Negative")) { for (int
		 * i = 0; i < 4; i++) { String data = checkValidationMessage("");
		 * actMessage.add(data); }
		 * 
		 * expMessage.add("This Transaction will make the Stock Negative");
		 * expMessage.add("Saving in background.");
		 * expMessage.add("This Transaction will make the Stock Negative");
		 * expMessage.add("Voucher saved successfully : 2"); } else { for (int i = 0; i
		 * < 2; i++) { String data = checkValidationMessage(""); actMessage.add(data); }
		 * 
		 * expMessage.add("Voucher saved successfully : 2");
		 * expMessage.add("Saving in background."); }
		 * 
		 * System.out.println("Actual Message    : "+actMessage);
		 * System.out.println("Expected Message  : "+expMessage);
		 */
		
		if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
		{
			errorMessageCloseBtn.click();
			}
		
		String expMessage1= "Voucher saved successfully";
		String expMessage2= ": 2";
		
		String actMessage = checkValidationMessage(expMessage1);

		System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
				&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
				&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
				&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

				&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
				&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
				&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
				&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
				&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

				&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
				&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
				&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


				&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
				&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
				&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
				&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


				actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
				&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
				&& actBatchPopupTable==expBatchPopupTable 
				&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

				)

		{
			System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return true;
		}
		else
		{
			System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	
	}


	@FindBy(xpath="//tbody[@id='tblBodyTransRender']")
	private static WebElement  voucherBodyGrid;
	
	@FindBy(xpath="//a[contains(text(),'Pending Sales Orders')]")
	private static WebElement  pendingSalesOrder;



	public boolean checkSavingSalesInvoiceVATWihLoadingLinks() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		
		click(pendingSalesOrder);
		Thread.sleep(2000);
		
		boolean actVoucherBodyText  =voucherBodyGrid.getText().isEmpty();
		//boolean actVoucherBody=voucherBodyGrid.getText().isEmpty();
		boolean expVoucherBodyText=true;
		
		//boolean actVoucherBody = false;
		System.err.println("actVoucherBodyText    :" +actVoucherBodyText);
		System.err.println("expVoucherBodyText    :" +expVoucherBodyText);
		
		if (actVoucherBodyText==expVoucherBodyText) {
			
			
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			 voucherhomeCloseBtn.click();
			 return true;
			
		}
		
		else
		{
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
		
	}

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();


		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
		for (int i = 0; i < workFlowVoucherNoListCount; i++) 
		{
			String data=workFlowVoucherNoList.get(i).getText();
			workFlowVoucherNoListarray.add(data);

		}

		String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
		String expworkFlowVoucherNoList="[SalOrd:1, SalOrd:2]";

		System.out.println(" workFlowVoucherNoList : "+actworkFlowVoucherNoList +" Value Exp : "+expworkFlowVoucherNoList);

		if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList))
		{
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.sendKeys("DUBAI");
			Thread.sleep(2000);
			departmentTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			Thread.sleep(3000);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCHAUTHORISE";

			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String actBatchNo2=select2ndRow_19thColumn.getText();
			String expBatchNo2="BATCHAUTHORISE";


			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();

			Thread.sleep(2000);
			
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();

			HashSet<String> actMessage = new HashSet<String>();
			HashSet<String> expMessage = new HashSet<String>();

			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				for (int i = 0; i < 4; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Saving in background.");
				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Voucher saved successfully : 1");
			}
			else
			{
				for (int i = 0; i < 2; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("Voucher saved successfully : 1");
				expMessage.add("Saving in background.");
			}

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);
			
			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				errorMessageCloseBtn.click();
				}
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);

			System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

			System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("2nd Row Batch No : "+actBatchNo2 +" value expected  "+expBatchNo2);

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actBatchNo2.equalsIgnoreCase(expBatchNo2)
					&& actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}
		}

		else
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;
		}
	}*/


	
	
	public boolean checksavingPVVATAndSavingSalesOrder() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		//Method executes erase and Saving Pv and sao Ord 1

		if (checkSavingSalOrdVou1AfterAuthorisation()==true)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	
	
	


	public boolean checkAuthorisationStatusOfSalesOrder() throws InterruptedException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(3000);

		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		System.out.println(" AuthorizationStatus : "+actAuthorizationStatus +" VAlue Exp :"+expAuthorizationStatus);

		if (actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			logoutOption.click();

			return true;
		}
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			logoutOption.click();
			
			return false;
		}
	}


	
	

	public boolean checkSavingSalesOrderVopucher2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
	System.out.println("*****************checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox******************");

	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
	inventoryMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
	inventoryTransactionsMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
	inventoryTransactionsSalesMenu.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
	salesOrdersVoucher.click();

	Thread.sleep(3000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
	newBtn.click();

	checkValidationMessage("Screen opened");

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	documentNumberTxt.click();

	documentNumberTxt.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
	dateTxt.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
	customerAccountTxt.click();
	customerAccountTxt.sendKeys(Keys.SPACE);

	int customercount=customerAccountListCount.size();

	System.err.println(customercount);

	for(int i=0 ; i < customercount ;i++)
	{
		String data=customerAccountListCount.get(i).getText();

		if(data.equalsIgnoreCase("Customer A"))
		{
			customerAccountListCount.get(i).click();

			break;
		}
	}

	customerAccountTxt.sendKeys(Keys.TAB);

	Thread.sleep(2000);


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	select1stRow_1stColumn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
	pvWareHouseTxt.click();
	pvWareHouseTxt.sendKeys(Keys.SPACE);

	int warehousecount=pvwareHouseListCount.size();

	System.err.println(warehousecount);

	for(int i=0 ; i < warehousecount ;i++)
	{
		String data=pvwareHouseListCount.get(i).getText();

		if(data.equalsIgnoreCase("HYDERABAD"))
		{
			pvwareHouseListCount.get(i).click();
			break;
		}
	}

	pvWareHouseTxt.sendKeys(Keys.TAB);

	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
	enter_ItemTxt.sendKeys(Keys.END);
	enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	enter_ItemTxt.sendKeys(Keys.BACK_SPACE);
	enter_ItemTxt.sendKeys(Keys.SPACE);

	int itemcount1=itemListCount.size();

	System.err.println(itemcount1);

	for(int i=0 ; i < itemcount1 ;i++)
	{
		String data=itemListCount.get(i).getText();

		if(data.equalsIgnoreCase("BR COGS ITEM"))
		{
			itemListCount.get(i).click();

			break;
		}
	}

	enter_ItemTxt.sendKeys(Keys.TAB);	
	
	Thread.sleep(1500);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
	enter_UnitTxt.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
	select1stRow_5thColumn.click();

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_AQTxt));
	so_enter_AQTxt.sendKeys("120");
	so_enter_AQTxt.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(so_enter_FQTxt));
	so_enter_FQTxt.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
	String actQtyInVoucher	=enter_Quantity.getAttribute("value");
	String expQtyInVoucher="120";

	Thread.sleep(2000);


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
	select1stRow_9thColumn.click();
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
	enter_Rate.sendKeys("10");
	enter_Rate.sendKeys(Keys.TAB);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
	enter_Gross.sendKeys(Keys.TAB);

	Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
	select1stRow_12thColumn.click();

	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
	String actItemName = batchItemName.getText();
	String expItemName = "BR COGS ITEM";

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
	String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
	String expTotalQuantityInHeader="120.00";

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
	String actAdjustQuantity=batchAdjustQtyAmt.getText();
	String expAdjustQuantity="0.00";

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
	String actBalance=batchBalanceAmt.getText();
	String expBalance="120.00";

	boolean actBatchPopupTable = batchPopupTable.getText().isEmpty();
	boolean expBatchPopupTable = false; 

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQuantity));
	String actTotalQuantity = batchTotalQuantity.getText();
	String expTotalQuantity = "120.00";

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalAdjustedQty));
	String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
	String expTotalQuantityAdjusted = "0.00";

	System.out.println("Item Name               : "+actItemName               +"  value expected  "+expItemName);
	System.out.println("Total Quantity          : "+actTotalQuantityInHeader  +"  value expected  "+expTotalQuantityInHeader);
	System.out.println("Adjust Quantity         : "+actAdjustQuantity         +"  value expected  "+expAdjustQuantity);
	System.out.println("Balance                 : "+actBalance                +"  value expected  "+expBalance);
	System.out.println("Batch Table isEmpty     : "+actBatchPopupTable        +"  value expected  "+expBatchPopupTable);
	System.out.println("Total Quantity          : "+actTotalQuantity          +"  value expected  "+expTotalQuantity);
	System.out.println("Total Quantity Adjusted : "+actTotalQuantityAdjusted  +"  value expected  "+expTotalQuantityAdjusted);

	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
	Thread.sleep(2000);
	batchPickOnFIFOIcon.click();

	Thread.sleep(2000);


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
	batchOkIcon.click();

	Thread.sleep(2000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationLabel));

	// Actual

	boolean actstockReservationLabel			=stockReservationLabel.isDisplayed();
	boolean actres_LeftPanelWareHouse			=res_LeftPanelWareHouse.isDisplayed();
	boolean actres_LeftPanelItemCode			=res_LeftPanelItemCode.isDisplayed();
	boolean actres_LeftPanelItemName			=res_LeftPanelItemName.isDisplayed();



	JavascriptExecutor js = (JavascriptExecutor) getDriver();
	js.executeScript("arguments[0].scrollIntoView();", res_LeftPanelBaseUnit);


	boolean actres_LeftPanelItemQty				=res_LeftPanelItemQty.isDisplayed();
	boolean actres_LeftPanelDueDate				=res_LeftPanelDueDate.isDisplayed();
	boolean actres_LeftPanelBaseUnit			=res_LeftPanelBaseUnit.isDisplayed();
	boolean actres_PickBtn						=res_PickBtn.isDisplayed();
	boolean actres_DiscardBtn					=res_DiscardBtn.isDisplayed();
	boolean actres_OkBtn						=res_OkBtn.isDisplayed();
	boolean actres_CloseBtn						=res_CloseBtn.isDisplayed();

	boolean actbatchRes_BodyQtyToReserve		=batchRes_BodyQtyToReserve.isDisplayed();
	boolean actbatchRes_BodyBatchNo				=batchRes_BodyBatchNo.isDisplayed();
	boolean actbatchRes_BodyWareHouse			=batchRes_BodyWareHouse.isDisplayed();
	boolean	actbatchRes_BodyAvailableQty		=batchRes_BodyAvailableQty.isDisplayed();
	boolean actbatchRes_BodyRelesaseQty			=batchRes_BodyRelesaseQty.isDisplayed();

	JavascriptExecutor jss = (JavascriptExecutor) getDriver();
	jss.executeScript("arguments[0].scrollIntoView();", batchRes_BodyBatchQty);

	boolean actbatchRes_BodyCurOrdResQty		=batchRes_BodyCurOrdResQty.isDisplayed();
	boolean actbatchRes_BodyMfgDate				=batchRes_BodyMfgDate.isDisplayed();
	boolean actbatchRes_BodyExpDate				=batchRes_BodyExpDate.isDisplayed();
	boolean actbatchRes_BodyBatchQty			=batchRes_BodyBatchQty.isDisplayed();

	String actTextres_LeftPanelWareHouseRow1	=res_LeftPanelWareHouseRow1.getText();
	String actTextres_LeftPanelItemCodeRow1		=res_LeftPanelItemCodeRow1.getText();
	String actTextres_LeftPanelItemNameRow1		=res_LeftPanelItemNameRow1.getText();
	String actTextres_LeftPanelItemQtyRow1		=res_LeftPanelItemQtyRow1.getText();
	String actTextres_LeftPanelBaseUnitRow1		=res_LeftPanelBaseUnitRow1.getText();

	String actbatchRes_QtyToReserveRow1			=batchRes_QtyToReserveTxt.getText();
	String actbatchRes_BatchNoRow1				=batchRes_BatchNoRow1.getText();
	String actbatchRes_WareHouseRow1			=batchRes_WareHouseRow1.getText();
	String actbatchRes_AvailableQtyRow1			=batchRes_AvailableQtyRow1.getText();
	String actbatchRes_RelesaseQtyRow1			=batchRes_RelesaseQtyRow1.getText();
	String actbatchRes_CurOrdResQtyRow1			=batchRes_CurOrdResQtyRow1.getText();
	String actbatchRes_BatchQtyRow1				=batchRes_BatchQtyRow1.getText();

	// Expected

	boolean expstockReservationLabel			=true;
	boolean expres_LeftPanelWareHouse			=true;
	boolean expres_LeftPanelItemCode			=true;
	boolean expres_LeftPanelItemName			=true;
	boolean expres_LeftPanelItemQty				=true;
	boolean expres_LeftPanelDueDate				=true;
	boolean expres_LeftPanelBaseUnit			=true;
	boolean expres_PickBtn						=true;
	boolean expres_DiscardBtn					=true;
	boolean expres_OkBtn						=true;
	boolean expres_CloseBtn						=true;

	boolean expbatchRes_BodyQtyToReserve		=true;
	boolean expbatchRes_BodyBatchNo				=true;
	boolean expbatchRes_BodyWareHouse			=true;
	boolean	expbatchRes_BodyAvailableQty		=true;
	boolean expbatchRes_BodyRelesaseQty			=true;
	boolean expbatchRes_BodyCurOrdResQty		=true;
	boolean expbatchRes_BodyMfgDate				=true;
	boolean expbatchRes_BodyExpDate				=true;
	boolean expbatchRes_BodyBatchQty			=true;


	String expTextres_LeftPanelWareHouseRow1	="HYDERABAD";
	String expTextres_LeftPanelItemCodeRow1		="BR COGS ITEM";
	String expTextres_LeftPanelItemNameRow1		="BR COGS ITEM";
	String expTextres_LeftPanelItemQtyRow1		="120";
	String expTextres_LeftPanelBaseUnitRow1		="Pcs";


	String expbatchRes_QtyToReserveRow1			="0.00";
	String expbatchRes_BatchNoRow1				="BATCHAUTHORISE";
	String expbatchRes_WareHouseRow1			="HYDERABAD";
	String expbatchRes_AvailableQtyRow1			="120.00";
	String expbatchRes_RelesaseQtyRow1			="0.00";
	String expbatchRes_CurOrdResQtyRow1			="0.00";
	String expbatchRes_BatchQtyRow1				="120.00";

	System.out.println("stockReservationLabel  				: "+actstockReservationLabel				+" 	Value Expected : "+expstockReservationLabel);
	System.out.println("res_LeftPanelWareHouse  			: "+actres_LeftPanelWareHouse				+" 	Value Expected : "+expres_LeftPanelWareHouse);
	System.out.println("res_LeftPanelItemCode  				: "+actres_LeftPanelItemCode				+" 	Value Expected : "+expres_LeftPanelItemCode);
	System.out.println("res_LeftPanelItemName  				: "+actres_LeftPanelItemName				+" 	Value Expected : "+expres_LeftPanelItemName);
	System.out.println("res_LeftPanelItemQty  				: "+actres_LeftPanelItemQty					+" 	Value Expected : "+expres_LeftPanelItemQty);
	System.out.println("res_LeftPanelDueDate  				: "+actres_LeftPanelDueDate					+" 	Value Expected : "+expres_LeftPanelDueDate);
	System.out.println("res_LeftPanelBaseUnit  				: "+actres_LeftPanelBaseUnit				+"  Value Expected : "+expres_LeftPanelBaseUnit);
	System.out.println("res_PickBtn  						: "+actres_PickBtn							+" 	Value Expected : "+expres_PickBtn);
	System.out.println("res_DiscardBtn  					: "+actres_DiscardBtn						+" 	Value Expected : "+expres_DiscardBtn);
	System.out.println("res_OkBtn  							: "+actres_OkBtn							+" 	Value Expected : "+expres_OkBtn);
	System.out.println("res_CloseBtn  						: "+actres_CloseBtn							+" 	Value Expected : "+expres_CloseBtn);

	System.out.println("batchRes_BodyQtyToReserve  			: "+actbatchRes_BodyQtyToReserve			+" 	Value Expected : "+expbatchRes_BodyQtyToReserve);
	System.out.println("batchRes_BodyBatchNo  				: "+actbatchRes_BodyBatchNo					+" 	Value Expected : "+expbatchRes_BodyBatchNo);
	System.out.println("batchRes_BodyWareHouse  			: "+actbatchRes_BodyWareHouse				+" 	Value Expected : "+expbatchRes_BodyWareHouse);
	System.out.println("batchRes_BodyAvailableQty  			: "+actbatchRes_BodyAvailableQty			+" 	Value Expected : "+expbatchRes_BodyAvailableQty);
	System.out.println("batchRes_BodyRelesaseQty  			: "+actbatchRes_BodyRelesaseQty				+" 	Value Expected : "+expbatchRes_BodyRelesaseQty);
	System.out.println("batchRes_BodyCurOrdResQty  			: "+actbatchRes_BodyCurOrdResQty			+" 	Value Expected : "+expbatchRes_BodyCurOrdResQty);
	System.out.println("batchRes_BodyMfgDate  				: "+actbatchRes_BodyMfgDate					+" 	Value Expected : "+expbatchRes_BodyMfgDate);
	System.out.println("batchRes_BodyExpDate  				: "+actbatchRes_BodyExpDate					+" 	Value Expected : "+expbatchRes_BodyExpDate);
	System.out.println("batchRes_BodyBatchQty  				: "+actbatchRes_BodyBatchQty				+" 	Value Expected : "+expbatchRes_BodyBatchQty);

	System.out.println("Textres_LeftPanelWareHouseRow1  	: "+actTextres_LeftPanelWareHouseRow1		+" 	Value Expected : "+expTextres_LeftPanelWareHouseRow1);
	System.out.println("Textres_LeftPanelItemCodeRow1  		: "+actTextres_LeftPanelItemCodeRow1		+" 	Value Expected : "+expTextres_LeftPanelItemCodeRow1);
	System.out.println("Textres_LeftPanelItemNameRow1  		: "+actTextres_LeftPanelItemNameRow1		+" 	Value Expected : "+expTextres_LeftPanelItemNameRow1);
	System.out.println("Textres_LeftPanelItemQtyRow1  		: "+actTextres_LeftPanelItemQtyRow1			+" 	Value Expected : "+expTextres_LeftPanelItemQtyRow1);
	System.out.println("Textres_LeftPanelBaseUnitRow1  		: "+actTextres_LeftPanelBaseUnitRow1		+" 	Value Expected : "+expTextres_LeftPanelBaseUnitRow1);

	System.out.println("batchRes_QtyToReserveRow1  		    : "+actbatchRes_QtyToReserveRow1			+" 	Value Expected : "+expbatchRes_QtyToReserveRow1);
	System.out.println("batchRes_BatchNoRow1  				: "+actbatchRes_BatchNoRow1					+" 	Value Expected : "+expbatchRes_BatchNoRow1);
	System.out.println("batchRes_WareHouseRow1  			: "+actbatchRes_WareHouseRow1				+" 	Value Expected : "+expbatchRes_WareHouseRow1);
	System.out.println("batchRes_AvailableQtyRow1  			: "+actbatchRes_AvailableQtyRow1			+" 	Value Expected : "+expbatchRes_AvailableQtyRow1);
	System.out.println("batchRes_RelesaseQtyRow1  			: "+actbatchRes_RelesaseQtyRow1				+" 	Value Expected : "+expbatchRes_RelesaseQtyRow1);
	System.out.println("batchRes_CurOrdResQtyRow1 			: "+actbatchRes_CurOrdResQtyRow1   			+"  Value Expected : "+expbatchRes_CurOrdResQtyRow1);
	System.out.println("batchRes_BatchQtyRow1  				: "+actbatchRes_BatchQtyRow1				+" 	Value Expected : "+expbatchRes_BatchQtyRow1);


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchRes_QtyToReserveRow1));
	batchRes_QtyToReserveRow1.click();

	Thread.sleep(3000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_PickBtn));
	res_PickBtn.click();
	Thread.sleep(3000);

	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(res_OkBtn));
	res_OkBtn.click();

	Thread.sleep(3000);


	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String docno=documentNumberTxt.getAttribute("value");
	Thread.sleep(3000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
	saveBtn.click();

	/*HashSet<String> actMessage = new HashSet<String>();
	HashSet<String> expMessage = new HashSet<String>();

	
	
	if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
	{
		for (int i = 0; i < 4; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Saving in background.");
		expMessage.add("This Transaction will make the Stock Negative");
		expMessage.add("Voucher saved successfully : 2");
	}
	else
	{
		for (int i = 0; i < 2; i++) 
		{
			String data = checkValidationMessage("");
			actMessage.add(data);
		}

		expMessage.add("Voucher saved successfully : 2");
		expMessage.add("Saving in background.");
	}

	System.out.println("Actual Message    : "+actMessage);
	System.out.println("Expected Message  : "+expMessage);*/
	
	if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
	{
		errorMessageCloseBtn.click();
		}
	
	String expMessage1= "Voucher saved successfully";
	String expMessage2= ": 2";
	
	String actMessage = checkValidationMessage(expMessage1);

	System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

	if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actstockReservationLabel==expstockReservationLabel && actres_LeftPanelWareHouse==expres_LeftPanelWareHouse && actres_LeftPanelItemCode==expres_LeftPanelItemCode
			&& actres_LeftPanelItemName==expres_LeftPanelItemName && actres_LeftPanelItemQty==expres_LeftPanelItemQty
			&& actres_LeftPanelDueDate==expres_LeftPanelDueDate && actres_LeftPanelBaseUnit==expres_LeftPanelBaseUnit && actres_PickBtn==expres_PickBtn
			&& actres_DiscardBtn==expres_DiscardBtn && actres_OkBtn==expres_OkBtn && actres_CloseBtn==expres_CloseBtn 

			&& actbatchRes_BodyQtyToReserve==expbatchRes_BodyQtyToReserve && actbatchRes_BodyBatchNo==expbatchRes_BodyBatchNo
			&& actbatchRes_BodyWareHouse==expbatchRes_BodyWareHouse && actbatchRes_BodyAvailableQty==expbatchRes_BodyAvailableQty
			&& actbatchRes_BodyRelesaseQty==expbatchRes_BodyRelesaseQty && actbatchRes_BodyCurOrdResQty==expbatchRes_BodyCurOrdResQty
			&& actbatchRes_BodyMfgDate==expbatchRes_BodyMfgDate && actbatchRes_BodyExpDate==expbatchRes_BodyExpDate
			&& actbatchRes_BodyBatchQty==expbatchRes_BodyBatchQty

			&& actTextres_LeftPanelWareHouseRow1.equalsIgnoreCase(expTextres_LeftPanelWareHouseRow1)
			&& actTextres_LeftPanelItemCodeRow1.equalsIgnoreCase(expTextres_LeftPanelItemCodeRow1) && actTextres_LeftPanelItemNameRow1.equalsIgnoreCase(expTextres_LeftPanelItemNameRow1)
			&& actTextres_LeftPanelItemQtyRow1.equalsIgnoreCase(expTextres_LeftPanelItemQtyRow1) && actTextres_LeftPanelBaseUnitRow1.equalsIgnoreCase(expTextres_LeftPanelBaseUnitRow1)


			&& actbatchRes_QtyToReserveRow1.equalsIgnoreCase(expbatchRes_QtyToReserveRow1)&& actbatchRes_BatchNoRow1.equalsIgnoreCase(expbatchRes_BatchNoRow1)
			&& actbatchRes_WareHouseRow1.equalsIgnoreCase(expbatchRes_WareHouseRow1) && actbatchRes_AvailableQtyRow1.equalsIgnoreCase(expbatchRes_AvailableQtyRow1)
			&& actbatchRes_RelesaseQtyRow1.equalsIgnoreCase(expbatchRes_RelesaseQtyRow1) && actbatchRes_CurOrdResQtyRow1.equalsIgnoreCase(expbatchRes_CurOrdResQtyRow1)
			&& actbatchRes_BatchQtyRow1.equalsIgnoreCase(expbatchRes_BatchQtyRow1)  && 


			actItemName.equalsIgnoreCase(expItemName) && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader)
			&& actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) && actBalance.equalsIgnoreCase(expBalance) 
			&& actBatchPopupTable==expBatchPopupTable 
			&& actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted)

			)

	{
		System.out.println(" Test Pass: Voucher Saved And Batch pop Up Displayed");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();

		return true;
	}
	else
	{
		System.out.println(" Test Fail: Voucher Saved And Batch pop Up Displayed");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
		new_CloseBtn.click();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
		voucherhomeCloseBtn.click();
		return false;
	}
}
	
	
	
	
	

	public boolean checkLoginToUserForAuthorisationINSalesOrder() throws InterruptedException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();

		Thread.sleep(3000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="useralloptions";

		String pawslt="12345";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		
		String compname = "Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List<WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :" + cqSize);

		int i;

		for (i = 0; i < elementCount.size(); i++) {
			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();

			if (optionName.toUpperCase().startsWith(compname.toUpperCase())) {
				System.out.println("q" + elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = 2;


		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();


		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);


		if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return false;
		}

	}






	public boolean checkAuthorisedVoucherInSalesOrder() throws InterruptedException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();

		Thread.sleep(2000);
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = 1;


		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Authorized";


		System.out.println("AuthorizationStatus : "+actAuthorizationStatus +" Value Exp : "+expAuthorizationStatus);
		
		String actAuthorizationStatus2 = voucherGridRow2AuthorizationStatus.getText();
		String expAuthorizationStatus2 = "Pending";

		System.out.println("AuthorizationStatus1 : "+actAuthorizationStatus2 +" Value Exp : "+expAuthorizationStatus2);

		/*String actAuthorizationStatus2 = voucherGridRow2AuthorizationStatus.getText();
		String expAuthorizationStatus2 = "Authorized";

		System.out.println("AuthorizationStatus1 : "+actAuthorizationStatus2 +" Value Exp : "+expAuthorizationStatus2);*/

		if (actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus) && 
				actAuthorizationStatus2.equalsIgnoreCase(expAuthorizationStatus2))
		{
			return true;
		}
		else 
		{
			return false;
		}	
	}
	
	
	public boolean checkSavingSalesInvoiceVATWihLoadingLinks2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
		financialsTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);
		/*click(pendingSalesOrder);
		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
		workFlowExpandBtn.click();


		int workFlowVoucherNoListCount=workFlowVoucherNoList.size();
		ArrayList<String >workFlowVoucherNoListarray=new ArrayList<>();
		for (int i = 0; i < workFlowVoucherNoListCount; i++) 
		{
			String data=workFlowVoucherNoList.get(i).getText();
			workFlowVoucherNoListarray.add(data);

		}

		String actworkFlowVoucherNoList=workFlowVoucherNoListarray.toString();
		String expworkFlowVoucherNoList="[SalOrd:2]";

		System.out.println(" workFlowVoucherNoList : "+actworkFlowVoucherNoList +" Value Exp : "+expworkFlowVoucherNoList);

		if (actworkFlowVoucherNoList.equalsIgnoreCase(expworkFlowVoucherNoList))
		{
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowHeaderChkBoxCL));
			workFlowHeaderChkBoxCL.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.sendKeys("DUBAI");
			Thread.sleep(2000);
			departmentTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			Thread.sleep(3000);
			salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCHAUTHORISE";

			/*Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			Thread.sleep(2000);
			pvWarehouseTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			select2ndRow_8thColumn.click();

			enter_AQ.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_14thColumn));
			select2ndRow_14thColumn.click();

			enter_Rate.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String actBatchNo2=select2ndRow_19thColumn.getText();
			String expBatchNo2="BATCHAUTHORISE";*/


			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();

			Thread.sleep(2000);
			
			click(newReferenceTxt);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();

			Thread.sleep(1999);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();

			/*HashSet<String> actMessage = new HashSet<String>();
			HashSet<String> expMessage = new HashSet<String>();

			if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				for (int i = 0; i < 4; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Saving in background.");
				expMessage.add("This Transaction will make the Stock Negative");
				expMessage.add("Voucher saved successfully : 1");
			}
			else
			{
				for (int i = 0; i < 2; i++) 
				{
					String data = checkValidationMessage("");
					actMessage.add(data);
				}

				expMessage.add("Voucher saved successfully : 1");
				expMessage.add("Saving in background.");
			}

			System.out.println("Actual Message    : "+actMessage);
			System.out.println("Expected Message  : "+expMessage);*/
			
			/*if (errorMessage.getText().equalsIgnoreCase("This Transaction will make the Stock Negative")) 
			{
				errorMessageCloseBtn.click();
				}*/
			
			String expMessage1= "Voucher saved successfully";
			String expMessage2= ": 1";
			
			String actMessage = checkValidationMessage(expMessage1);

			System.out.println("SavingMessage  :  "+actMessage +" Value Expected : "+expMessage1+" "+expMessage2);	

			System.out.println("1st Row Batch No : "+actBatchNo +"  value expected  "+expBatchNo);
			/*System.out.println("2nd Row Batch No : "+actBatchNo2 +" value expected  "+expBatchNo2); */
		
		
			/*boolean actVoucherBodyText  =voucherBodyGrid.getText().isEmpty();
			//boolean actVoucherBody=voucherBodyGrid.getText().isEmpty();
			boolean expVoucherBodyText=true;
			
			//boolean actVoucherBody = false;
			System.err.println("actVoucherBodyText    :" +actVoucherBodyText);
			System.err.println("expVoucherBodyText    :" +expVoucherBodyText);
			
			if (actVoucherBodyText==expVoucherBodyText) {
				
				
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				 voucherhomeCloseBtn.click();
				 return true;
				
			}
			
			else
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}
			
			
			
			if (voucherBodyGrid.getText().isEmpty() || voucherBodyGrid.equalsIgnoreCase("") || voucherBodyGrid.equalsIgnoreCase(" ")) {
				
				 actVoucherBody=true;
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				 voucherhomeCloseBtn.click();
				 return true;
				
			}
			
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}*/
			
		

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)
					&& actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				return false;
			}
		}

		else
		{
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return false;  
			
		}
	}
	
	
	
	

	public boolean checksavingsalesInvoiceVATAfterTwoVouchersAuthorised() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		if (checkSavingSalesInvoiceVATWihLoadingLinks2()==true) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}

	
	
	
	
	

	public boolean checkSavingPVVatAndSO() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException, AWTException
	{
		Thread.sleep(2000);

		boolean delete=checkEraseAllDATA();
		boolean expdelete=true;

		System.err.println(" DELETE  "+delete +" Value   :"+expdelete);

		Thread.sleep(2000);

		boolean savingPurchase=checkSavingPurchaseVoucherVATWithCurrentdate();
		boolean expsavingPurchase=true;

		System.err.println(" savingPurchase  "+savingPurchase +" Value   :"+expsavingPurchase);

		Thread.sleep(2000);
		
		/*boolean manual=checkSalesOrderInReservationTypeIsManual();
		boolean expManual=true;

		System.err.println(" manual  "+manual +" Value   :"+expManual);

		Thread.sleep(2000);*/

		boolean saving=checkSavingSalesOrderVoucherAfterEnableInputBatchEvenIfStockNotUpdatedChkbox();
		boolean expSaving=true;

		System.err.println(" saving  "+saving +" Value   :"+expSaving);

		Thread.sleep(2000);

		if (saving==expSaving && delete==expdelete && savingPurchase==expsavingPurchase /*&& manual==expManual*/)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	



	public boolean checkLoginToUserallOptionsForAuthoriseSalesOrder() throws InterruptedException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();
		
		
		Thread.sleep(3000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="useralloptions";

		String pawslt="12345";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);

		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}
		}

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
		inventoryMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
		inventoryTransactionsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsSalesMenu));
		inventoryTransactionsSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesOrdersVoucher));
		salesOrdersVoucher.click();

		Thread.sleep(4999);

		int voucherGridDocNoCount = voucherGridDocNo.size();

		int actSavedVouchersCount = voucherGridDocNoCount-1;
		int expSavedVouchersCount = 1;


		String actAuthorizationStatus = voucherGridRow1AuthorizationStatus.getText();
		String expAuthorizationStatus = "Pending";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pendingAuthorizationPurchases));
		pendingAuthorizationPurchases.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHomeRow1ChkBox));
		voucherHomeRow1ChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(authorizeBtn));
		authorizeBtn.click();

		System.out.println("************************************* checkPurchasesVoucherNAuthorizationStatusWithUserAllOptionsAndConditionsNotRequiredOption  *********************************");

		System.out.println("SavedVouchersCount        : "+actSavedVouchersCount        +" Value Expected : "+expSavedVouchersCount);
		System.out.println("AuthorizationStatus       : "+actAuthorizationStatus       +" Value Expected : "+expAuthorizationStatus);

		if(actSavedVouchersCount==expSavedVouchersCount && actAuthorizationStatus.equalsIgnoreCase(expAuthorizationStatus))
		{
			System.out.println("Test Pass : Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();
			return true;
		}
		else
		{
			System.out.println("Test Fail : NOT Authorized Succesfully");
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
			voucherhomeCloseBtn.click();

			return false;
		}
	}


	
	
	
	
	public boolean checkSavingVou2AfterAuthorisationInsalesOrder() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		logoutOption.click();

		Thread.sleep(3000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		boolean qflag=true;

		lp.enterUserName(unamelt);

		lp.enterPassword(pawslt);


		String compname="Automation Options Company";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		System.out.println("CompanyDropdownList Count :"+cqSize);

		int i;

		for(i=0; i<elementCount.size(); i++) 
		{

			elementCount.get(i).getText();

			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}

		}

		Thread.sleep(2000);

		lp.clickOnSignInBtn();

		Thread.sleep(5000);

		boolean saving=checkSavingSalesOrdervoucher2AfterConsumedBatchInVoucher1();
		boolean expSaving=true;

		System.out.println(" SAVING VOUCHER : "+saving +" Value Exp: "+expSaving);

		if (saving==expSaving)
		{
			return true; 
		}
		else
		{
			return false;
		}
	}
	
	
	
	
	
	

	public boolean checkChangingItemAndBatchAndWareHouseInConsumedPVVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		
		boolean item=checkSavingPurchaseVoucherVATWithChangingItemAfterBatchConsumed();
		boolean expItem=true;

		System.err.println(" Changing ITEM : "+item +" Value Exp: "+expItem);

		Thread.sleep(2000);
		
		boolean batch=checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed();
		boolean expbatch=true;

		System.err.println(" Changing BATCH : "+batch +" Value Exp: "+expbatch);

		Thread.sleep(2000);
		
		boolean warehouse=checkChangingBatchInPurchaseVoucherVATAfterAfterBatchConsumed();
		boolean expWarehouse=true;

		System.err.println(" Changing WAREHOUSE : "+warehouse +" Value Exp: "+expWarehouse);

		if (warehouse==expWarehouse && batch==expbatch && item==expItem) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}
	
	
	public boolean checkLogout() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	  userNameDisplay.click();
	 
	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
	  logoutOption.click();
	  
	  Thread.sleep(2000);
	  
	  System.out.println("Logout  Successfully");

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
	  boolean actUserName = username.isDisplayed();
	  boolean expUserName = true; 
			  
      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
      boolean actPassword = password.isDisplayed();
      boolean expPassword = true;  
		
      System.out.println("*************************CheckLogout***************************");
      
      System.out.println("UserName is Displaying : "+actUserName+"  Value Expected  "+expUserName);
      System.out.println("Password is Displaying : "+actPassword+"  Value Expected  "+expPassword);
      
	if(actUserName==expUserName && actPassword==expPassword)  
      {
		return true;
	  }
      else
      {
		return false;
	  }
    }






	public BatchNegativeTestingOptionsPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
}
